
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND CHAR C_CONST DATAFRAME DESCRIBE DIFFERENT DO ELSE EQUAL FALSE FLOAT FOR FUNC F_CONST ID IF INT I_CONST MAIN OR PRINT PROG RETURN TITLE TO TRUE VAR VOID WHILE\n    PROGRAM : PROG add_type ID add_id ';' go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN '{' fill_go_to_main_quad VARS_PRIME BLOCK '}' empty_global_variables_table\n    go_to_main : empty_global_variables_table : empty_local_variables_table : fill_go_to_main_quad : add_id : save_ids : save_parameter : save_function : \n    VARS_PRIME : VARS VARS_PRIME\n               | empty\n    \n    FUNCTION_PRIME : FUNCTION FUNC_PRIME\n                   | empty\n    \n    FUNC_PRIME : FUNCTION FUNC_PRIME\n         | empty\n    add_type : add_current_type : \n    VARS : VAR TIPO_COMP ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' ';'\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' '[' EXPRESSION ']' ';'\n    \n    TIPO_PRIME : ',' ID add_id add_current_type TIPO_PRIME\n               | empty\n    get_variable : \n    VARIABLE : ID get_variable\n             | ID '[' EXPRESSION ']'\n    \n    TIPO_SIMPLE : INT add_type\n                | FLOAT add_type\n                | CHAR add_type\n    \n    TIPO_COMP : DATAFRAME\n    add_function_type : save_function_as_variable : return_quad : \n    FUNCTION : FUNC TIPO_SIMPLE add_function_type ID add_id save_function '(' PARAM add_parameters ')' save_function_as_variable '{' VARS_PRIME BLOCK RETURN EXPRESSION ';' return_quad '}' empty_local_variables_table\n             | FUNC VOID add_type ID add_id save_function '(' PARAM add_parameters ')' '{' VARS_PRIME BLOCK '}' empty_local_variables_table\n    add_parameters : \n    PARAM : TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME\n          | empty\n    \n    PARAM_PRIME : ',' TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME\n                | empty\n    \n    BLOCK : STATEMENT BLOCK\n          | empty\n    \n    STATEMENT : ASSIGNATION\n              | FUNC_CALL\n              | EXPRESSION ';'\n              | WRITE ';'\n              | CONDITION\n              | WHILE_STMT\n              | FOR_STMT\n              | DESCRIBE_STMT\n    add_operator : add_operand : add_assignation_quad : add_assignation_for_quad : functions_assignation : \n    ASSIGNATION : VARIABLE '=' add_operator EXPRESSION ';' add_assignation_quad\n                | FOR VARIABLE '=' add_operator EXPRESSION add_assignation_for_quad\n                | VARIABLE '=' add_operator FUNC_CALL functions_assignation add_assignation_quad\n    era_quad : param_quad : go_sub_quad : \n    FUNC_CALL : FUNC ID era_quad '(' EXPRESSION param_quad FUNC_CALL_PRIME ')' go_sub_quad\n    \n    FUNC_CALL_PRIME : ',' EXPRESSION param_quad FUNC_CALL_PRIME\n                    | empty\n    print_quad : add_print_operator : \n    WRITE : PRINT add_operator '(' EXPRESSION print_quad WRITE_PRIME ')'\n               | PRINT add_operator '(' TITLE WRITE_PRIME ')'\n    \n    WRITE_PRIME : ',' add_print_operator EXPRESSION print_quad WRITE_PRIME\n                | ',' add_print_operator TITLE print_quad WRITE_PRIME\n                | empty\n    go_to_false_quad : fill_go_to_false_quad : fill_go_to_false_quad_if : go_to_true_quad : fill_go_to_true_quad : go_to_quad : pop_operand : pop_type : append_jump : \n    CONDITION : IF '(' EXPRESSION pop_type ')' '{' go_to_false_quad BLOCK '}' fill_go_to_false_quad_if ELSE_STMT\n    \n    ELSE_STMT : ELSE '{' go_to_true_quad BLOCK '}' fill_go_to_true_quad\n              | empty pop_operand\n    \n    WHILE_STMT : WHILE '(' append_jump EXPRESSION pop_type ')' '{' go_to_false_quad  BLOCK '}' fill_go_to_false_quad go_to_quad pop_operand\n    check_exact_type_for : add_final_counter_for : generate_for_quad : check_boolean_expression_for : end_for : \n    FOR_STMT : ASSIGNATION check_exact_type_for TO '(' EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ')' generate_for_quad DO '{' BLOCK '}' end_for\n    \n    DESCRIBE_STMT : ID '.' DESCRIBE '(' ')' \n    aritmetics_operation : \n    EXPRESSION : AND_EXP EXPRESSION_PRIME\n    \n    EXPRESSION_PRIME : OR AND_EXP EXPRESSION_PRIME\n                     | empty\n    \n    AND_EXP : B_EXP AND_EXP_PRIME\n    \n    AND_EXP_PRIME : AND B_EXP AND_EXP_PRIME\n                  | empty\n    \n    B_EXP : TRUE\n          | FALSE\n          | EXP B_EXP_PRIME\n    \n    B_EXP_PRIME : '>' add_operator B_EXP aritmetics_operation\n                | '<' add_operator B_EXP aritmetics_operation\n                | DIFFERENT add_operator B_EXP aritmetics_operation\n                | EQUAL add_operator B_EXP aritmetics_operation\n                | empty\n    \n    EXP : TERM EXP_PRIME\n    \n    EXP_PRIME : '+' add_operator TERM EXP_PRIME aritmetics_operation\n              | '-' add_operator TERM EXP_PRIME aritmetics_operation\n              | empty\n    \n    TERM : FACTOR TERM_PRIME\n    \n    TERM_PRIME : '*' add_operator FACTOR aritmetics_operation TERM_PRIME \n                  | '/' add_operator FACTOR aritmetics_operation TERM_PRIME \n                  | empty\n    \n    FACTOR : '(' EXPRESSION ')'\n              | '*' VAR_CT\n              | '/' VAR_CT\n              | VAR_CT\n    \n    VAR_CT : ID add_operand\n           | I_CONST add_operand\n           | F_CONST add_operand\n           | C_CONST add_operand\n           | FUNC_CALL\n    empty :"
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([1,157,185,],[0,-3,-1,]),'ID':([2,3,10,11,17,18,19,20,21,22,23,28,29,32,33,34,37,38,41,42,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,126,127,130,131,132,133,135,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,168,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,255,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-16,4,-124,-11,-10,30,31,-30,-16,-16,-16,-31,-16,-27,-28,-29,43,44,49,-5,71,-52,-124,-124,-99,-100,-124,-124,-124,49,49,-118,49,-52,-52,-52,-123,101,-124,-7,-7,-119,-93,49,-95,-96,49,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,122,-18,-19,49,-20,-124,-124,49,49,49,49,49,49,49,49,-115,122,-43,-44,-47,-48,-49,-50,164,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,49,49,-45,-46,-51,49,-80,192,-102,-103,-104,-105,-92,-92,-124,-124,49,-51,49,49,-21,-108,-109,-112,-113,49,-55,49,49,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,49,-72,-124,122,-62,122,-72,264,122,122,-74,49,-124,-73,-81,-78,-77,122,-75,-83,-78,122,-84,-89,-90,-76,-82,]),';':([4,5,30,31,39,40,45,47,48,49,51,52,53,54,55,56,57,60,62,63,64,65,71,73,74,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,106,110,111,120,122,127,128,129,141,143,144,145,146,147,148,149,150,151,152,172,173,174,175,176,177,178,179,180,181,196,197,198,199,204,205,231,238,247,250,279,],[-6,6,-6,-6,-124,-124,70,-23,72,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-6,-119,109,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,-17,-124,-124,-115,-52,-123,160,161,-124,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-22,195,-102,-103,-104,-105,-92,-92,-124,-124,-108,-109,-112,-113,219,-123,-61,-68,-62,-67,286,]),'VAR':([6,7,8,10,42,67,70,72,105,107,109,195,230,245,],[-2,-9,12,12,-5,12,-7,-7,-18,-19,-20,-21,12,12,]),'FUNC':([6,7,8,9,10,11,14,17,25,41,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,266,270,273,274,276,277,281,283,284,287,288,289,290,293,294,295,296,298,299,300,301,],[-2,-9,-124,16,-124,-11,16,-10,16,66,-5,-52,-124,-124,-99,-100,-124,-124,-124,66,66,-118,66,-52,-52,-52,-123,-124,-7,-7,-119,-93,66,-95,-96,66,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,66,-18,-19,66,-20,-124,-124,66,66,66,66,66,66,66,66,-115,66,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,66,66,-45,-46,-51,66,-80,-102,-103,-104,-105,-92,-92,-124,-124,66,-51,66,66,-21,-108,-109,-112,-113,66,-55,66,66,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,66,-72,-124,66,-62,66,-72,66,66,-4,-74,66,-35,-124,-73,-81,-78,-77,66,-75,-83,-78,66,-84,-4,-89,-34,-90,-76,-82,]),'VOID':([6,7,8,9,10,11,13,14,15,16,17,25,26,27,36,70,72,105,107,109,195,266,274,295,298,],[-2,-9,-124,-124,-124,-11,24,-124,-13,29,-10,-124,-12,-15,-14,-7,-7,-18,-19,-20,-21,-4,-35,-4,-34,]),'FOR':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,67,70,72,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,102,105,107,109,110,111,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,160,161,174,175,176,177,178,179,180,181,195,196,197,198,199,205,217,219,220,221,230,231,234,235,236,240,245,246,247,253,254,256,263,270,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,-5,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,135,-18,-19,-20,-124,-124,-115,135,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-45,-46,-102,-103,-104,-105,-92,-92,-124,-124,-21,-108,-109,-112,-113,-55,-91,-53,-53,-54,-124,-61,-56,-58,-57,-72,-124,135,-62,135,-72,135,135,-74,-124,-73,-81,-78,-77,135,-75,-83,-78,135,-84,-89,-90,-76,-82,]),'PRINT':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,67,70,72,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,102,105,107,109,110,111,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,160,161,174,175,176,177,178,179,180,181,195,196,197,198,199,205,217,219,220,221,230,231,234,235,236,240,245,246,247,253,254,256,263,270,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,-5,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,136,-18,-19,-20,-124,-124,-115,136,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-45,-46,-102,-103,-104,-105,-92,-92,-124,-124,-21,-108,-109,-112,-113,-55,-91,-53,-53,-54,-124,-61,-56,-58,-57,-72,-124,136,-62,136,-72,136,136,-74,-124,-73,-81,-78,-77,136,-75,-83,-78,136,-84,-89,-90,-76,-82,]),'IF':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,67,70,72,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,102,105,107,109,110,111,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,160,161,174,175,176,177,178,179,180,181,195,196,197,198,199,205,217,219,220,221,230,231,234,235,236,240,245,246,247,253,254,256,263,270,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,-5,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,137,-18,-19,-20,-124,-124,-115,137,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-45,-46,-102,-103,-104,-105,-92,-92,-124,-124,-21,-108,-109,-112,-113,-55,-91,-53,-53,-54,-124,-61,-56,-58,-57,-72,-124,137,-62,137,-72,137,137,-74,-124,-73,-81,-78,-77,137,-75,-83,-78,137,-84,-89,-90,-76,-82,]),'WHILE':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,67,70,72,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,102,105,107,109,110,111,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,160,161,174,175,176,177,178,179,180,181,195,196,197,198,199,205,217,219,220,221,230,231,234,235,236,240,245,246,247,253,254,256,263,270,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,-5,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,138,-18,-19,-20,-124,-124,-115,138,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-45,-46,-102,-103,-104,-105,-92,-92,-124,-124,-21,-108,-109,-112,-113,-55,-91,-53,-53,-54,-124,-61,-56,-58,-57,-72,-124,138,-62,138,-72,138,138,-74,-124,-73,-81,-78,-77,138,-75,-83,-78,138,-84,-89,-90,-76,-82,]),'TRUE':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,90,91,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,53,-5,-52,-124,-124,-99,-100,-124,-124,-124,53,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,53,-95,-96,53,-98,-101,-51,-51,-51,-51,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,53,-18,-19,53,-20,-124,-124,53,53,53,53,-115,53,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,53,53,-45,-46,-51,53,-80,-102,-103,-104,-105,-92,-92,-124,-124,53,-51,53,53,-21,-108,-109,-112,-113,53,-55,53,53,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,53,-72,-124,53,-62,53,-72,53,53,-74,53,-124,-73,-81,-78,-77,53,-75,-83,-78,53,-84,-89,-90,-76,-82,]),'FALSE':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,90,91,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,54,-5,-52,-124,-124,-99,-100,-124,-124,-124,54,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,54,-95,-96,54,-98,-101,-51,-51,-51,-51,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,54,-18,-19,54,-20,-124,-124,54,54,54,54,-115,54,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,54,54,-45,-46,-51,54,-80,-102,-103,-104,-105,-92,-92,-124,-124,54,-51,54,54,-21,-108,-109,-112,-113,54,-55,54,54,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,54,-72,-124,54,-62,54,-72,54,54,-74,54,-124,-73,-81,-78,-77,54,-75,-83,-78,54,-84,-89,-90,-76,-82,]),'(':([10,11,17,41,42,43,44,49,51,52,53,54,55,56,57,58,60,62,63,64,65,67,68,69,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,126,127,130,131,132,133,136,137,138,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,165,166,167,174,175,176,177,178,179,180,181,183,186,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,58,-5,-6,-6,-52,-124,-124,-99,-100,-124,-124,-124,58,-118,-52,-52,-52,-123,-124,-9,-9,-7,-7,-119,-93,58,-95,-96,58,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,-59,58,139,140,-18,-19,58,-20,-124,-124,58,58,58,58,58,58,58,58,-115,153,58,-43,-44,-47,-48,-49,-50,-51,166,167,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,58,58,-45,-46,-51,189,58,-80,-102,-103,-104,-105,-92,-92,-124,-124,201,203,58,-51,58,58,-21,-108,-109,-112,-113,58,-55,58,58,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,58,-72,-124,58,-62,58,-72,58,58,-74,58,-124,-73,-81,-78,-77,58,-75,-83,-78,58,-84,-89,-90,-76,-82,]),'*':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,59,-5,-52,-124,-124,-99,-100,-124,-124,92,59,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,59,-95,-96,59,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,59,-18,-19,59,-20,-124,-124,59,59,59,59,59,59,59,59,-115,-52,59,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,59,59,-45,-46,-51,59,-80,-102,-103,-104,-105,-92,-92,92,92,59,-51,59,59,-21,-108,-109,-112,-113,59,-55,59,59,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,59,-72,-124,59,-62,59,-72,59,59,-74,59,-124,-73,-81,-78,-77,59,-75,-83,-78,59,-84,-89,-90,-76,-82,]),'/':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,61,-5,-52,-124,-124,-99,-100,-124,-124,93,61,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,61,-95,-96,61,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,61,-18,-19,61,-20,-124,-124,61,61,61,61,61,61,61,61,-115,-52,61,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,61,61,-45,-46,-51,61,-80,-102,-103,-104,-105,-92,-92,93,93,61,-51,61,61,-21,-108,-109,-112,-113,61,-55,61,61,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,61,-72,-124,61,-62,61,-72,61,61,-74,61,-124,-73,-81,-78,-77,61,-75,-83,-78,61,-84,-89,-90,-76,-82,]),'I_CONST':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,62,-5,-52,-124,-124,-99,-100,-124,-124,-124,62,62,-118,62,-52,-52,-52,-123,-124,-7,-7,-119,-93,62,-95,-96,62,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,62,-18,-19,62,-20,-124,-124,62,62,62,62,62,62,62,62,-115,62,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,62,62,-45,-46,-51,62,-80,-102,-103,-104,-105,-92,-92,-124,-124,62,-51,62,62,-21,-108,-109,-112,-113,62,-55,62,62,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,62,-72,-124,62,-62,62,-72,62,62,-74,62,-124,-73,-81,-78,-77,62,-75,-83,-78,62,-84,-89,-90,-76,-82,]),'F_CONST':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,63,-5,-52,-124,-124,-99,-100,-124,-124,-124,63,63,-118,63,-52,-52,-52,-123,-124,-7,-7,-119,-93,63,-95,-96,63,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,63,-18,-19,63,-20,-124,-124,63,63,63,63,63,63,63,63,-115,63,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,63,63,-45,-46,-51,63,-80,-102,-103,-104,-105,-92,-92,-124,-124,63,-51,63,63,-21,-108,-109,-112,-113,63,-55,63,63,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,63,-72,-124,63,-62,63,-72,63,63,-74,63,-124,-73,-81,-78,-77,63,-75,-83,-78,63,-84,-89,-90,-76,-82,]),'C_CONST':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,153,156,160,161,162,166,167,174,175,176,177,178,179,180,181,187,188,189,191,195,196,197,198,199,203,205,206,215,217,219,220,221,224,230,231,234,235,236,239,240,245,246,247,253,254,256,263,270,273,276,277,281,283,284,287,288,289,290,293,294,296,299,300,301,],[-124,-11,-10,64,-5,-52,-124,-124,-99,-100,-124,-124,-124,64,64,-118,64,-52,-52,-52,-123,-124,-7,-7,-119,-93,64,-95,-96,64,-98,-101,-51,-51,-51,-51,-106,-107,-51,-51,-110,-111,-51,-51,-114,-116,-117,-120,-121,-122,64,-18,-19,64,-20,-124,-124,64,64,64,64,64,64,64,64,-115,64,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,64,64,-45,-46,-51,64,-80,-102,-103,-104,-105,-92,-92,-124,-124,64,-51,64,64,-21,-108,-109,-112,-113,64,-55,64,64,-91,-53,-53,-54,-66,-124,-61,-56,-58,-57,64,-72,-124,64,-62,64,-72,64,64,-74,64,-124,-73,-81,-78,-77,64,-75,-83,-78,64,-84,-89,-90,-76,-82,]),'}':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,67,70,72,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,102,105,107,109,110,111,120,123,124,125,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,158,160,161,174,175,176,177,178,179,180,181,195,196,197,198,199,205,217,219,220,221,230,231,234,235,236,240,246,247,253,254,257,262,263,270,271,276,277,281,283,284,286,287,288,289,290,291,292,293,294,296,297,299,300,301,],[-124,-11,-10,-5,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-124,-7,-7,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,-124,-18,-19,-20,-124,-124,-115,157,-124,-42,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-41,-45,-46,-102,-103,-104,-105,-92,-92,-124,-124,-21,-108,-109,-112,-113,-55,-91,-53,-53,-54,-124,-61,-56,-58,-57,-72,-124,-62,-124,-72,266,270,-124,-74,277,-124,-73,-81,-78,-77,-33,-124,-75,-83,-78,295,296,-124,-84,-89,300,-90,-76,-82,]),'RETURN':([10,11,17,49,51,52,53,54,55,56,57,60,62,63,64,65,70,72,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,105,107,109,110,111,120,124,125,126,127,130,131,132,133,143,144,145,146,147,148,149,150,151,152,158,160,161,174,175,176,177,178,179,180,181,195,196,197,198,199,205,217,219,220,221,231,234,235,236,245,247,256,265,270,276,277,281,283,284,289,290,294,296,299,300,301,],[-124,-11,-10,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-7,-7,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,-18,-19,-20,-124,-124,-115,-124,-42,-43,-44,-47,-48,-49,-50,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-41,-45,-46,-102,-103,-104,-105,-92,-92,-124,-124,-21,-108,-109,-112,-113,-55,-91,-53,-53,-54,-61,-56,-58,-57,-124,-62,-124,273,-74,-124,-73,-81,-78,-77,-83,-78,-84,-89,-90,-76,-82,]),'DATAFRAME':([12,],[20,]),'INT':([12,16,139,140,243,],[21,21,21,21,21,]),'FLOAT':([12,16,139,140,243,],[22,22,22,22,22,]),'CHAR':([12,16,139,140,243,],[23,23,23,23,23,]),'MAIN':([24,],[35,]),',':([30,31,39,40,49,51,52,53,54,55,56,57,60,62,63,64,65,71,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,106,110,111,120,141,143,144,145,146,147,148,149,150,151,152,174,175,176,177,178,179,180,181,182,192,196,197,198,199,200,207,208,211,222,228,231,232,247,248,251,252,260,261,264,272,278,],[-6,-6,46,46,-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-6,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,-17,-124,-124,-115,46,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-102,-103,-104,-105,-92,-92,-124,-124,-60,-6,-108,-109,-112,-113,215,-65,224,-8,224,243,-61,-60,-62,215,-65,-65,224,224,-6,-8,243,]),'[':([31,74,122,164,],[41,108,156,156,]),'{':([35,212,213,226,229,241,280,282,],[42,-32,230,240,245,254,287,288,]),'+':([49,56,57,60,62,63,64,65,73,91,94,96,97,98,99,100,120,122,127,149,150,151,152,180,181,198,199,205,231,247,],[-52,88,-124,-118,-52,-52,-52,-123,-119,-111,-114,-116,-117,-120,-121,-122,-115,-52,-123,88,88,-92,-92,-124,-124,-112,-113,-123,-61,-62,]),'-':([49,56,57,60,62,63,64,65,73,91,94,96,97,98,99,100,120,122,127,149,150,151,152,180,181,198,199,205,231,247,],[-52,89,-124,-118,-52,-52,-52,-123,-119,-111,-114,-116,-117,-120,-121,-122,-115,-52,-123,89,89,-92,-92,-124,-124,-112,-113,-123,-61,-62,]),'>':([49,55,56,57,60,62,63,64,65,73,87,90,91,94,96,97,98,99,100,120,122,127,149,150,151,152,178,179,180,181,196,197,198,199,205,231,247,],[-52,82,-124,-124,-118,-52,-52,-52,-123,-119,-107,-110,-111,-114,-116,-117,-120,-121,-122,-115,-52,-123,-124,-124,-92,-92,-92,-92,-124,-124,-108,-109,-112,-113,-123,-61,-62,]),'<':([49,55,56,57,60,62,63,64,65,73,87,90,91,94,96,97,98,99,100,120,122,127,149,150,151,152,178,179,180,181,196,197,198,199,205,231,247,],[-52,83,-124,-124,-118,-52,-52,-52,-123,-119,-107,-110,-111,-114,-116,-117,-120,-121,-122,-115,-52,-123,-124,-124,-92,-92,-92,-92,-124,-124,-108,-109,-112,-113,-123,-61,-62,]),'DIFFERENT':([49,55,56,57,60,62,63,64,65,73,87,90,91,94,96,97,98,99,100,120,122,127,149,150,151,152,178,179,180,181,196,197,198,199,205,231,247,],[-52,84,-124,-124,-118,-52,-52,-52,-123,-119,-107,-110,-111,-114,-116,-117,-120,-121,-122,-115,-52,-123,-124,-124,-92,-92,-92,-92,-124,-124,-108,-109,-112,-113,-123,-61,-62,]),'EQUAL':([49,55,56,57,60,62,63,64,65,73,87,90,91,94,96,97,98,99,100,120,122,127,149,150,151,152,178,179,180,181,196,197,198,199,205,231,247,],[-52,85,-124,-124,-118,-52,-52,-52,-123,-119,-107,-110,-111,-114,-116,-117,-120,-121,-122,-115,-52,-123,-124,-124,-92,-92,-92,-92,-124,-124,-108,-109,-112,-113,-123,-61,-62,]),'AND':([49,52,53,54,55,56,57,60,62,63,64,65,73,81,86,87,90,91,94,96,97,98,99,100,111,120,122,127,145,146,147,148,149,150,151,152,174,175,176,177,178,179,180,181,196,197,198,199,205,231,247,],[-52,79,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-119,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,79,-115,-52,-123,-92,-92,-92,-92,-124,-124,-92,-92,-102,-103,-104,-105,-92,-92,-124,-124,-108,-109,-112,-113,-123,-61,-62,]),'OR':([49,51,52,53,54,55,56,57,60,62,63,64,65,73,78,80,81,86,87,90,91,94,96,97,98,99,100,110,111,120,122,127,144,145,146,147,148,149,150,151,152,174,175,176,177,178,179,180,181,196,197,198,199,205,231,247,],[-52,76,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-119,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,76,-124,-115,-52,-123,-97,-92,-92,-92,-92,-124,-124,-92,-92,-102,-103,-104,-105,-92,-92,-124,-124,-108,-109,-112,-113,-123,-61,-62,]),']':([49,50,51,52,53,54,55,56,57,60,62,63,64,65,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,110,111,120,142,143,144,145,146,147,148,149,150,151,152,174,175,176,177,178,179,180,181,184,196,197,198,199,231,247,],[-52,74,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,-124,-124,-115,173,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-102,-103,-104,-105,-92,-92,-124,-124,202,-108,-109,-112,-113,-61,-62,]),')':([49,51,52,53,54,55,56,57,60,62,63,64,65,73,75,77,78,80,81,86,87,90,91,94,95,96,97,98,99,100,110,111,120,139,140,143,144,145,146,147,148,149,150,151,152,169,170,171,174,175,176,177,178,179,180,181,182,190,192,193,194,196,197,198,199,200,201,207,208,209,210,211,214,216,218,222,223,225,227,228,231,232,233,237,242,244,247,248,249,251,252,258,259,260,261,264,268,269,272,278,285,],[-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,120,-116,-117,-120,-121,-122,-124,-124,-115,-124,-124,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,-36,-38,-36,-102,-103,-104,-105,-92,-92,-124,-124,-60,-79,-6,212,213,-108,-109,-112,-113,-124,217,-65,-124,226,-79,-8,231,-64,-85,-124,238,-71,241,-124,-61,-60,-86,250,-37,-40,-62,-124,-88,-65,-65,-63,267,-124,-124,-6,-69,-70,-8,-124,-39,]),'TO':([49,51,52,53,54,55,56,57,60,62,63,64,65,73,75,77,78,80,81,86,87,90,91,94,96,97,98,99,100,110,111,120,126,143,144,145,146,147,148,149,150,151,152,159,174,175,176,177,178,179,180,181,196,197,198,199,205,219,220,221,231,234,235,236,247,],[-52,-124,-124,-99,-100,-124,-124,-124,-118,-52,-52,-52,-123,-119,-93,-95,-96,-98,-101,-106,-107,-110,-111,-114,-116,-117,-120,-121,-122,-124,-124,-115,-85,-94,-97,-92,-92,-92,-92,-124,-124,-92,-92,186,-102,-103,-104,-105,-92,-92,-124,-124,-108,-109,-112,-113,-55,-53,-53,-54,-61,-56,-58,-57,-62,]),'.':([122,],[154,]),'=':([122,134,155,163,164,202,],[-24,162,-25,188,-24,-26,]),'DESCRIBE':([154,],[183,]),'TITLE':([189,224,239,],[208,-66,252,]),'DO':([267,275,],[-87,280,]),'ELSE':([270,276,],[-74,282,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'add_type':([2,21,22,23,29,],[3,32,33,34,38,]),'add_id':([4,30,31,43,44,71,192,264,],[5,39,40,68,69,106,211,272,]),'go_to_main':([6,],[7,]),'save_function':([7,68,69,],[8,103,104,]),'VARS_PRIME':([8,10,67,230,245,],[9,17,102,246,256,]),'VARS':([8,10,67,230,245,],[10,10,10,10,10,]),'empty':([8,9,10,14,25,39,40,51,52,55,56,57,67,102,110,111,124,139,140,141,149,150,180,181,200,208,222,228,230,245,246,248,253,256,260,261,263,276,278,287,293,],[11,15,11,27,27,47,47,77,80,86,90,94,11,125,77,80,125,170,170,47,90,90,94,94,216,225,225,244,11,11,125,216,125,125,225,225,125,283,244,125,125,]),'FUNCTION_PRIME':([9,],[13,]),'FUNCTION':([9,14,25,],[14,25,25,]),'TIPO_COMP':([12,],[18,]),'TIPO_SIMPLE':([12,16,139,140,243,],[19,28,168,168,255,]),'FUNC_PRIME':([14,25,],[26,36,]),'add_function_type':([28,],[37,]),'TIPO_PRIME':([39,40,141,],[45,48,172,]),'EXPRESSION':([41,58,102,108,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[50,95,128,142,128,182,184,190,204,207,210,218,221,232,251,128,128,128,128,279,128,128,]),'AND_EXP':([41,58,76,102,108,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[51,51,110,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'B_EXP':([41,58,76,79,102,108,112,113,114,115,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[52,52,52,111,52,52,145,146,147,148,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'EXP':([41,58,76,79,102,108,112,113,114,115,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'TERM':([41,58,76,79,102,108,112,113,114,115,116,117,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[56,56,56,56,56,56,56,56,56,56,149,150,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FACTOR':([41,58,76,79,102,108,112,113,114,115,116,117,118,119,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[57,57,57,57,57,57,57,57,57,57,57,57,151,152,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'VAR_CT':([41,58,59,61,76,79,102,108,112,113,114,115,116,117,118,119,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[60,60,96,97,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'FUNC_CALL':([41,58,59,61,76,79,102,108,112,113,114,115,116,117,118,119,124,153,156,166,187,189,191,203,206,215,239,246,253,256,263,273,287,293,],[65,65,65,65,65,65,127,65,65,65,65,65,65,65,65,65,127,65,65,65,205,65,65,65,65,65,65,127,127,127,127,65,127,127,]),'fill_go_to_main_quad':([42,],[67,]),'add_operand':([49,62,63,64,122,],[73,98,99,100,73,]),'EXPRESSION_PRIME':([51,110,],[75,143,]),'AND_EXP_PRIME':([52,111,],[78,144,]),'B_EXP_PRIME':([55,],[81,]),'EXP_PRIME':([56,149,150,],[87,178,179,]),'TERM_PRIME':([57,180,181,],[91,198,199,]),'save_ids':([70,72,],[105,107,]),'add_operator':([82,83,84,85,88,89,92,93,136,162,188,],[112,113,114,115,116,117,118,119,165,187,206,]),'era_quad':([101,],[121,]),'BLOCK':([102,124,246,253,256,263,287,293,],[123,158,257,262,265,271,292,297,]),'STATEMENT':([102,124,246,253,256,263,287,293,],[124,124,124,124,124,124,124,124,]),'ASSIGNATION':([102,124,246,253,256,263,287,293,],[126,126,126,126,126,126,126,126,]),'WRITE':([102,124,246,253,256,263,287,293,],[129,129,129,129,129,129,129,129,]),'CONDITION':([102,124,246,253,256,263,287,293,],[130,130,130,130,130,130,130,130,]),'WHILE_STMT':([102,124,246,253,256,263,287,293,],[131,131,131,131,131,131,131,131,]),'FOR_STMT':([102,124,246,253,256,263,287,293,],[132,132,132,132,132,132,132,132,]),'DESCRIBE_STMT':([102,124,246,253,256,263,287,293,],[133,133,133,133,133,133,133,133,]),'VARIABLE':([102,124,135,246,253,256,263,287,293,],[134,134,163,134,134,134,134,134,134,]),'add_current_type':([106,],[141,]),'get_variable':([122,164,],[155,155,]),'check_exact_type_for':([126,218,],[159,233,]),'PARAM':([139,140,],[169,171,]),'aritmetics_operation':([145,146,147,148,151,152,178,179,],[174,175,176,177,180,181,196,197,]),'empty_global_variables_table':([157,],[185,]),'append_jump':([167,],[191,]),'add_parameters':([169,171,],[193,194,]),'param_quad':([182,232,],[200,248,]),'pop_type':([190,210,],[209,227,]),'FUNC_CALL_PRIME':([200,248,],[214,258,]),'functions_assignation':([205,],[220,]),'print_quad':([207,251,252,],[222,260,261,]),'WRITE_PRIME':([208,222,260,261,],[223,237,268,269,]),'save_parameter':([211,272,],[228,278,]),'save_function_as_variable':([212,],[229,]),'add_assignation_quad':([219,220,],[234,235,]),'add_assignation_for_quad':([221,],[236,]),'add_print_operator':([224,],[239,]),'PARAM_PRIME':([228,278,],[242,285,]),'go_sub_quad':([231,],[247,]),'add_final_counter_for':([233,],[249,]),'go_to_false_quad':([240,254,],[253,263,]),'check_boolean_expression_for':([249,],[259,]),'empty_local_variables_table':([266,295,],[274,298,]),'generate_for_quad':([267,],[275,]),'fill_go_to_false_quad_if':([270,],[276,]),'ELSE_STMT':([276,],[281,]),'fill_go_to_false_quad':([277,],[284,]),'pop_operand':([283,290,],[289,294,]),'go_to_quad':([284,],[290,]),'return_quad':([286,],[291,]),'go_to_true_quad':([288,],[293,]),'end_for':([296,],[299,]),'fill_go_to_true_quad':([300,],[301,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table','PROGRAM',17,'p_PROGRAM','parser.py',9),
  ('go_to_main -> <empty>','go_to_main',0,'p_go_to_main','parser.py',14),
  ('empty_global_variables_table -> <empty>','empty_global_variables_table',0,'p_empty_global_variables_table','parser.py',18),
  ('empty_local_variables_table -> <empty>','empty_local_variables_table',0,'p_empty_local_variables_table','parser.py',22),
  ('fill_go_to_main_quad -> <empty>','fill_go_to_main_quad',0,'p_fill_go_to_main_quad','parser.py',26),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',30),
  ('save_ids -> <empty>','save_ids',0,'p_save_ids','parser.py',34),
  ('save_parameter -> <empty>','save_parameter',0,'p_save_parameter','parser.py',38),
  ('save_function -> <empty>','save_function',0,'p_save_function','parser.py',42),
  ('VARS_PRIME -> VARS VARS_PRIME','VARS_PRIME',2,'p_VARS_PRIME','parser.py',47),
  ('VARS_PRIME -> empty','VARS_PRIME',1,'p_VARS_PRIME','parser.py',48),
  ('FUNCTION_PRIME -> FUNCTION FUNC_PRIME','FUNCTION_PRIME',2,'p_FUNCTION_PRIME','parser.py',54),
  ('FUNCTION_PRIME -> empty','FUNCTION_PRIME',1,'p_FUNCTION_PRIME','parser.py',55),
  ('FUNC_PRIME -> FUNCTION FUNC_PRIME','FUNC_PRIME',2,'p_FUNC','parser.py',61),
  ('FUNC_PRIME -> empty','FUNC_PRIME',1,'p_FUNC','parser.py',62),
  ('add_type -> <empty>','add_type',0,'p_add_type','parser.py',67),
  ('add_current_type -> <empty>','add_current_type',0,'p_add_current_type','parser.py',71),
  ('VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',76),
  ('VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',77),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ;','VARS',7,'p_VARS','parser.py',78),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;','VARS',10,'p_VARS','parser.py',79),
  ('TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME','TIPO_PRIME',5,'p_TIPO_PRIME','parser.py',85),
  ('TIPO_PRIME -> empty','TIPO_PRIME',1,'p_TIPO_PRIME','parser.py',86),
  ('get_variable -> <empty>','get_variable',0,'p_get_variable','parser.py',91),
  ('VARIABLE -> ID get_variable','VARIABLE',2,'p_VARIABLE','parser.py',96),
  ('VARIABLE -> ID [ EXPRESSION ]','VARIABLE',4,'p_VARIABLE','parser.py',97),
  ('TIPO_SIMPLE -> INT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',103),
  ('TIPO_SIMPLE -> FLOAT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',104),
  ('TIPO_SIMPLE -> CHAR add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',105),
  ('TIPO_COMP -> DATAFRAME','TIPO_COMP',1,'p_TIPO_COMP','parser.py',111),
  ('add_function_type -> <empty>','add_function_type',0,'p_add_function_type','parser.py',116),
  ('save_function_as_variable -> <empty>','save_function_as_variable',0,'p_save_function_as_variable','parser.py',120),
  ('return_quad -> <empty>','return_quad',0,'p_return_quad','parser.py',124),
  ('FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table','FUNCTION',20,'p_FUNCTION','parser.py',129),
  ('FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table','FUNCTION',15,'p_FUNCTION','parser.py',130),
  ('add_parameters -> <empty>','add_parameters',0,'p_add_parameters','parser.py',135),
  ('PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME','PARAM',5,'p_PARAM','parser.py',140),
  ('PARAM -> empty','PARAM',1,'p_PARAM','parser.py',141),
  ('PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME','PARAM_PRIME',6,'p_PARAM_PRIME','parser.py',147),
  ('PARAM_PRIME -> empty','PARAM_PRIME',1,'p_PARAM_PRIME','parser.py',148),
  ('BLOCK -> STATEMENT BLOCK','BLOCK',2,'p_BLOCK','parser.py',154),
  ('BLOCK -> empty','BLOCK',1,'p_BLOCK','parser.py',155),
  ('STATEMENT -> ASSIGNATION','STATEMENT',1,'p_STATEMENT','parser.py',161),
  ('STATEMENT -> FUNC_CALL','STATEMENT',1,'p_STATEMENT','parser.py',162),
  ('STATEMENT -> EXPRESSION ;','STATEMENT',2,'p_STATEMENT','parser.py',163),
  ('STATEMENT -> WRITE ;','STATEMENT',2,'p_STATEMENT','parser.py',164),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',165),
  ('STATEMENT -> WHILE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',166),
  ('STATEMENT -> FOR_STMT','STATEMENT',1,'p_STATEMENT','parser.py',167),
  ('STATEMENT -> DESCRIBE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',168),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','parser.py',173),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','parser.py',177),
  ('add_assignation_quad -> <empty>','add_assignation_quad',0,'p_add_assignation_quad','parser.py',181),
  ('add_assignation_for_quad -> <empty>','add_assignation_for_quad',0,'p_add_assignation_for_quad','parser.py',185),
  ('functions_assignation -> <empty>','functions_assignation',0,'p_functions_assignation','parser.py',189),
  ('ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',194),
  ('ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',195),
  ('ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',196),
  ('era_quad -> <empty>','era_quad',0,'p_era_quad','parser.py',201),
  ('param_quad -> <empty>','param_quad',0,'p_param_quad','parser.py',205),
  ('go_sub_quad -> <empty>','go_sub_quad',0,'p_go_sub_quad','parser.py',209),
  ('FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad','FUNC_CALL',9,'p_FUNC_CALL','parser.py',214),
  ('FUNC_CALL_PRIME -> , EXPRESSION param_quad FUNC_CALL_PRIME','FUNC_CALL_PRIME',4,'p_FUNC_CALL_PRIME','parser.py',220),
  ('FUNC_CALL_PRIME -> empty','FUNC_CALL_PRIME',1,'p_FUNC_CALL_PRIME','parser.py',221),
  ('print_quad -> <empty>','print_quad',0,'p_print_quad','parser.py',226),
  ('add_print_operator -> <empty>','add_print_operator',0,'p_add_print_operator','parser.py',230),
  ('WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )','WRITE',7,'p_WRITE','parser.py',235),
  ('WRITE -> PRINT add_operator ( TITLE WRITE_PRIME )','WRITE',6,'p_WRITE','parser.py',236),
  ('WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME','WRITE_PRIME',5,'p_WRITE_PRIME','parser.py',242),
  ('WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME','WRITE_PRIME',5,'p_WRITE_PRIME','parser.py',243),
  ('WRITE_PRIME -> empty','WRITE_PRIME',1,'p_WRITE_PRIME','parser.py',244),
  ('go_to_false_quad -> <empty>','go_to_false_quad',0,'p_go_to_false_quad','parser.py',249),
  ('fill_go_to_false_quad -> <empty>','fill_go_to_false_quad',0,'p_fill_go_to_false_quad','parser.py',253),
  ('fill_go_to_false_quad_if -> <empty>','fill_go_to_false_quad_if',0,'p_fill_go_to_false_quad_if','parser.py',257),
  ('go_to_true_quad -> <empty>','go_to_true_quad',0,'p_go_to_true_quad','parser.py',261),
  ('fill_go_to_true_quad -> <empty>','fill_go_to_true_quad',0,'p_fill_go_to_true_quad','parser.py',265),
  ('go_to_quad -> <empty>','go_to_quad',0,'p_go_to_quad','parser.py',269),
  ('pop_operand -> <empty>','pop_operand',0,'p_pop_operand','parser.py',273),
  ('pop_type -> <empty>','pop_type',0,'p_pop_type','parser.py',277),
  ('append_jump -> <empty>','append_jump',0,'p_append_jump','parser.py',281),
  ('CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT','CONDITION',11,'p_CONDITION','parser.py',286),
  ('ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad','ELSE_STMT',6,'p_ELSE_STMT','parser.py',292),
  ('ELSE_STMT -> empty pop_operand','ELSE_STMT',2,'p_ELSE_STMT','parser.py',293),
  ('WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand','WHILE_STMT',13,'p_WHILE_STMT','parser.py',299),
  ('check_exact_type_for -> <empty>','check_exact_type_for',0,'p_check_exact_type_for','parser.py',304),
  ('add_final_counter_for -> <empty>','add_final_counter_for',0,'p_add_final_counter_for','parser.py',308),
  ('generate_for_quad -> <empty>','generate_for_quad',0,'p_generate_for_quad','parser.py',312),
  ('check_boolean_expression_for -> <empty>','check_boolean_expression_for',0,'p_check_boolean_expression_for','parser.py',316),
  ('end_for -> <empty>','end_for',0,'p_end_for','parser.py',320),
  ('FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for','FOR_STMT',15,'p_FOR_STMT','parser.py',325),
  ('DESCRIBE_STMT -> ID . DESCRIBE ( )','DESCRIBE_STMT',5,'p_DESCRIBE_STMT','parser.py',331),
  ('aritmetics_operation -> <empty>','aritmetics_operation',0,'p_aritmetics_operation','parser.py',336),
  ('EXPRESSION -> AND_EXP EXPRESSION_PRIME','EXPRESSION',2,'p_EXPRESSION','parser.py',341),
  ('EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME','EXPRESSION_PRIME',3,'p_EXPRESSION_PRIME','parser.py',347),
  ('EXPRESSION_PRIME -> empty','EXPRESSION_PRIME',1,'p_EXPRESSION_PRIME','parser.py',348),
  ('AND_EXP -> B_EXP AND_EXP_PRIME','AND_EXP',2,'p_AND_EXP','parser.py',354),
  ('AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME','AND_EXP_PRIME',3,'p_AND_EXP_PRIME','parser.py',360),
  ('AND_EXP_PRIME -> empty','AND_EXP_PRIME',1,'p_AND_EXP_PRIME','parser.py',361),
  ('B_EXP -> TRUE','B_EXP',1,'p_B_EXP','parser.py',367),
  ('B_EXP -> FALSE','B_EXP',1,'p_B_EXP','parser.py',368),
  ('B_EXP -> EXP B_EXP_PRIME','B_EXP',2,'p_B_EXP','parser.py',369),
  ('B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',375),
  ('B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',376),
  ('B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',377),
  ('B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',378),
  ('B_EXP_PRIME -> empty','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',379),
  ('EXP -> TERM EXP_PRIME','EXP',2,'p_EXP','parser.py',385),
  ('EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation','EXP_PRIME',5,'p_EXP_PRIME','parser.py',391),
  ('EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation','EXP_PRIME',5,'p_EXP_PRIME','parser.py',392),
  ('EXP_PRIME -> empty','EXP_PRIME',1,'p_EXP_PRIME','parser.py',393),
  ('TERM -> FACTOR TERM_PRIME','TERM',2,'p_TERM','parser.py',399),
  ('TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME','TERM_PRIME',5,'p_TERM_PRIME','parser.py',405),
  ('TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME','TERM_PRIME',5,'p_TERM_PRIME','parser.py',406),
  ('TERM_PRIME -> empty','TERM_PRIME',1,'p_TERM_PRIME','parser.py',407),
  ('FACTOR -> ( EXPRESSION )','FACTOR',3,'p_FACTOR','parser.py',413),
  ('FACTOR -> * VAR_CT','FACTOR',2,'p_FACTOR','parser.py',414),
  ('FACTOR -> / VAR_CT','FACTOR',2,'p_FACTOR','parser.py',415),
  ('FACTOR -> VAR_CT','FACTOR',1,'p_FACTOR','parser.py',416),
  ('VAR_CT -> ID add_operand','VAR_CT',2,'p_VAR_CT','parser.py',422),
  ('VAR_CT -> I_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',423),
  ('VAR_CT -> F_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',424),
  ('VAR_CT -> C_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',425),
  ('VAR_CT -> FUNC_CALL','VAR_CT',1,'p_VAR_CT','parser.py',426),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',435),
]
