
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND CHAR C_CONST DATAFRAME DESCRIBE DIFFERENT DO ELSE EQUAL FALSE FLOAT FOR FUNC F_CONST ID IF INT I_CONST MAIN OR PRINT PROG RETURN TITLE TO TRUE VAR VOID WHILE\n    PROGRAM : PROG add_type ID add_id ';' save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN '{' VARS_PRIME BLOCK '}'\n    add_id : save_ids : \n    VARS_PRIME : VARS VARS_PRIME\n               | empty\n    \n    FUNCTION_PRIME : FUNCTION FUNC_PRIME\n                   | empty\n    \n    FUNC_PRIME : FUNCTION FUNC_PRIME\n         | empty\n    add_type : add_current_type : \n    VARS : VAR TIPO_COMP ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' ';'\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' '[' EXPRESSION ']' ';'\n    \n    TIPO_PRIME : ',' ID add_id add_current_type TIPO_PRIME\n               | empty\n    get_variable : \n    VARIABLE : ID get_variable\n             | ID '[' EXPRESSION ']'\n    \n    TIPO_SIMPLE : INT add_type\n                | FLOAT add_type\n                | CHAR add_type\n    \n    TIPO_COMP : DATAFRAME\n    \n    FUNCTION : FUNC TIPO_SIMPLE ID '(' PARAM ')' '{' VARS_PRIME BLOCK RETURN EXPRESSION '}'\n             | FUNC TIPO_SIMPLE ID '(' PARAM ')' '{' VARS_PRIME BLOCK RETURN VAR_CT '}'\n             | FUNC VOID ID '(' PARAM ')' '{' VARS_PRIME BLOCK '}'\n    \n    PARAM : TIPO_SIMPLE ID PARAM_PRIME\n          | empty\n    \n    PARAM_PRIME : ',' TIPO_SIMPLE ID PARAM_PRIME\n                | empty\n    \n    BLOCK : STATEMENT BLOCK\n          | empty\n    \n    STATEMENT : ASSIGNATION\n              | FUNC_CALL\n              | WRITE\n              | CONDITION\n              | WHILE_STMT\n              | FOR_STMT\n              | DESCRIBE_STMT\n    add_operator : add_operand : add_assignation_quad : \n    ASSIGNATION : VARIABLE '=' add_operator EXPRESSION ';' add_assignation_quad\n    \n    FUNC_CALL : ID '(' EXPRESSION FUNC_CALL_PRIME ')'\n    \n    FUNC_CALL_PRIME : EXPRESSION FUNC_CALL_PRIME\n                    | empty\n    \n    WRITE : PRINT '(' EXPRESSION WRITE_PRIME ')'\n               | PRINT '(' TITLE WRITE_PRIME ')'\n    \n    WRITE_PRIME : ',' EXPRESSION WRITE_PRIME\n                | ',' TITLE WRITE_PRIME\n                | empty\n    \n    CONDITION : IF '(' EXPRESSION ')' '{' BLOCK '}' ELSE_STMT\n    \n    ELSE_STMT : ELSE '{' BLOCK '}'\n              | empty\n    \n    WHILE_STMT : WHILE '(' EXPRESSION ')' '{' BLOCK '}'\n    \n    FOR_STMT : FOR ID '=' EXPRESSION TO EXPRESSION DO '{' BLOCK '}'\n    \n    DESCRIBE_STMT : ID '.' DESCRIBE '(' ')' \n    \n    EXPRESSION : AND_EXP EXPRESSION_PRIME\n    \n    EXPRESSION_PRIME : OR AND_EXP EXPRESSION_PRIME\n                     | empty\n    \n    AND_EXP : B_EXP AND_EXP_PRIME\n    \n    AND_EXP_PRIME : AND B_EXP AND_EXP_PRIME\n                  | empty\n    \n    B_EXP : TRUE\n          | FALSE\n          | EXP B_EXP_PRIME\n    \n    B_EXP_PRIME : '>' \n                | '<'\n                | DIFFERENT\n                | EQUAL\n                | empty\n    \n    EXP : TERM EXP_PRIME\n    \n    EXP_PRIME : '+' TERM EXP_PRIME\n              | '-' TERM EXP_PRIME\n              | empty\n    \n    TERM : FACTOR TERM_PRIME\n    \n    TERM_PRIME : '*' FACTOR TERM_PRIME\n                  | '/' FACTOR TERM_PRIME\n                  | empty\n    \n    FACTOR : '(' EXPRESSION ')'\n              | '*' VAR_CT\n              | '/' VAR_CT\n              | VAR_CT\n    \n    VAR_CT : ID\n           | I_CONST add_operand\n           | F_CONST add_operand\n           | C_CONST add_operand\n    empty :"
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([1,134,],[0,-1,]),'ID':([2,3,9,10,16,17,18,19,20,21,22,27,28,31,32,33,40,41,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,69,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,101,103,104,105,106,107,108,109,114,118,120,121,122,123,124,125,126,127,128,129,130,133,136,137,138,139,144,145,148,149,150,151,152,153,154,157,162,163,164,165,168,175,184,186,187,188,189,192,193,194,195,197,199,207,208,212,214,215,216,219,220,],[-10,4,-89,-5,-4,29,30,-24,-10,-10,-10,36,37,-21,-22,-23,48,-89,70,-85,-89,-89,-65,-66,-89,-89,-89,48,48,-84,48,-42,-42,-42,99,115,-3,-3,-59,48,-61,-62,48,-64,-67,-68,-69,-70,-71,-72,-73,48,48,-76,-77,48,48,-80,-82,-83,-86,-87,-88,99,-34,-35,-36,-37,-38,-39,-40,140,-12,-13,48,-14,-89,-89,-89,-89,-89,-89,-81,48,48,-41,48,48,48,-89,-89,-60,-63,-74,-75,-78,-79,48,48,48,181,99,99,48,48,-15,-45,-58,-43,-48,-49,99,99,48,48,-44,-89,-56,-53,-55,99,99,-57,-54,]),';':([4,5,29,30,38,39,44,46,47,48,50,51,52,53,54,55,56,59,61,62,63,70,72,73,75,76,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,119,123,124,125,126,127,128,129,146,148,149,150,151,152,153,166,167,173,],[-2,6,-2,-2,-89,-89,69,-17,71,-85,-89,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,-2,122,-59,-61,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,-11,-89,-89,-89,-89,-89,-89,-81,-89,-60,-63,-74,-75,-78,-79,-16,184,188,]),'VAR':([6,7,9,41,69,71,118,120,122,144,145,184,],[-3,11,11,11,-3,-3,-12,-13,-14,11,11,-15,]),'FUNC':([6,7,8,9,10,13,16,24,69,71,118,120,122,184,198,210,211,],[-3,-89,15,-89,-5,15,-4,15,-3,-3,-12,-13,-14,-15,-27,-25,-26,]),'VOID':([6,7,8,9,10,12,13,14,15,16,24,25,26,35,69,71,118,120,122,184,198,210,211,],[-3,-89,-89,-89,-5,23,-89,-7,28,-4,-89,-6,-9,-8,-3,-3,-12,-13,-14,-15,-27,-25,-26,]),'PRINT':([9,10,16,41,64,69,71,101,103,104,105,106,107,108,109,118,120,122,144,145,164,165,184,186,187,188,189,192,193,194,199,207,208,212,214,215,216,219,220,],[-89,-5,-4,-89,111,-3,-3,111,-34,-35,-36,-37,-38,-39,-40,-12,-13,-14,-89,-89,111,111,-15,-45,-58,-43,-48,-49,111,111,-44,-89,-56,-53,-55,111,111,-57,-54,]),'IF':([9,10,16,41,64,69,71,101,103,104,105,106,107,108,109,118,120,122,144,145,164,165,184,186,187,188,189,192,193,194,199,207,208,212,214,215,216,219,220,],[-89,-5,-4,-89,112,-3,-3,112,-34,-35,-36,-37,-38,-39,-40,-12,-13,-14,-89,-89,112,112,-15,-45,-58,-43,-48,-49,112,112,-44,-89,-56,-53,-55,112,112,-57,-54,]),'WHILE':([9,10,16,41,64,69,71,101,103,104,105,106,107,108,109,118,120,122,144,145,164,165,184,186,187,188,189,192,193,194,199,207,208,212,214,215,216,219,220,],[-89,-5,-4,-89,113,-3,-3,113,-34,-35,-36,-37,-38,-39,-40,-12,-13,-14,-89,-89,113,113,-15,-45,-58,-43,-48,-49,113,113,-44,-89,-56,-53,-55,113,113,-57,-54,]),'FOR':([9,10,16,41,64,69,71,101,103,104,105,106,107,108,109,118,120,122,144,145,164,165,184,186,187,188,189,192,193,194,199,207,208,212,214,215,216,219,220,],[-89,-5,-4,-89,114,-3,-3,114,-34,-35,-36,-37,-38,-39,-40,-12,-13,-14,-89,-89,114,114,-15,-45,-58,-43,-48,-49,114,114,-44,-89,-56,-53,-55,114,114,-57,-54,]),'}':([9,10,16,41,48,50,51,52,53,54,55,56,59,61,62,63,64,69,71,73,75,76,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,118,120,122,123,124,125,126,127,128,129,135,145,148,149,150,151,152,153,165,183,184,186,187,188,189,192,193,194,199,202,203,205,206,207,208,212,214,215,216,217,218,219,220,],[-89,-5,-4,-89,-85,-89,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,-89,-3,-3,-59,-61,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,134,-89,-33,-34,-35,-36,-37,-38,-39,-40,-12,-13,-14,-89,-89,-89,-89,-89,-89,-81,-32,-89,-60,-63,-74,-75,-78,-79,-89,198,-15,-45,-58,-43,-48,-49,-89,-89,-44,207,208,210,211,-89,-56,-53,-55,-89,-89,219,220,-57,-54,]),'RETURN':([9,10,16,69,71,101,102,103,104,105,106,107,108,109,118,120,122,135,144,164,182,184,186,187,188,189,192,199,207,208,212,214,219,220,],[-89,-5,-4,-3,-3,-89,-33,-34,-35,-36,-37,-38,-39,-40,-12,-13,-14,-32,-89,-89,197,-15,-45,-58,-43,-48,-49,-44,-89,-56,-53,-55,-57,-54,]),'DATAFRAME':([11,],[19,]),'INT':([11,15,42,43,142,],[20,20,20,20,20,]),'FLOAT':([11,15,42,43,142,],[21,21,21,21,21,]),'CHAR':([11,15,42,43,142,],[22,22,22,22,22,]),'MAIN':([23,],[34,]),',':([29,30,38,39,48,50,51,52,53,54,55,56,59,61,62,63,70,73,75,76,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,115,119,123,124,125,126,127,128,129,146,148,149,150,151,152,153,158,159,181,190,191,],[-2,-2,45,45,-85,-89,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,-2,-59,-61,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,142,-11,-89,-89,-89,-89,-89,-89,-81,45,-60,-63,-74,-75,-78,-79,175,175,142,175,175,]),'[':([30,72,99,],[40,121,133,]),'{':([34,116,117,178,179,209,213,],[41,144,145,193,194,215,216,]),'(':([36,37,40,48,50,51,52,53,54,55,56,57,59,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,111,112,113,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,155,157,162,168,175,195,197,],[42,43,57,-85,-89,-89,-65,-66,-89,-89,-89,57,-84,-42,-42,-42,-59,57,-61,-62,57,-64,-67,-68,-69,-70,-71,-72,-73,57,57,-76,-77,57,57,-80,-82,-83,-86,-87,-88,130,137,138,139,57,-89,-89,-89,-89,-89,-89,-81,57,57,-41,57,57,57,-60,-63,-74,-75,-78,-79,57,171,57,57,57,57,57,57,]),'TRUE':([40,48,50,51,52,53,54,55,56,57,59,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,157,162,168,175,195,197,],[52,-85,-89,-89,-65,-66,-89,-89,-89,52,-84,-42,-42,-42,-59,52,-61,-62,52,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,52,-89,-89,-89,-89,-89,-89,-81,52,52,-41,52,52,52,-60,-63,-74,-75,-78,-79,52,52,52,52,52,52,52,]),'FALSE':([40,48,50,51,52,53,54,55,56,57,59,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,157,162,168,175,195,197,],[53,-85,-89,-89,-65,-66,-89,-89,-89,53,-84,-42,-42,-42,-59,53,-61,-62,53,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,53,-89,-89,-89,-89,-89,-89,-81,53,53,-41,53,53,53,-60,-63,-74,-75,-78,-79,53,53,53,53,53,53,53,]),'*':([40,48,50,51,52,53,54,55,56,57,59,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,157,162,168,175,195,197,206,],[58,-85,-89,-89,-65,-66,-89,-89,90,58,-84,-42,-42,-42,-59,58,-61,-62,58,-64,-67,-68,-69,-70,-71,-72,-73,58,58,-76,-77,58,58,-80,-82,-83,-86,-87,-88,58,-89,-89,-89,-89,90,90,-81,58,58,-41,58,58,58,-60,-63,-74,-75,-78,-79,58,58,58,58,58,58,58,-84,]),'/':([40,48,50,51,52,53,54,55,56,57,59,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,157,162,168,175,195,197,206,],[60,-85,-89,-89,-65,-66,-89,-89,91,60,-84,-42,-42,-42,-59,60,-61,-62,60,-64,-67,-68,-69,-70,-71,-72,-73,60,60,-76,-77,60,60,-80,-82,-83,-86,-87,-88,60,-89,-89,-89,-89,91,91,-81,60,60,-41,60,60,60,-60,-63,-74,-75,-78,-79,60,60,60,60,60,60,60,-84,]),'I_CONST':([40,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,157,162,168,175,195,197,],[61,-85,-89,-89,-65,-66,-89,-89,-89,61,61,-84,61,-42,-42,-42,-59,61,-61,-62,61,-64,-67,-68,-69,-70,-71,-72,-73,61,61,-76,-77,61,61,-80,-82,-83,-86,-87,-88,61,-89,-89,-89,-89,-89,-89,-81,61,61,-41,61,61,61,-60,-63,-74,-75,-78,-79,61,61,61,61,61,61,61,]),'F_CONST':([40,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,157,162,168,175,195,197,],[62,-85,-89,-89,-65,-66,-89,-89,-89,62,62,-84,62,-42,-42,-42,-59,62,-61,-62,62,-64,-67,-68,-69,-70,-71,-72,-73,62,62,-76,-77,62,62,-80,-82,-83,-86,-87,-88,62,-89,-89,-89,-89,-89,-89,-81,62,62,-41,62,62,62,-60,-63,-74,-75,-78,-79,62,62,62,62,62,62,62,]),'C_CONST':([40,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,121,123,124,125,126,127,128,129,130,133,136,137,138,139,148,149,150,151,152,153,154,157,162,168,175,195,197,],[63,-85,-89,-89,-65,-66,-89,-89,-89,63,63,-84,63,-42,-42,-42,-59,63,-61,-62,63,-64,-67,-68,-69,-70,-71,-72,-73,63,63,-76,-77,63,63,-80,-82,-83,-86,-87,-88,63,-89,-89,-89,-89,-89,-89,-81,63,63,-41,63,63,63,-60,-63,-74,-75,-78,-79,63,63,63,63,63,63,63,]),')':([42,43,48,50,51,52,53,54,55,56,59,61,62,63,66,67,68,73,75,76,78,79,80,81,82,83,84,85,88,89,92,93,94,95,96,97,98,115,123,124,125,126,127,128,129,141,143,148,149,150,151,152,153,154,158,159,160,161,168,169,170,171,174,176,177,181,185,190,191,196,200,201,],[-89,-89,-85,-89,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,116,-29,117,-59,-61,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,129,-82,-83,-86,-87,-88,-89,-89,-89,-89,-89,-89,-89,-81,-28,-31,-60,-63,-74,-75,-78,-79,-89,-89,-89,178,179,-89,186,-47,187,189,-52,192,-89,-46,-89,-89,-30,-50,-51,]),'+':([48,55,56,59,61,62,63,89,92,94,95,96,97,98,125,126,127,128,129,152,153,206,],[-85,86,-89,-84,-42,-42,-42,-77,-80,-82,-83,-86,-87,-88,86,86,-89,-89,-81,-78,-79,-84,]),'-':([48,55,56,59,61,62,63,89,92,94,95,96,97,98,125,126,127,128,129,152,153,206,],[-85,87,-89,-84,-42,-42,-42,-77,-80,-82,-83,-86,-87,-88,87,87,-89,-89,-81,-78,-79,-84,]),'>':([48,54,55,56,59,61,62,63,85,88,89,92,94,95,96,97,98,125,126,127,128,129,150,151,152,153,206,],[-85,80,-89,-89,-84,-42,-42,-42,-73,-76,-77,-80,-82,-83,-86,-87,-88,-89,-89,-89,-89,-81,-74,-75,-78,-79,-84,]),'<':([48,54,55,56,59,61,62,63,85,88,89,92,94,95,96,97,98,125,126,127,128,129,150,151,152,153,206,],[-85,81,-89,-89,-84,-42,-42,-42,-73,-76,-77,-80,-82,-83,-86,-87,-88,-89,-89,-89,-89,-81,-74,-75,-78,-79,-84,]),'DIFFERENT':([48,54,55,56,59,61,62,63,85,88,89,92,94,95,96,97,98,125,126,127,128,129,150,151,152,153,206,],[-85,82,-89,-89,-84,-42,-42,-42,-73,-76,-77,-80,-82,-83,-86,-87,-88,-89,-89,-89,-89,-81,-74,-75,-78,-79,-84,]),'EQUAL':([48,54,55,56,59,61,62,63,85,88,89,92,94,95,96,97,98,125,126,127,128,129,150,151,152,153,206,],[-85,83,-89,-89,-84,-42,-42,-42,-73,-76,-77,-80,-82,-83,-86,-87,-88,-89,-89,-89,-89,-81,-74,-75,-78,-79,-84,]),'AND':([48,51,52,53,54,55,56,59,61,62,63,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,124,125,126,127,128,129,150,151,152,153,206,],[-85,77,-65,-66,-89,-89,-89,-84,-42,-42,-42,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,77,-89,-89,-89,-89,-81,-74,-75,-78,-79,-84,]),'OR':([48,50,51,52,53,54,55,56,59,61,62,63,76,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,123,124,125,126,127,128,129,149,150,151,152,153,206,],[-85,74,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,74,-89,-89,-89,-89,-89,-81,-63,-74,-75,-78,-79,-84,]),']':([48,49,50,51,52,53,54,55,56,59,61,62,63,73,75,76,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,123,124,125,126,127,128,129,147,148,149,150,151,152,153,156,],[-85,72,-89,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,-59,-61,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,-89,-89,-89,-89,-89,-89,-81,167,-60,-63,-74,-75,-78,-79,172,]),'TO':([48,50,51,52,53,54,55,56,59,61,62,63,73,75,76,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,123,124,125,126,127,128,129,148,149,150,151,152,153,180,],[-85,-89,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,-59,-61,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,-89,-89,-89,-89,-89,-89,-81,-60,-63,-74,-75,-78,-79,195,]),'DO':([48,50,51,52,53,54,55,56,59,61,62,63,73,75,76,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,123,124,125,126,127,128,129,148,149,150,151,152,153,204,],[-85,-89,-89,-65,-66,-89,-89,-89,-84,-42,-42,-42,-59,-61,-62,-64,-67,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-83,-86,-87,-88,-89,-89,-89,-89,-89,-89,-81,-60,-63,-74,-75,-78,-79,209,]),'.':([99,],[131,]),'=':([99,110,132,140,172,],[-18,136,-19,162,-20,]),'DESCRIBE':([131,],[155,]),'TITLE':([137,175,],[159,191,]),'ELSE':([207,],[213,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'add_type':([2,20,21,22,],[3,31,32,33,]),'add_id':([4,29,30,70,],[5,38,39,119,]),'save_ids':([6,69,71,],[7,118,120,]),'VARS_PRIME':([7,9,41,144,145,],[8,16,64,164,165,]),'VARS':([7,9,41,144,145,],[9,9,9,9,9,]),'empty':([7,8,9,13,24,38,39,41,42,43,50,51,54,55,56,64,101,115,123,124,125,126,127,128,144,145,146,154,158,159,164,165,168,181,190,191,193,194,207,215,216,],[10,14,10,26,26,46,46,10,67,67,75,78,84,88,92,102,102,143,75,78,88,88,92,92,10,10,46,170,176,176,102,102,170,143,176,176,102,102,214,102,102,]),'FUNCTION_PRIME':([8,],[12,]),'FUNCTION':([8,13,24,],[13,24,24,]),'TIPO_COMP':([11,],[17,]),'TIPO_SIMPLE':([11,15,42,43,142,],[18,27,65,65,163,]),'FUNC_PRIME':([13,24,],[25,35,]),'TIPO_PRIME':([38,39,146,],[44,47,166,]),'EXPRESSION':([40,57,121,130,133,137,138,139,154,157,162,168,175,195,197,],[49,93,147,154,156,158,160,161,168,173,180,168,190,204,205,]),'AND_EXP':([40,57,74,121,130,133,137,138,139,154,157,162,168,175,195,197,],[50,50,123,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'B_EXP':([40,57,74,77,121,130,133,137,138,139,154,157,162,168,175,195,197,],[51,51,51,124,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'EXP':([40,57,74,77,121,130,133,137,138,139,154,157,162,168,175,195,197,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TERM':([40,57,74,77,86,87,121,130,133,137,138,139,154,157,162,168,175,195,197,],[55,55,55,55,125,126,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FACTOR':([40,57,74,77,86,87,90,91,121,130,133,137,138,139,154,157,162,168,175,195,197,],[56,56,56,56,56,56,127,128,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'VAR_CT':([40,57,58,60,74,77,86,87,90,91,121,130,133,137,138,139,154,157,162,168,175,195,197,],[59,59,94,95,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,206,]),'PARAM':([42,43,],[66,68,]),'EXPRESSION_PRIME':([50,123,],[73,148,]),'AND_EXP_PRIME':([51,124,],[76,149,]),'B_EXP_PRIME':([54,],[79,]),'EXP_PRIME':([55,125,126,],[85,150,151,]),'TERM_PRIME':([56,127,128,],[89,152,153,]),'add_operand':([61,62,63,],[96,97,98,]),'BLOCK':([64,101,164,165,193,194,215,216,],[100,135,182,183,202,203,217,218,]),'STATEMENT':([64,101,164,165,193,194,215,216,],[101,101,101,101,101,101,101,101,]),'ASSIGNATION':([64,101,164,165,193,194,215,216,],[103,103,103,103,103,103,103,103,]),'FUNC_CALL':([64,101,164,165,193,194,215,216,],[104,104,104,104,104,104,104,104,]),'WRITE':([64,101,164,165,193,194,215,216,],[105,105,105,105,105,105,105,105,]),'CONDITION':([64,101,164,165,193,194,215,216,],[106,106,106,106,106,106,106,106,]),'WHILE_STMT':([64,101,164,165,193,194,215,216,],[107,107,107,107,107,107,107,107,]),'FOR_STMT':([64,101,164,165,193,194,215,216,],[108,108,108,108,108,108,108,108,]),'DESCRIBE_STMT':([64,101,164,165,193,194,215,216,],[109,109,109,109,109,109,109,109,]),'VARIABLE':([64,101,164,165,193,194,215,216,],[110,110,110,110,110,110,110,110,]),'get_variable':([99,],[132,]),'PARAM_PRIME':([115,181,],[141,196,]),'add_current_type':([119,],[146,]),'add_operator':([136,],[157,]),'FUNC_CALL_PRIME':([154,168,],[169,185,]),'WRITE_PRIME':([158,159,190,191,],[174,177,200,201,]),'add_assignation_quad':([188,],[199,]),'ELSE_STMT':([207,],[212,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK }','PROGRAM',14,'p_PROGRAM','parser.py',9),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',14),
  ('save_ids -> <empty>','save_ids',0,'p_save_ids','parser.py',18),
  ('VARS_PRIME -> VARS VARS_PRIME','VARS_PRIME',2,'p_VARS_PRIME','parser.py',23),
  ('VARS_PRIME -> empty','VARS_PRIME',1,'p_VARS_PRIME','parser.py',24),
  ('FUNCTION_PRIME -> FUNCTION FUNC_PRIME','FUNCTION_PRIME',2,'p_FUNCTION_PRIME','parser.py',30),
  ('FUNCTION_PRIME -> empty','FUNCTION_PRIME',1,'p_FUNCTION_PRIME','parser.py',31),
  ('FUNC_PRIME -> FUNCTION FUNC_PRIME','FUNC_PRIME',2,'p_FUNC','parser.py',37),
  ('FUNC_PRIME -> empty','FUNC_PRIME',1,'p_FUNC','parser.py',38),
  ('add_type -> <empty>','add_type',0,'p_add_type','parser.py',43),
  ('add_current_type -> <empty>','add_current_type',0,'p_add_current_type','parser.py',47),
  ('VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',52),
  ('VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',53),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ;','VARS',7,'p_VARS','parser.py',54),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;','VARS',10,'p_VARS','parser.py',55),
  ('TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME','TIPO_PRIME',5,'p_TIPO_PRIME','parser.py',61),
  ('TIPO_PRIME -> empty','TIPO_PRIME',1,'p_TIPO_PRIME','parser.py',62),
  ('get_variable -> <empty>','get_variable',0,'p_get_variable','parser.py',67),
  ('VARIABLE -> ID get_variable','VARIABLE',2,'p_VARIABLE','parser.py',72),
  ('VARIABLE -> ID [ EXPRESSION ]','VARIABLE',4,'p_VARIABLE','parser.py',73),
  ('TIPO_SIMPLE -> INT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',79),
  ('TIPO_SIMPLE -> FLOAT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',80),
  ('TIPO_SIMPLE -> CHAR add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',81),
  ('TIPO_COMP -> DATAFRAME','TIPO_COMP',1,'p_TIPO_COMP','parser.py',87),
  ('FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }','FUNCTION',12,'p_FUNCTION','parser.py',93),
  ('FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }','FUNCTION',12,'p_FUNCTION','parser.py',94),
  ('FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }','FUNCTION',10,'p_FUNCTION','parser.py',95),
  ('PARAM -> TIPO_SIMPLE ID PARAM_PRIME','PARAM',3,'p_PARAM','parser.py',101),
  ('PARAM -> empty','PARAM',1,'p_PARAM','parser.py',102),
  ('PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME','PARAM_PRIME',4,'p_PARAM_PRIME','parser.py',108),
  ('PARAM_PRIME -> empty','PARAM_PRIME',1,'p_PARAM_PRIME','parser.py',109),
  ('BLOCK -> STATEMENT BLOCK','BLOCK',2,'p_BLOCK','parser.py',115),
  ('BLOCK -> empty','BLOCK',1,'p_BLOCK','parser.py',116),
  ('STATEMENT -> ASSIGNATION','STATEMENT',1,'p_STATEMENT','parser.py',122),
  ('STATEMENT -> FUNC_CALL','STATEMENT',1,'p_STATEMENT','parser.py',123),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',124),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',125),
  ('STATEMENT -> WHILE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',126),
  ('STATEMENT -> FOR_STMT','STATEMENT',1,'p_STATEMENT','parser.py',127),
  ('STATEMENT -> DESCRIBE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',128),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','parser.py',133),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','parser.py',137),
  ('add_assignation_quad -> <empty>','add_assignation_quad',0,'p_add_assignation_quad','parser.py',141),
  ('ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',146),
  ('FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME )','FUNC_CALL',5,'p_FUNC_CALL','parser.py',152),
  ('FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME','FUNC_CALL_PRIME',2,'p_FUNC_CALL_PRIME','parser.py',158),
  ('FUNC_CALL_PRIME -> empty','FUNC_CALL_PRIME',1,'p_FUNC_CALL_PRIME','parser.py',159),
  ('WRITE -> PRINT ( EXPRESSION WRITE_PRIME )','WRITE',5,'p_WRITE','parser.py',165),
  ('WRITE -> PRINT ( TITLE WRITE_PRIME )','WRITE',5,'p_WRITE','parser.py',166),
  ('WRITE_PRIME -> , EXPRESSION WRITE_PRIME','WRITE_PRIME',3,'p_WRITE_PRIME','parser.py',172),
  ('WRITE_PRIME -> , TITLE WRITE_PRIME','WRITE_PRIME',3,'p_WRITE_PRIME','parser.py',173),
  ('WRITE_PRIME -> empty','WRITE_PRIME',1,'p_WRITE_PRIME','parser.py',174),
  ('CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT','CONDITION',8,'p_CONDITION','parser.py',180),
  ('ELSE_STMT -> ELSE { BLOCK }','ELSE_STMT',4,'p_ELSE_STMT','parser.py',186),
  ('ELSE_STMT -> empty','ELSE_STMT',1,'p_ELSE_STMT','parser.py',187),
  ('WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK }','WHILE_STMT',7,'p_WHILE_STMT','parser.py',193),
  ('FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }','FOR_STMT',10,'p_FOR_STMT','parser.py',199),
  ('DESCRIBE_STMT -> ID . DESCRIBE ( )','DESCRIBE_STMT',5,'p_DESCRIBE_STMT','parser.py',205),
  ('EXPRESSION -> AND_EXP EXPRESSION_PRIME','EXPRESSION',2,'p_EXPRESSION','parser.py',211),
  ('EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME','EXPRESSION_PRIME',3,'p_EXPRESSION_PRIME','parser.py',217),
  ('EXPRESSION_PRIME -> empty','EXPRESSION_PRIME',1,'p_EXPRESSION_PRIME','parser.py',218),
  ('AND_EXP -> B_EXP AND_EXP_PRIME','AND_EXP',2,'p_AND_EXP','parser.py',224),
  ('AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME','AND_EXP_PRIME',3,'p_AND_EXP_PRIME','parser.py',230),
  ('AND_EXP_PRIME -> empty','AND_EXP_PRIME',1,'p_AND_EXP_PRIME','parser.py',231),
  ('B_EXP -> TRUE','B_EXP',1,'p_B_EXP','parser.py',237),
  ('B_EXP -> FALSE','B_EXP',1,'p_B_EXP','parser.py',238),
  ('B_EXP -> EXP B_EXP_PRIME','B_EXP',2,'p_B_EXP','parser.py',239),
  ('B_EXP_PRIME -> >','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',245),
  ('B_EXP_PRIME -> <','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',246),
  ('B_EXP_PRIME -> DIFFERENT','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',247),
  ('B_EXP_PRIME -> EQUAL','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',248),
  ('B_EXP_PRIME -> empty','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',249),
  ('EXP -> TERM EXP_PRIME','EXP',2,'p_EXP','parser.py',255),
  ('EXP_PRIME -> + TERM EXP_PRIME','EXP_PRIME',3,'p_EXP_PRIME','parser.py',261),
  ('EXP_PRIME -> - TERM EXP_PRIME','EXP_PRIME',3,'p_EXP_PRIME','parser.py',262),
  ('EXP_PRIME -> empty','EXP_PRIME',1,'p_EXP_PRIME','parser.py',263),
  ('TERM -> FACTOR TERM_PRIME','TERM',2,'p_TERM','parser.py',269),
  ('TERM_PRIME -> * FACTOR TERM_PRIME','TERM_PRIME',3,'p_TERM_PRIME','parser.py',275),
  ('TERM_PRIME -> / FACTOR TERM_PRIME','TERM_PRIME',3,'p_TERM_PRIME','parser.py',276),
  ('TERM_PRIME -> empty','TERM_PRIME',1,'p_TERM_PRIME','parser.py',277),
  ('FACTOR -> ( EXPRESSION )','FACTOR',3,'p_FACTOR','parser.py',283),
  ('FACTOR -> * VAR_CT','FACTOR',2,'p_FACTOR','parser.py',284),
  ('FACTOR -> / VAR_CT','FACTOR',2,'p_FACTOR','parser.py',285),
  ('FACTOR -> VAR_CT','FACTOR',1,'p_FACTOR','parser.py',286),
  ('VAR_CT -> ID','VAR_CT',1,'p_VAR_CT','parser.py',292),
  ('VAR_CT -> I_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',293),
  ('VAR_CT -> F_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',294),
  ('VAR_CT -> C_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',295),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',304),
]
