
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND CHAR C_CONST DATAFRAME DESCRIBE DIFFERENT DO ELSE EQUAL FALSE FLOAT FOR FUNC F_CONST ID IF INT I_CONST MAIN OR PRINT PROG RETURN TITLE TO TRUE VAR VOID WHILE\n    PROGRAM : PROG add_type ID add_id ';' go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN '{' fill_go_to_main_quad VARS_PRIME BLOCK '}' empty_global_variables_table\n    go_to_main : empty_global_variables_table : empty_local_variables_table : fill_go_to_main_quad : add_id : save_ids : save_parameter : save_function : \n    VARS_PRIME : VARS VARS_PRIME\n               | empty\n    \n    FUNCTION_PRIME : FUNCTION FUNC_PRIME\n                   | empty\n    \n    FUNC_PRIME : FUNCTION FUNC_PRIME\n         | empty\n    add_type : add_current_type : \n    VARS : VAR TIPO_COMP ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' ';'\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' '[' EXPRESSION ']' ';'\n    \n    TIPO_PRIME : ',' ID add_id add_current_type TIPO_PRIME\n               | empty\n    get_variable : \n    VARIABLE : ID get_variable\n             | ID '[' EXPRESSION ']'\n    \n    TIPO_SIMPLE : INT add_type\n                | FLOAT add_type\n                | CHAR add_type\n    \n    TIPO_COMP : DATAFRAME\n    add_function_type : save_function_as_global_variable : \n    FUNCTION : FUNC TIPO_SIMPLE add_function_type ID add_id save_function '(' PARAM add_parameters ')' '{' VARS_PRIME BLOCK RETURN EXPRESSION ';' save_function_as_global_variable '}' empty_local_variables_table\n             | FUNC VOID add_type ID add_id save_function '(' PARAM add_parameters ')' '{' VARS_PRIME BLOCK '}' empty_local_variables_table\n    add_parameters : \n    PARAM : TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME\n          | empty\n    \n    PARAM_PRIME : ',' TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME\n                | empty\n    \n    BLOCK : STATEMENT BLOCK\n          | empty\n    \n    STATEMENT : ASSIGNATION\n              | FUNC_CALL\n              | EXPRESSION ';'\n              | WRITE ';'\n              | CONDITION\n              | WHILE_STMT\n              | FOR_STMT\n              | DESCRIBE_STMT\n    add_operator : add_operand : add_assignation_quad : add_assignation_for_quad : functions_assignation : \n    ASSIGNATION : VARIABLE '=' add_operator EXPRESSION ';' add_assignation_quad\n                | FOR VARIABLE '=' add_operator EXPRESSION add_assignation_for_quad\n                | VARIABLE '=' add_operator FUNC_CALL functions_assignation add_assignation_quad\n    era_quad : param_quad : go_sub_quad : \n    FUNC_CALL : FUNC ID era_quad '(' EXPRESSION param_quad FUNC_CALL_PRIME ')' ';' go_sub_quad\n    \n    FUNC_CALL_PRIME : ',' EXPRESSION param_quad FUNC_CALL_PRIME\n                    | empty\n    print_quad : add_print_operator : \n    WRITE : PRINT add_operator '(' EXPRESSION print_quad WRITE_PRIME ')'\n               | PRINT add_operator '(' TITLE WRITE_PRIME ')'\n    \n    WRITE_PRIME : ',' add_print_operator EXPRESSION print_quad WRITE_PRIME\n                | ',' add_print_operator TITLE print_quad WRITE_PRIME\n                | empty\n    go_to_false_quad : fill_go_to_false_quad : go_to_true_quad : fill_go_to_true_quad : go_to_quad : pop_operand : pop_type : append_jump : \n    CONDITION : IF '(' EXPRESSION pop_operand pop_type ')' '{' go_to_false_quad BLOCK '}' fill_go_to_false_quad ELSE_STMT\n    \n    ELSE_STMT : ELSE '{' go_to_true_quad BLOCK '}' fill_go_to_true_quad\n              | empty\n    \n    WHILE_STMT : WHILE '(' append_jump EXPRESSION pop_operand pop_type ')' '{' go_to_false_quad  BLOCK '}' fill_go_to_false_quad go_to_quad\n    check_exact_type_for : add_final_counter_for : generate_for_quad : check_boolean_expression_for : end_for : \n    FOR_STMT : ASSIGNATION check_exact_type_for TO '(' EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ')' generate_for_quad DO '{' BLOCK '}' end_for\n    \n    DESCRIBE_STMT : ID '.' DESCRIBE '(' ')' \n    aritmetics_operation : \n    EXPRESSION : AND_EXP EXPRESSION_PRIME\n    \n    EXPRESSION_PRIME : OR AND_EXP EXPRESSION_PRIME\n                     | empty\n    \n    AND_EXP : B_EXP AND_EXP_PRIME\n    \n    AND_EXP_PRIME : AND B_EXP AND_EXP_PRIME\n                  | empty\n    \n    B_EXP : TRUE\n          | FALSE\n          | EXP B_EXP_PRIME\n    \n    B_EXP_PRIME : '>' add_operator B_EXP aritmetics_operation\n                | '<' add_operator B_EXP aritmetics_operation\n                | DIFFERENT add_operator B_EXP aritmetics_operation\n                | EQUAL add_operator B_EXP aritmetics_operation\n                | empty\n    \n    EXP : TERM EXP_PRIME\n    \n    EXP_PRIME : '+' add_operator TERM EXP_PRIME aritmetics_operation\n              | '-' add_operator TERM EXP_PRIME aritmetics_operation\n              | empty\n    \n    TERM : FACTOR TERM_PRIME\n    \n    TERM_PRIME : '*' add_operator FACTOR aritmetics_operation TERM_PRIME \n                  | '/' add_operator FACTOR aritmetics_operation TERM_PRIME \n                  | empty\n    \n    FACTOR : '(' EXPRESSION ')'\n              | '*' VAR_CT\n              | '/' VAR_CT\n              | VAR_CT\n    \n    VAR_CT : ID add_operand\n           | I_CONST add_operand\n           | F_CONST add_operand\n           | C_CONST add_operand\n    empty :"
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([1,153,181,],[0,-3,-1,]),'ID':([2,3,10,11,17,18,19,20,21,22,23,28,29,32,33,34,37,38,41,42,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,126,127,128,129,131,132,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,165,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,250,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-16,4,-121,-11,-10,30,31,-30,-16,-16,-16,-31,-16,-27,-28,-29,43,44,49,-5,69,-51,-121,-121,-97,-98,-121,-121,-121,49,49,-116,49,-51,-51,-51,-121,-7,-7,-117,-91,49,-93,-94,49,-96,-99,-50,-50,-50,-50,-104,-105,-50,-50,-108,-109,-50,-50,-112,-114,-115,-118,-119,-120,118,-18,-19,49,-20,-121,-121,49,49,49,49,49,49,49,49,-113,118,-42,-43,-46,-47,-48,-49,160,161,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,49,-44,-45,-50,49,-78,189,-100,-101,-102,-103,-90,-90,-121,-121,49,-50,49,49,-21,-106,-107,-110,-111,49,-54,49,49,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,49,118,118,49,-71,260,118,-71,49,-60,118,-61,-72,-121,-72,118,-79,-81,-75,-73,-82,-87,118,-88,-74,-80,]),';':([4,5,30,31,39,40,45,47,48,49,51,52,53,54,55,56,57,60,62,63,64,69,71,72,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,103,107,108,117,118,124,125,138,140,141,142,143,144,145,146,147,148,149,169,170,171,172,173,174,175,176,177,178,193,194,195,196,200,232,245,254,271,],[-6,6,-6,-6,-121,-121,68,-23,70,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-6,-117,106,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,-17,-121,-121,-113,-51,156,157,-121,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-22,192,-100,-101,-102,-103,-90,-90,-121,-121,-106,-107,-110,-111,213,-67,-66,264,279,]),'VAR':([6,7,8,10,42,65,68,70,102,104,106,192,224,225,],[-2,-9,12,12,-5,12,-7,-7,-18,-19,-20,-21,12,12,]),'FUNC':([6,7,8,9,10,11,14,17,25,42,49,51,52,53,54,55,56,57,60,62,63,64,65,68,70,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,99,102,104,106,107,108,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,156,157,158,171,172,173,174,175,176,177,178,183,192,193,194,195,196,201,211,213,214,215,224,225,227,228,229,239,240,248,258,259,262,264,269,272,274,276,281,282,285,286,288,289,290,292,293,294,295,296,297,299,300,],[-2,-9,-121,16,-121,-11,16,-10,16,-5,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-121,-7,-7,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,132,-18,-19,-20,-121,-121,-113,132,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-44,-45,-50,-100,-101,-102,-103,-90,-90,-121,-121,132,-21,-106,-107,-110,-111,-54,-89,-52,-52,-53,-121,-121,-55,-57,-56,132,132,-71,132,-71,-4,-60,132,-34,-61,-72,-121,-72,132,-79,-81,-75,-4,-73,-82,-33,-87,132,-88,-74,-80,]),'VOID':([6,7,8,9,10,11,13,14,15,16,17,25,26,27,36,68,70,102,104,106,192,262,272,290,294,],[-2,-9,-121,-121,-121,-11,24,-121,-13,29,-10,-121,-12,-15,-14,-7,-7,-18,-19,-20,-21,-4,-34,-4,-33,]),'FOR':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,68,70,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,99,102,104,106,107,108,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,156,157,171,172,173,174,175,176,177,178,192,193,194,195,196,201,211,213,214,215,224,225,227,228,229,239,240,248,258,259,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,-5,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-121,-7,-7,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,131,-18,-19,-20,-121,-121,-113,131,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-44,-45,-100,-101,-102,-103,-90,-90,-121,-121,-21,-106,-107,-110,-111,-54,-89,-52,-52,-53,-121,-121,-55,-57,-56,131,131,-71,131,-71,-60,131,-61,-72,-121,-72,131,-79,-81,-75,-73,-82,-87,131,-88,-74,-80,]),'PRINT':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,68,70,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,99,102,104,106,107,108,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,156,157,171,172,173,174,175,176,177,178,192,193,194,195,196,201,211,213,214,215,224,225,227,228,229,239,240,248,258,259,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,-5,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-121,-7,-7,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,133,-18,-19,-20,-121,-121,-113,133,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-44,-45,-100,-101,-102,-103,-90,-90,-121,-121,-21,-106,-107,-110,-111,-54,-89,-52,-52,-53,-121,-121,-55,-57,-56,133,133,-71,133,-71,-60,133,-61,-72,-121,-72,133,-79,-81,-75,-73,-82,-87,133,-88,-74,-80,]),'IF':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,68,70,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,99,102,104,106,107,108,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,156,157,171,172,173,174,175,176,177,178,192,193,194,195,196,201,211,213,214,215,224,225,227,228,229,239,240,248,258,259,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,-5,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-121,-7,-7,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,134,-18,-19,-20,-121,-121,-113,134,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-44,-45,-100,-101,-102,-103,-90,-90,-121,-121,-21,-106,-107,-110,-111,-54,-89,-52,-52,-53,-121,-121,-55,-57,-56,134,134,-71,134,-71,-60,134,-61,-72,-121,-72,134,-79,-81,-75,-73,-82,-87,134,-88,-74,-80,]),'WHILE':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,68,70,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,99,102,104,106,107,108,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,156,157,171,172,173,174,175,176,177,178,192,193,194,195,196,201,211,213,214,215,224,225,227,228,229,239,240,248,258,259,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,-5,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-121,-7,-7,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,135,-18,-19,-20,-121,-121,-113,135,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-44,-45,-100,-101,-102,-103,-90,-90,-121,-121,-21,-106,-107,-110,-111,-54,-89,-52,-52,-53,-121,-121,-55,-57,-56,135,135,-71,135,-71,-60,135,-61,-72,-121,-72,135,-79,-81,-75,-73,-82,-87,135,-88,-74,-80,]),'TRUE':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,53,-5,-51,-121,-121,-97,-98,-121,-121,-121,53,-116,-51,-51,-51,-121,-7,-7,-117,-91,53,-93,-94,53,-96,-99,-50,-50,-50,-50,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,53,-18,-19,53,-20,-121,-121,53,53,53,53,-113,53,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,53,-44,-45,-50,53,-78,-100,-101,-102,-103,-90,-90,-121,-121,53,-50,53,53,-21,-106,-107,-110,-111,53,-54,53,53,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,53,53,53,53,-71,53,-71,53,-60,53,-61,-72,-121,-72,53,-79,-81,-75,-73,-82,-87,53,-88,-74,-80,]),'FALSE':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,54,-5,-51,-121,-121,-97,-98,-121,-121,-121,54,-116,-51,-51,-51,-121,-7,-7,-117,-91,54,-93,-94,54,-96,-99,-50,-50,-50,-50,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,54,-18,-19,54,-20,-121,-121,54,54,54,54,-113,54,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,54,-44,-45,-50,54,-78,-100,-101,-102,-103,-90,-90,-121,-121,54,-50,54,54,-21,-106,-107,-110,-111,54,-54,54,54,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,54,54,54,54,-71,54,-71,54,-60,54,-61,-72,-121,-72,54,-79,-81,-75,-73,-82,-87,54,-88,-74,-80,]),'(':([10,11,17,41,42,43,44,49,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,126,127,128,129,133,134,135,140,141,142,143,144,145,146,147,148,149,152,156,157,158,161,162,163,164,171,172,173,174,175,176,177,178,179,182,183,184,185,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,58,-5,-6,-6,-51,-121,-121,-97,-98,-121,-121,-121,58,-116,-51,-51,-51,-121,-9,-9,-7,-7,-117,-91,58,-93,-94,58,-96,-99,-50,-50,-50,-50,-104,-105,-50,-50,-108,-109,-50,-50,-112,-114,-115,-118,-119,-120,58,136,137,-18,-19,58,-20,-121,-121,58,58,58,58,58,58,58,58,-113,58,-42,-43,-46,-47,-48,-49,-50,163,164,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,58,-44,-45,-50,-58,186,58,-78,-100,-101,-102,-103,-90,-90,-121,-121,197,199,58,-50,203,58,58,-21,-106,-107,-110,-111,58,-54,58,58,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,58,58,58,58,-71,58,-71,58,-60,58,-61,-72,-121,-72,58,-79,-81,-75,-73,-82,-87,58,-88,-74,-80,]),'*':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,59,-5,-51,-121,-121,-97,-98,-121,-121,90,59,-116,-51,-51,-51,-121,-7,-7,-117,-91,59,-93,-94,59,-96,-99,-50,-50,-50,-50,-104,-105,-50,-50,-108,-109,-50,-50,-112,-114,-115,-118,-119,-120,59,-18,-19,59,-20,-121,-121,59,59,59,59,59,59,59,59,-113,-51,59,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,59,-44,-45,-50,59,-78,-100,-101,-102,-103,-90,-90,90,90,59,-50,59,59,-21,-106,-107,-110,-111,59,-54,59,59,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,59,59,59,59,-71,59,-71,59,-60,59,-61,-72,-121,-72,59,-79,-81,-75,-73,-82,-87,59,-88,-74,-80,]),'/':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,60,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,61,-5,-51,-121,-121,-97,-98,-121,-121,91,61,-116,-51,-51,-51,-121,-7,-7,-117,-91,61,-93,-94,61,-96,-99,-50,-50,-50,-50,-104,-105,-50,-50,-108,-109,-50,-50,-112,-114,-115,-118,-119,-120,61,-18,-19,61,-20,-121,-121,61,61,61,61,61,61,61,61,-113,-51,61,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,61,-44,-45,-50,61,-78,-100,-101,-102,-103,-90,-90,91,91,61,-50,61,61,-21,-106,-107,-110,-111,61,-54,61,61,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,61,61,61,61,-71,61,-71,61,-60,61,-61,-72,-121,-72,61,-79,-81,-75,-73,-82,-87,61,-88,-74,-80,]),'I_CONST':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,62,-5,-51,-121,-121,-97,-98,-121,-121,-121,62,62,-116,62,-51,-51,-51,-121,-7,-7,-117,-91,62,-93,-94,62,-96,-99,-50,-50,-50,-50,-104,-105,-50,-50,-108,-109,-50,-50,-112,-114,-115,-118,-119,-120,62,-18,-19,62,-20,-121,-121,62,62,62,62,62,62,62,62,-113,62,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,62,-44,-45,-50,62,-78,-100,-101,-102,-103,-90,-90,-121,-121,62,-50,62,62,-21,-106,-107,-110,-111,62,-54,62,62,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,62,62,62,62,-71,62,-71,62,-60,62,-61,-72,-121,-72,62,-79,-81,-75,-73,-82,-87,62,-88,-74,-80,]),'F_CONST':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,63,-5,-51,-121,-121,-97,-98,-121,-121,-121,63,63,-116,63,-51,-51,-51,-121,-7,-7,-117,-91,63,-93,-94,63,-96,-99,-50,-50,-50,-50,-104,-105,-50,-50,-108,-109,-50,-50,-112,-114,-115,-118,-119,-120,63,-18,-19,63,-20,-121,-121,63,63,63,63,63,63,63,63,-113,63,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,63,-44,-45,-50,63,-78,-100,-101,-102,-103,-90,-90,-121,-121,63,-50,63,63,-21,-106,-107,-110,-111,63,-54,63,63,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,63,63,63,63,-71,63,-71,63,-60,63,-61,-72,-121,-72,63,-79,-81,-75,-73,-82,-87,63,-88,-74,-80,]),'C_CONST':([10,11,17,41,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,152,156,157,158,163,164,171,172,173,174,175,176,177,178,183,184,186,188,192,193,194,195,196,199,201,202,203,211,213,214,215,219,224,225,227,228,229,233,239,240,243,248,258,259,261,264,269,274,276,281,282,285,286,288,289,292,293,295,296,297,299,300,],[-121,-11,-10,64,-5,-51,-121,-121,-97,-98,-121,-121,-121,64,64,-116,64,-51,-51,-51,-121,-7,-7,-117,-91,64,-93,-94,64,-96,-99,-50,-50,-50,-50,-104,-105,-50,-50,-108,-109,-50,-50,-112,-114,-115,-118,-119,-120,64,-18,-19,64,-20,-121,-121,64,64,64,64,64,64,64,64,-113,64,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,64,-44,-45,-50,64,-78,-100,-101,-102,-103,-90,-90,-121,-121,64,-50,64,64,-21,-106,-107,-110,-111,64,-54,64,64,-89,-52,-52,-53,-65,-121,-121,-55,-57,-56,64,64,64,64,-71,64,-71,64,-60,64,-61,-72,-121,-72,64,-79,-81,-75,-73,-82,-87,64,-88,-74,-80,]),'}':([10,11,17,42,49,51,52,53,54,55,56,57,60,62,63,64,65,68,70,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,99,102,104,106,107,108,117,119,120,121,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,154,156,157,171,172,173,174,175,176,177,178,192,193,194,195,196,201,211,213,214,215,225,227,228,229,240,248,252,258,259,264,268,269,274,276,277,279,281,282,284,285,286,288,289,291,292,293,295,296,297,298,299,300,],[-121,-11,-10,-5,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-121,-7,-7,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,-121,-18,-19,-20,-121,-121,-113,153,-121,-41,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-40,-44,-45,-100,-101,-102,-103,-90,-90,-121,-121,-21,-106,-107,-110,-111,-54,-89,-52,-52,-53,-121,-55,-57,-56,-121,-71,262,-121,-71,-60,276,-121,-61,-72,282,-32,-121,-72,290,-121,-79,-81,-75,295,-73,-82,-87,-121,-88,299,-74,-80,]),'RETURN':([10,11,17,49,51,52,53,54,55,56,57,60,62,63,64,68,70,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,102,104,106,107,108,117,120,121,122,123,126,127,128,129,140,141,142,143,144,145,146,147,148,149,154,156,157,171,172,173,174,175,176,177,178,192,193,194,195,196,201,211,213,214,215,224,227,228,229,239,251,264,274,276,281,282,286,288,289,293,295,297,299,300,],[-121,-11,-10,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-7,-7,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,-18,-19,-20,-121,-121,-113,-121,-41,-42,-43,-46,-47,-48,-49,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-40,-44,-45,-100,-101,-102,-103,-90,-90,-121,-121,-21,-106,-107,-110,-111,-54,-89,-52,-52,-53,-121,-55,-57,-56,-121,261,-60,-61,-72,-121,-72,-79,-81,-75,-82,-87,-88,-74,-80,]),'DATAFRAME':([12,],[20,]),'INT':([12,16,136,137,237,],[21,21,21,21,21,]),'FLOAT':([12,16,136,137,237,],[22,22,22,22,22,]),'CHAR':([12,16,136,137,237,],[23,23,23,23,23,]),'MAIN':([24,],[35,]),',':([30,31,39,40,49,51,52,53,54,55,56,57,60,62,63,64,69,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,103,107,108,117,138,140,141,142,143,144,145,146,147,148,149,171,172,173,174,175,176,177,178,189,193,194,195,196,204,205,208,216,217,223,230,246,247,255,256,257,260,265,270,278,],[-6,-6,46,46,-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-6,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,-17,-121,-121,-113,46,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-100,-101,-102,-103,-90,-90,-121,-121,-6,-106,-107,-110,-111,-64,219,-8,-59,219,237,243,-64,-64,-59,219,219,-6,243,-8,237,]),'[':([31,72,118,160,],[41,105,152,152,]),'{':([35,209,210,234,249,280,287,],[42,224,225,248,259,285,292,]),'+':([49,56,57,60,62,63,64,71,89,92,94,95,96,97,98,117,118,146,147,148,149,177,178,195,196,],[-51,86,-121,-116,-51,-51,-51,-117,-109,-112,-114,-115,-118,-119,-120,-113,-51,86,86,-90,-90,-121,-121,-110,-111,]),'-':([49,56,57,60,62,63,64,71,89,92,94,95,96,97,98,117,118,146,147,148,149,177,178,195,196,],[-51,87,-121,-116,-51,-51,-51,-117,-109,-112,-114,-115,-118,-119,-120,-113,-51,87,87,-90,-90,-121,-121,-110,-111,]),'>':([49,55,56,57,60,62,63,64,71,85,88,89,92,94,95,96,97,98,117,118,146,147,148,149,175,176,177,178,193,194,195,196,],[-51,80,-121,-121,-116,-51,-51,-51,-117,-105,-108,-109,-112,-114,-115,-118,-119,-120,-113,-51,-121,-121,-90,-90,-90,-90,-121,-121,-106,-107,-110,-111,]),'<':([49,55,56,57,60,62,63,64,71,85,88,89,92,94,95,96,97,98,117,118,146,147,148,149,175,176,177,178,193,194,195,196,],[-51,81,-121,-121,-116,-51,-51,-51,-117,-105,-108,-109,-112,-114,-115,-118,-119,-120,-113,-51,-121,-121,-90,-90,-90,-90,-121,-121,-106,-107,-110,-111,]),'DIFFERENT':([49,55,56,57,60,62,63,64,71,85,88,89,92,94,95,96,97,98,117,118,146,147,148,149,175,176,177,178,193,194,195,196,],[-51,82,-121,-121,-116,-51,-51,-51,-117,-105,-108,-109,-112,-114,-115,-118,-119,-120,-113,-51,-121,-121,-90,-90,-90,-90,-121,-121,-106,-107,-110,-111,]),'EQUAL':([49,55,56,57,60,62,63,64,71,85,88,89,92,94,95,96,97,98,117,118,146,147,148,149,175,176,177,178,193,194,195,196,],[-51,83,-121,-121,-116,-51,-51,-51,-117,-105,-108,-109,-112,-114,-115,-118,-119,-120,-113,-51,-121,-121,-90,-90,-90,-90,-121,-121,-106,-107,-110,-111,]),'AND':([49,52,53,54,55,56,57,60,62,63,64,71,79,84,85,88,89,92,94,95,96,97,98,108,117,118,142,143,144,145,146,147,148,149,171,172,173,174,175,176,177,178,193,194,195,196,],[-51,77,-97,-98,-121,-121,-121,-116,-51,-51,-51,-117,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,77,-113,-51,-90,-90,-90,-90,-121,-121,-90,-90,-100,-101,-102,-103,-90,-90,-121,-121,-106,-107,-110,-111,]),'OR':([49,51,52,53,54,55,56,57,60,62,63,64,71,76,78,79,84,85,88,89,92,94,95,96,97,98,107,108,117,118,141,142,143,144,145,146,147,148,149,171,172,173,174,175,176,177,178,193,194,195,196,],[-51,74,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-117,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,74,-121,-113,-51,-95,-90,-90,-90,-90,-121,-121,-90,-90,-100,-101,-102,-103,-90,-90,-121,-121,-106,-107,-110,-111,]),']':([49,50,51,52,53,54,55,56,57,60,62,63,64,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,107,108,117,139,140,141,142,143,144,145,146,147,148,149,171,172,173,174,175,176,177,178,180,193,194,195,196,],[-51,72,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,-121,-121,-113,170,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-100,-101,-102,-103,-90,-90,-121,-121,198,-106,-107,-110,-111,]),')':([49,51,52,53,54,55,56,57,60,62,63,64,71,73,75,76,78,79,84,85,88,89,92,93,94,95,96,97,98,107,108,117,136,137,140,141,142,143,144,145,146,147,148,149,166,167,168,171,172,173,174,175,176,177,178,187,189,190,191,193,194,195,196,197,204,205,206,207,208,212,216,217,218,220,221,222,223,226,230,231,235,236,238,241,242,244,246,247,253,255,256,257,260,265,266,267,270,275,278,283,],[-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,117,-114,-115,-118,-119,-120,-121,-121,-113,-121,-121,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,-35,-37,-35,-100,-101,-102,-103,-90,-90,-121,-121,-76,-6,209,210,-106,-107,-110,-111,211,-64,-121,-77,-76,-8,-83,-59,-121,232,-70,234,-77,-121,-84,-121,245,249,-36,-39,-86,254,-63,-64,-64,263,-59,-121,-121,-6,-121,-68,-69,-8,-62,-121,-38,]),'TO':([49,51,52,53,54,55,56,57,60,62,63,64,71,73,75,76,78,79,84,85,88,89,92,94,95,96,97,98,107,108,117,122,140,141,142,143,144,145,146,147,148,149,155,171,172,173,174,175,176,177,178,193,194,195,196,201,213,214,215,227,228,229,264,274,],[-51,-121,-121,-97,-98,-121,-121,-121,-116,-51,-51,-51,-117,-91,-93,-94,-96,-99,-104,-105,-108,-109,-112,-114,-115,-118,-119,-120,-121,-121,-113,-83,-92,-95,-90,-90,-90,-90,-121,-121,-90,-90,182,-100,-101,-102,-103,-90,-90,-121,-121,-106,-107,-110,-111,-54,-52,-52,-53,-55,-57,-56,-60,-61,]),'.':([118,],[150,]),'=':([118,130,151,159,160,198,],[-24,158,-25,184,-24,-26,]),'DESCRIBE':([150,],[179,]),'TITLE':([186,219,233,],[205,-65,247,]),'DO':([263,273,],[-85,280,]),'ELSE':([276,281,],[-72,287,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'add_type':([2,21,22,23,29,],[3,32,33,34,38,]),'add_id':([4,30,31,43,44,69,189,260,],[5,39,40,66,67,103,208,270,]),'go_to_main':([6,],[7,]),'save_function':([7,66,67,],[8,100,101,]),'VARS_PRIME':([8,10,65,224,225,],[9,17,99,239,240,]),'VARS':([8,10,65,224,225,],[10,10,10,10,10,]),'empty':([8,9,10,14,25,39,40,51,52,55,56,57,65,99,107,108,120,136,137,138,146,147,177,178,205,217,223,224,225,230,239,240,256,257,258,265,269,278,281,285,296,],[11,15,11,27,27,47,47,75,78,84,88,92,11,121,75,78,121,167,167,47,88,88,92,92,220,220,238,11,11,244,121,121,220,220,121,244,121,238,288,121,121,]),'FUNCTION_PRIME':([9,],[13,]),'FUNCTION':([9,14,25,],[14,25,25,]),'TIPO_COMP':([12,],[18,]),'TIPO_SIMPLE':([12,16,136,137,237,],[19,28,165,165,250,]),'FUNC_PRIME':([14,25,],[26,36,]),'add_function_type':([28,],[37,]),'TIPO_PRIME':([39,40,138,],[45,48,169,]),'EXPRESSION':([41,58,99,105,120,152,163,183,186,188,199,202,203,233,239,240,243,258,261,269,285,296,],[50,93,124,139,124,180,187,200,204,207,212,215,216,246,124,124,255,124,271,124,124,124,]),'AND_EXP':([41,58,74,99,105,120,152,163,183,186,188,199,202,203,233,239,240,243,258,261,269,285,296,],[51,51,107,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'B_EXP':([41,58,74,77,99,105,109,110,111,112,120,152,163,183,186,188,199,202,203,233,239,240,243,258,261,269,285,296,],[52,52,52,108,52,52,142,143,144,145,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'EXP':([41,58,74,77,99,105,109,110,111,112,120,152,163,183,186,188,199,202,203,233,239,240,243,258,261,269,285,296,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'TERM':([41,58,74,77,99,105,109,110,111,112,113,114,120,152,163,183,186,188,199,202,203,233,239,240,243,258,261,269,285,296,],[56,56,56,56,56,56,56,56,56,56,146,147,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FACTOR':([41,58,74,77,99,105,109,110,111,112,113,114,115,116,120,152,163,183,186,188,199,202,203,233,239,240,243,258,261,269,285,296,],[57,57,57,57,57,57,57,57,57,57,57,57,148,149,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'VAR_CT':([41,58,59,61,74,77,99,105,109,110,111,112,113,114,115,116,120,152,163,183,186,188,199,202,203,233,239,240,243,258,261,269,285,296,],[60,60,94,95,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'fill_go_to_main_quad':([42,],[65,]),'add_operand':([49,62,63,64,118,],[71,96,97,98,71,]),'EXPRESSION_PRIME':([51,107,],[73,140,]),'AND_EXP_PRIME':([52,108,],[76,141,]),'B_EXP_PRIME':([55,],[79,]),'EXP_PRIME':([56,146,147,],[85,175,176,]),'TERM_PRIME':([57,177,178,],[89,195,196,]),'save_ids':([68,70,],[102,104,]),'add_operator':([80,81,82,83,86,87,90,91,133,158,184,],[109,110,111,112,113,114,115,116,162,183,202,]),'BLOCK':([99,120,239,240,258,269,285,296,],[119,154,251,252,268,277,291,298,]),'STATEMENT':([99,120,239,240,258,269,285,296,],[120,120,120,120,120,120,120,120,]),'ASSIGNATION':([99,120,239,240,258,269,285,296,],[122,122,122,122,122,122,122,122,]),'FUNC_CALL':([99,120,183,239,240,258,269,285,296,],[123,123,201,123,123,123,123,123,123,]),'WRITE':([99,120,239,240,258,269,285,296,],[125,125,125,125,125,125,125,125,]),'CONDITION':([99,120,239,240,258,269,285,296,],[126,126,126,126,126,126,126,126,]),'WHILE_STMT':([99,120,239,240,258,269,285,296,],[127,127,127,127,127,127,127,127,]),'FOR_STMT':([99,120,239,240,258,269,285,296,],[128,128,128,128,128,128,128,128,]),'DESCRIBE_STMT':([99,120,239,240,258,269,285,296,],[129,129,129,129,129,129,129,129,]),'VARIABLE':([99,120,131,239,240,258,269,285,296,],[130,130,159,130,130,130,130,130,130,]),'add_current_type':([103,],[138,]),'get_variable':([118,160,],[151,151,]),'check_exact_type_for':([122,212,],[155,226,]),'PARAM':([136,137,],[166,168,]),'aritmetics_operation':([142,143,144,145,148,149,175,176,],[171,172,173,174,177,178,193,194,]),'empty_global_variables_table':([153,],[181,]),'era_quad':([161,],[185,]),'append_jump':([164,],[188,]),'add_parameters':([166,168,],[190,191,]),'pop_operand':([187,207,],[206,222,]),'functions_assignation':([201,],[214,]),'print_quad':([204,246,247,],[217,256,257,]),'WRITE_PRIME':([205,217,256,257,],[218,231,266,267,]),'pop_type':([206,222,],[221,235,]),'save_parameter':([208,270,],[223,278,]),'add_assignation_quad':([213,214,],[227,228,]),'add_assignation_for_quad':([215,],[229,]),'param_quad':([216,255,],[230,265,]),'add_print_operator':([219,],[233,]),'PARAM_PRIME':([223,278,],[236,283,]),'add_final_counter_for':([226,],[241,]),'FUNC_CALL_PRIME':([230,265,],[242,275,]),'check_boolean_expression_for':([241,],[253,]),'go_to_false_quad':([248,259,],[258,269,]),'empty_local_variables_table':([262,290,],[272,294,]),'generate_for_quad':([263,],[273,]),'go_sub_quad':([264,],[274,]),'fill_go_to_false_quad':([276,282,],[281,289,]),'save_function_as_global_variable':([279,],[284,]),'ELSE_STMT':([281,],[286,]),'go_to_quad':([289,],[293,]),'go_to_true_quad':([292,],[296,]),'end_for':([295,],[297,]),'fill_go_to_true_quad':([299,],[300,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table','PROGRAM',17,'p_PROGRAM','parser.py',9),
  ('go_to_main -> <empty>','go_to_main',0,'p_go_to_main','parser.py',14),
  ('empty_global_variables_table -> <empty>','empty_global_variables_table',0,'p_empty_global_variables_table','parser.py',18),
  ('empty_local_variables_table -> <empty>','empty_local_variables_table',0,'p_empty_local_variables_table','parser.py',22),
  ('fill_go_to_main_quad -> <empty>','fill_go_to_main_quad',0,'p_fill_go_to_main_quad','parser.py',26),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',30),
  ('save_ids -> <empty>','save_ids',0,'p_save_ids','parser.py',34),
  ('save_parameter -> <empty>','save_parameter',0,'p_save_parameter','parser.py',38),
  ('save_function -> <empty>','save_function',0,'p_save_function','parser.py',42),
  ('VARS_PRIME -> VARS VARS_PRIME','VARS_PRIME',2,'p_VARS_PRIME','parser.py',47),
  ('VARS_PRIME -> empty','VARS_PRIME',1,'p_VARS_PRIME','parser.py',48),
  ('FUNCTION_PRIME -> FUNCTION FUNC_PRIME','FUNCTION_PRIME',2,'p_FUNCTION_PRIME','parser.py',54),
  ('FUNCTION_PRIME -> empty','FUNCTION_PRIME',1,'p_FUNCTION_PRIME','parser.py',55),
  ('FUNC_PRIME -> FUNCTION FUNC_PRIME','FUNC_PRIME',2,'p_FUNC','parser.py',61),
  ('FUNC_PRIME -> empty','FUNC_PRIME',1,'p_FUNC','parser.py',62),
  ('add_type -> <empty>','add_type',0,'p_add_type','parser.py',67),
  ('add_current_type -> <empty>','add_current_type',0,'p_add_current_type','parser.py',71),
  ('VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',76),
  ('VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',77),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ;','VARS',7,'p_VARS','parser.py',78),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;','VARS',10,'p_VARS','parser.py',79),
  ('TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME','TIPO_PRIME',5,'p_TIPO_PRIME','parser.py',85),
  ('TIPO_PRIME -> empty','TIPO_PRIME',1,'p_TIPO_PRIME','parser.py',86),
  ('get_variable -> <empty>','get_variable',0,'p_get_variable','parser.py',91),
  ('VARIABLE -> ID get_variable','VARIABLE',2,'p_VARIABLE','parser.py',96),
  ('VARIABLE -> ID [ EXPRESSION ]','VARIABLE',4,'p_VARIABLE','parser.py',97),
  ('TIPO_SIMPLE -> INT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',103),
  ('TIPO_SIMPLE -> FLOAT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',104),
  ('TIPO_SIMPLE -> CHAR add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',105),
  ('TIPO_COMP -> DATAFRAME','TIPO_COMP',1,'p_TIPO_COMP','parser.py',111),
  ('add_function_type -> <empty>','add_function_type',0,'p_add_function_type','parser.py',116),
  ('save_function_as_global_variable -> <empty>','save_function_as_global_variable',0,'p_save_function_as_global_variable','parser.py',120),
  ('FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table','FUNCTION',19,'p_FUNCTION','parser.py',125),
  ('FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table','FUNCTION',15,'p_FUNCTION','parser.py',126),
  ('add_parameters -> <empty>','add_parameters',0,'p_add_parameters','parser.py',131),
  ('PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME','PARAM',5,'p_PARAM','parser.py',136),
  ('PARAM -> empty','PARAM',1,'p_PARAM','parser.py',137),
  ('PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME','PARAM_PRIME',6,'p_PARAM_PRIME','parser.py',143),
  ('PARAM_PRIME -> empty','PARAM_PRIME',1,'p_PARAM_PRIME','parser.py',144),
  ('BLOCK -> STATEMENT BLOCK','BLOCK',2,'p_BLOCK','parser.py',150),
  ('BLOCK -> empty','BLOCK',1,'p_BLOCK','parser.py',151),
  ('STATEMENT -> ASSIGNATION','STATEMENT',1,'p_STATEMENT','parser.py',157),
  ('STATEMENT -> FUNC_CALL','STATEMENT',1,'p_STATEMENT','parser.py',158),
  ('STATEMENT -> EXPRESSION ;','STATEMENT',2,'p_STATEMENT','parser.py',159),
  ('STATEMENT -> WRITE ;','STATEMENT',2,'p_STATEMENT','parser.py',160),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',161),
  ('STATEMENT -> WHILE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',162),
  ('STATEMENT -> FOR_STMT','STATEMENT',1,'p_STATEMENT','parser.py',163),
  ('STATEMENT -> DESCRIBE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',164),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','parser.py',169),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','parser.py',173),
  ('add_assignation_quad -> <empty>','add_assignation_quad',0,'p_add_assignation_quad','parser.py',177),
  ('add_assignation_for_quad -> <empty>','add_assignation_for_quad',0,'p_add_assignation_for_quad','parser.py',181),
  ('functions_assignation -> <empty>','functions_assignation',0,'p_functions_assignation','parser.py',185),
  ('ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',190),
  ('ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',191),
  ('ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',192),
  ('era_quad -> <empty>','era_quad',0,'p_era_quad','parser.py',197),
  ('param_quad -> <empty>','param_quad',0,'p_param_quad','parser.py',201),
  ('go_sub_quad -> <empty>','go_sub_quad',0,'p_go_sub_quad','parser.py',205),
  ('FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) ; go_sub_quad','FUNC_CALL',10,'p_FUNC_CALL','parser.py',210),
  ('FUNC_CALL_PRIME -> , EXPRESSION param_quad FUNC_CALL_PRIME','FUNC_CALL_PRIME',4,'p_FUNC_CALL_PRIME','parser.py',216),
  ('FUNC_CALL_PRIME -> empty','FUNC_CALL_PRIME',1,'p_FUNC_CALL_PRIME','parser.py',217),
  ('print_quad -> <empty>','print_quad',0,'p_print_quad','parser.py',222),
  ('add_print_operator -> <empty>','add_print_operator',0,'p_add_print_operator','parser.py',226),
  ('WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )','WRITE',7,'p_WRITE','parser.py',231),
  ('WRITE -> PRINT add_operator ( TITLE WRITE_PRIME )','WRITE',6,'p_WRITE','parser.py',232),
  ('WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME','WRITE_PRIME',5,'p_WRITE_PRIME','parser.py',238),
  ('WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME','WRITE_PRIME',5,'p_WRITE_PRIME','parser.py',239),
  ('WRITE_PRIME -> empty','WRITE_PRIME',1,'p_WRITE_PRIME','parser.py',240),
  ('go_to_false_quad -> <empty>','go_to_false_quad',0,'p_go_to_false_quad','parser.py',245),
  ('fill_go_to_false_quad -> <empty>','fill_go_to_false_quad',0,'p_fill_go_to_false_quad','parser.py',249),
  ('go_to_true_quad -> <empty>','go_to_true_quad',0,'p_go_to_true_quad','parser.py',253),
  ('fill_go_to_true_quad -> <empty>','fill_go_to_true_quad',0,'p_fill_go_to_true_quad','parser.py',257),
  ('go_to_quad -> <empty>','go_to_quad',0,'p_go_to_quad','parser.py',261),
  ('pop_operand -> <empty>','pop_operand',0,'p_pop_operand','parser.py',265),
  ('pop_type -> <empty>','pop_type',0,'p_pop_type','parser.py',269),
  ('append_jump -> <empty>','append_jump',0,'p_append_jump','parser.py',273),
  ('CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT','CONDITION',12,'p_CONDITION','parser.py',278),
  ('ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad','ELSE_STMT',6,'p_ELSE_STMT','parser.py',284),
  ('ELSE_STMT -> empty','ELSE_STMT',1,'p_ELSE_STMT','parser.py',285),
  ('WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad','WHILE_STMT',13,'p_WHILE_STMT','parser.py',291),
  ('check_exact_type_for -> <empty>','check_exact_type_for',0,'p_check_exact_type_for','parser.py',296),
  ('add_final_counter_for -> <empty>','add_final_counter_for',0,'p_add_final_counter_for','parser.py',300),
  ('generate_for_quad -> <empty>','generate_for_quad',0,'p_generate_for_quad','parser.py',304),
  ('check_boolean_expression_for -> <empty>','check_boolean_expression_for',0,'p_check_boolean_expression_for','parser.py',308),
  ('end_for -> <empty>','end_for',0,'p_end_for','parser.py',312),
  ('FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for','FOR_STMT',15,'p_FOR_STMT','parser.py',317),
  ('DESCRIBE_STMT -> ID . DESCRIBE ( )','DESCRIBE_STMT',5,'p_DESCRIBE_STMT','parser.py',323),
  ('aritmetics_operation -> <empty>','aritmetics_operation',0,'p_aritmetics_operation','parser.py',328),
  ('EXPRESSION -> AND_EXP EXPRESSION_PRIME','EXPRESSION',2,'p_EXPRESSION','parser.py',333),
  ('EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME','EXPRESSION_PRIME',3,'p_EXPRESSION_PRIME','parser.py',339),
  ('EXPRESSION_PRIME -> empty','EXPRESSION_PRIME',1,'p_EXPRESSION_PRIME','parser.py',340),
  ('AND_EXP -> B_EXP AND_EXP_PRIME','AND_EXP',2,'p_AND_EXP','parser.py',346),
  ('AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME','AND_EXP_PRIME',3,'p_AND_EXP_PRIME','parser.py',352),
  ('AND_EXP_PRIME -> empty','AND_EXP_PRIME',1,'p_AND_EXP_PRIME','parser.py',353),
  ('B_EXP -> TRUE','B_EXP',1,'p_B_EXP','parser.py',359),
  ('B_EXP -> FALSE','B_EXP',1,'p_B_EXP','parser.py',360),
  ('B_EXP -> EXP B_EXP_PRIME','B_EXP',2,'p_B_EXP','parser.py',361),
  ('B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',367),
  ('B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',368),
  ('B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',369),
  ('B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',370),
  ('B_EXP_PRIME -> empty','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',371),
  ('EXP -> TERM EXP_PRIME','EXP',2,'p_EXP','parser.py',377),
  ('EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation','EXP_PRIME',5,'p_EXP_PRIME','parser.py',383),
  ('EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation','EXP_PRIME',5,'p_EXP_PRIME','parser.py',384),
  ('EXP_PRIME -> empty','EXP_PRIME',1,'p_EXP_PRIME','parser.py',385),
  ('TERM -> FACTOR TERM_PRIME','TERM',2,'p_TERM','parser.py',391),
  ('TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME','TERM_PRIME',5,'p_TERM_PRIME','parser.py',397),
  ('TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME','TERM_PRIME',5,'p_TERM_PRIME','parser.py',398),
  ('TERM_PRIME -> empty','TERM_PRIME',1,'p_TERM_PRIME','parser.py',399),
  ('FACTOR -> ( EXPRESSION )','FACTOR',3,'p_FACTOR','parser.py',405),
  ('FACTOR -> * VAR_CT','FACTOR',2,'p_FACTOR','parser.py',406),
  ('FACTOR -> / VAR_CT','FACTOR',2,'p_FACTOR','parser.py',407),
  ('FACTOR -> VAR_CT','FACTOR',1,'p_FACTOR','parser.py',408),
  ('VAR_CT -> ID add_operand','VAR_CT',2,'p_VAR_CT','parser.py',414),
  ('VAR_CT -> I_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',415),
  ('VAR_CT -> F_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',416),
  ('VAR_CT -> C_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',417),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',426),
]
