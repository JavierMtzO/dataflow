
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND CHAR C_CONST DATAFRAME DESCRIBE DIFFERENT DO ELSE EQUAL FALSE FLOAT FOR FUNC F_CONST ID IF INT I_CONST MAIN OR PRINT PROG RETURN TITLE TO TRUE VAR VOID WHILE\n    PROGRAM : PROG add_type ID add_id ';' save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN '{' VARS_PRIME BLOCK '}'\n    add_id : save_ids : \n    VARS_PRIME : VARS VARS_PRIME\n               | empty\n    \n    FUNCTION_PRIME : FUNCTION FUNC_PRIME\n                   | empty\n    \n    FUNC_PRIME : FUNCTION FUNC_PRIME\n         | empty\n    add_type : add_current_type : \n    VARS : VAR TIPO_COMP ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID add_id TIPO_PRIME ';' save_ids\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' ';'\n         | VAR TIPO_SIMPLE ID '[' EXPRESSION ']' '[' EXPRESSION ']' ';'\n    \n    TIPO_PRIME : ',' ID add_id add_current_type TIPO_PRIME\n               | empty\n    get_variable : \n    VARIABLE : ID get_variable\n             | ID '[' EXPRESSION ']'\n    \n    TIPO_SIMPLE : INT add_type\n                | FLOAT add_type\n                | CHAR add_type\n    \n    TIPO_COMP : DATAFRAME\n    \n    FUNCTION : FUNC TIPO_SIMPLE ID '(' PARAM ')' '{' VARS_PRIME BLOCK RETURN EXPRESSION '}'\n             | FUNC TIPO_SIMPLE ID '(' PARAM ')' '{' VARS_PRIME BLOCK RETURN VAR_CT '}'\n             | FUNC VOID ID '(' PARAM ')' '{' VARS_PRIME BLOCK '}'\n    \n    PARAM : TIPO_SIMPLE ID PARAM_PRIME\n          | empty\n    \n    PARAM_PRIME : ',' TIPO_SIMPLE ID PARAM_PRIME\n                | empty\n    \n    BLOCK : STATEMENT BLOCK\n          | empty\n    \n    STATEMENT : ASSIGNATION\n              | FUNC_CALL\n              | EXPRESSION ';'\n              | WRITE\n              | CONDITION\n              | WHILE_STMT\n              | FOR_STMT\n              | DESCRIBE_STMT\n    add_operator : add_operand : add_assignation_quad : \n    ASSIGNATION : VARIABLE '=' add_operator EXPRESSION ';' add_assignation_quad\n    \n    FUNC_CALL : ID '(' EXPRESSION FUNC_CALL_PRIME ')'\n    \n    FUNC_CALL_PRIME : EXPRESSION FUNC_CALL_PRIME\n                    | empty\n    print_quad : add_print_operator : \n    WRITE : PRINT add_operator '(' EXPRESSION print_quad WRITE_PRIME ')'\n               | PRINT add_operator '(' TITLE WRITE_PRIME ')'\n    \n    WRITE_PRIME : ',' add_print_operator EXPRESSION print_quad WRITE_PRIME\n                | ',' add_print_operator TITLE print_quad WRITE_PRIME\n                | empty\n    \n    CONDITION : IF '(' EXPRESSION ')' '{' BLOCK '}' ELSE_STMT\n    \n    ELSE_STMT : ELSE '{' BLOCK '}'\n              | empty\n    \n    WHILE_STMT : WHILE '(' EXPRESSION ')' '{' BLOCK '}'\n    \n    FOR_STMT : FOR ID '=' EXPRESSION TO EXPRESSION DO '{' BLOCK '}'\n    \n    DESCRIBE_STMT : ID '.' DESCRIBE '(' ')' \n    aritmetics_operation : \n    EXPRESSION : AND_EXP EXPRESSION_PRIME\n    \n    EXPRESSION_PRIME : OR AND_EXP EXPRESSION_PRIME\n                     | empty\n    \n    AND_EXP : B_EXP AND_EXP_PRIME\n    \n    AND_EXP_PRIME : AND B_EXP AND_EXP_PRIME\n                  | empty\n    \n    B_EXP : TRUE\n          | FALSE\n          | EXP B_EXP_PRIME\n    \n    B_EXP_PRIME : '>' add_operator B_EXP aritmetics_operation\n                | '<' add_operator B_EXP aritmetics_operation\n                | DIFFERENT add_operator B_EXP aritmetics_operation\n                | EQUAL add_operator B_EXP aritmetics_operation\n                | empty\n    \n    EXP : TERM EXP_PRIME\n    \n    EXP_PRIME : '+' add_operator TERM EXP_PRIME aritmetics_operation\n              | '-' add_operator TERM EXP_PRIME aritmetics_operation\n              | empty\n    \n    TERM : FACTOR TERM_PRIME\n    \n    TERM_PRIME : '*' add_operator FACTOR aritmetics_operation TERM_PRIME \n                  | '/' add_operator FACTOR aritmetics_operation TERM_PRIME \n                  | empty\n    \n    FACTOR : '(' EXPRESSION ')'\n              | '*' VAR_CT\n              | '/' VAR_CT\n              | VAR_CT\n    \n    VAR_CT : ID add_operand\n           | I_CONST add_operand\n           | F_CONST add_operand\n           | C_CONST add_operand\n    empty :"
    
_lr_action_items = {'PROG':([0,],[2,]),'$end':([1,140,],[0,-1,]),'ID':([2,3,9,10,16,17,18,19,20,21,22,27,28,31,32,33,40,41,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,102,104,105,107,108,109,110,111,116,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,173,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,228,231,232,238,240,241,244,247,248,],[-10,4,-93,-5,-4,29,30,-24,-10,-10,-10,36,37,-21,-22,-23,48,-93,70,-43,-93,-93,-69,-70,-93,-93,-93,48,48,-88,48,-43,-43,-43,100,117,-3,-3,-89,-63,48,-65,-66,48,-68,-71,-42,-42,-42,-42,-76,-77,-42,-42,-80,-81,-42,-42,-84,-86,-87,-90,-91,-92,100,-34,-35,-37,-38,-39,-40,-41,147,-12,-13,48,-14,-93,-93,48,48,48,48,48,48,48,48,-85,48,48,-36,-42,48,48,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,48,48,48,48,197,100,100,-72,-73,-74,-75,-62,-62,-93,-93,48,-15,-78,-79,-82,-83,-46,-61,-44,-50,100,100,48,48,-45,-52,48,-51,-93,-59,-56,-58,100,100,-60,-57,]),';':([4,5,29,30,38,39,44,46,47,48,50,51,52,53,54,55,56,59,61,62,63,70,72,73,74,76,77,79,80,85,86,89,90,93,95,96,97,98,99,100,106,121,125,126,135,153,155,156,157,158,159,160,161,162,163,164,176,177,178,179,180,181,182,183,184,185,191,201,202,203,204,],[-2,6,-2,-2,-93,-93,69,-17,71,-43,-93,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,-2,-89,124,-63,-65,-66,-68,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,-43,142,-11,-93,-93,-85,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,-16,200,-72,-73,-74,-75,-62,-62,-93,-93,208,-78,-79,-82,-83,]),'VAR':([6,7,9,41,69,71,120,122,124,151,152,200,],[-3,11,11,11,-3,-3,-12,-13,-14,11,11,-15,]),'FUNC':([6,7,8,9,10,13,16,24,69,71,120,122,124,200,218,234,235,],[-3,-93,15,-93,-5,15,-4,15,-3,-3,-12,-13,-14,-15,-27,-25,-26,]),'VOID':([6,7,8,9,10,12,13,14,15,16,24,25,26,35,69,71,120,122,124,200,218,234,235,],[-3,-93,-93,-93,-5,23,-93,-7,28,-4,-93,-6,-9,-8,-3,-3,-12,-13,-14,-15,-27,-25,-26,]),'PRINT':([9,10,16,41,64,69,71,102,104,105,107,108,109,110,111,120,122,124,142,151,152,174,175,200,206,207,208,213,214,219,221,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,-93,113,-3,-3,113,-34,-35,-37,-38,-39,-40,-41,-12,-13,-14,-36,-93,-93,113,113,-15,-46,-61,-44,113,113,-45,-52,-51,-93,-59,-56,-58,113,113,-60,-57,]),'IF':([9,10,16,41,64,69,71,102,104,105,107,108,109,110,111,120,122,124,142,151,152,174,175,200,206,207,208,213,214,219,221,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,-93,114,-3,-3,114,-34,-35,-37,-38,-39,-40,-41,-12,-13,-14,-36,-93,-93,114,114,-15,-46,-61,-44,114,114,-45,-52,-51,-93,-59,-56,-58,114,114,-60,-57,]),'WHILE':([9,10,16,41,64,69,71,102,104,105,107,108,109,110,111,120,122,124,142,151,152,174,175,200,206,207,208,213,214,219,221,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,-93,115,-3,-3,115,-34,-35,-37,-38,-39,-40,-41,-12,-13,-14,-36,-93,-93,115,115,-15,-46,-61,-44,115,115,-45,-52,-51,-93,-59,-56,-58,115,115,-60,-57,]),'FOR':([9,10,16,41,64,69,71,102,104,105,107,108,109,110,111,120,122,124,142,151,152,174,175,200,206,207,208,213,214,219,221,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,-93,116,-3,-3,116,-34,-35,-37,-38,-39,-40,-41,-12,-13,-14,-36,-93,-93,116,116,-15,-46,-61,-44,116,116,-45,-52,-51,-93,-59,-56,-58,116,116,-60,-57,]),'TRUE':([9,10,16,40,41,48,50,51,52,53,54,55,56,57,59,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,89,90,93,95,96,97,98,99,102,104,105,107,108,109,110,111,120,122,123,124,125,126,127,128,129,130,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,52,-93,-43,-93,-93,-69,-70,-93,-93,-93,52,-88,-43,-43,-43,52,-3,-3,-89,-63,52,-65,-66,52,-68,-71,-42,-42,-42,-42,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,52,-34,-35,-37,-38,-39,-40,-41,-12,-13,52,-14,-93,-93,52,52,52,52,-85,52,52,-36,-42,52,52,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,52,52,52,52,52,52,-72,-73,-74,-75,-62,-62,-93,-93,52,-15,-78,-79,-82,-83,-46,-61,-44,-50,52,52,52,52,-45,-52,52,-51,-93,-59,-56,-58,52,52,-60,-57,]),'FALSE':([9,10,16,40,41,48,50,51,52,53,54,55,56,57,59,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,89,90,93,95,96,97,98,99,102,104,105,107,108,109,110,111,120,122,123,124,125,126,127,128,129,130,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,53,-93,-43,-93,-93,-69,-70,-93,-93,-93,53,-88,-43,-43,-43,53,-3,-3,-89,-63,53,-65,-66,53,-68,-71,-42,-42,-42,-42,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,53,-34,-35,-37,-38,-39,-40,-41,-12,-13,53,-14,-93,-93,53,53,53,53,-85,53,53,-36,-42,53,53,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,53,53,53,53,53,53,-72,-73,-74,-75,-62,-62,-93,-93,53,-15,-78,-79,-82,-83,-46,-61,-44,-50,53,53,53,53,-45,-52,53,-51,-93,-59,-56,-58,53,53,-60,-57,]),'(':([9,10,16,36,37,40,41,48,50,51,52,53,54,55,56,57,59,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,104,105,107,108,109,110,111,113,114,115,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,142,143,144,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,166,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,42,43,57,-93,-43,-93,-93,-69,-70,-93,-93,-93,57,-88,-43,-43,-43,57,-3,-3,-89,-63,57,-65,-66,57,-68,-71,-42,-42,-42,-42,-76,-77,-42,-42,-80,-81,-42,-42,-84,-86,-87,-90,-91,-92,136,57,-34,-35,-37,-38,-39,-40,-41,-42,145,146,-12,-13,57,-14,-93,-93,57,57,57,57,57,57,57,57,-85,57,57,-36,-42,169,57,57,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,57,189,57,57,57,57,57,-72,-73,-74,-75,-62,-62,-93,-93,57,-15,-78,-79,-82,-83,-46,-61,-44,-50,57,57,57,57,-45,-52,57,-51,-93,-59,-56,-58,57,57,-60,-57,]),'*':([9,10,16,40,41,48,50,51,52,53,54,55,56,57,59,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,104,105,107,108,109,110,111,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,227,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,58,-93,-43,-93,-93,-69,-70,-93,-93,91,58,-88,-43,-43,-43,58,-3,-3,-89,-63,58,-65,-66,58,-68,-71,-42,-42,-42,-42,-76,-77,-42,-42,-80,-81,-42,-42,-84,-86,-87,-90,-91,-92,-43,58,-34,-35,-37,-38,-39,-40,-41,-12,-13,58,-14,-93,-93,58,58,58,58,58,58,58,58,-85,58,58,-36,-42,58,58,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,58,58,58,58,58,58,-72,-73,-74,-75,-62,-62,91,91,58,-15,-78,-79,-82,-83,-46,-61,-44,-50,58,58,58,58,-45,-52,58,-88,-51,-93,-59,-56,-58,58,58,-60,-57,]),'/':([9,10,16,40,41,48,50,51,52,53,54,55,56,57,59,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,104,105,107,108,109,110,111,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,227,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,60,-93,-43,-93,-93,-69,-70,-93,-93,92,60,-88,-43,-43,-43,60,-3,-3,-89,-63,60,-65,-66,60,-68,-71,-42,-42,-42,-42,-76,-77,-42,-42,-80,-81,-42,-42,-84,-86,-87,-90,-91,-92,-43,60,-34,-35,-37,-38,-39,-40,-41,-12,-13,60,-14,-93,-93,60,60,60,60,60,60,60,60,-85,60,60,-36,-42,60,60,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,60,60,60,60,60,60,-72,-73,-74,-75,-62,-62,92,92,60,-15,-78,-79,-82,-83,-46,-61,-44,-50,60,60,60,60,-45,-52,60,-88,-51,-93,-59,-56,-58,60,60,-60,-57,]),'I_CONST':([9,10,16,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,102,104,105,107,108,109,110,111,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,61,-93,-43,-93,-93,-69,-70,-93,-93,-93,61,61,-88,61,-43,-43,-43,61,-3,-3,-89,-63,61,-65,-66,61,-68,-71,-42,-42,-42,-42,-76,-77,-42,-42,-80,-81,-42,-42,-84,-86,-87,-90,-91,-92,61,-34,-35,-37,-38,-39,-40,-41,-12,-13,61,-14,-93,-93,61,61,61,61,61,61,61,61,-85,61,61,-36,-42,61,61,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,61,61,61,61,61,61,-72,-73,-74,-75,-62,-62,-93,-93,61,-15,-78,-79,-82,-83,-46,-61,-44,-50,61,61,61,61,-45,-52,61,-51,-93,-59,-56,-58,61,61,-60,-57,]),'F_CONST':([9,10,16,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,102,104,105,107,108,109,110,111,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,62,-93,-43,-93,-93,-69,-70,-93,-93,-93,62,62,-88,62,-43,-43,-43,62,-3,-3,-89,-63,62,-65,-66,62,-68,-71,-42,-42,-42,-42,-76,-77,-42,-42,-80,-81,-42,-42,-84,-86,-87,-90,-91,-92,62,-34,-35,-37,-38,-39,-40,-41,-12,-13,62,-14,-93,-93,62,62,62,62,62,62,62,62,-85,62,62,-36,-42,62,62,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,62,62,62,62,62,62,-72,-73,-74,-75,-62,-62,-93,-93,62,-15,-78,-79,-82,-83,-46,-61,-44,-50,62,62,62,62,-45,-52,62,-51,-93,-59,-56,-58,62,62,-60,-57,]),'C_CONST':([9,10,16,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,102,104,105,107,108,109,110,111,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,142,143,145,146,151,152,155,156,157,158,159,160,161,162,163,164,165,168,169,172,174,175,178,179,180,181,182,183,184,185,186,200,201,202,203,204,206,207,208,211,213,214,215,217,219,221,222,228,231,232,238,240,241,244,247,248,],[-93,-5,-4,63,-93,-43,-93,-93,-69,-70,-93,-93,-93,63,63,-88,63,-43,-43,-43,63,-3,-3,-89,-63,63,-65,-66,63,-68,-71,-42,-42,-42,-42,-76,-77,-42,-42,-80,-81,-42,-42,-84,-86,-87,-90,-91,-92,63,-34,-35,-37,-38,-39,-40,-41,-12,-13,63,-14,-93,-93,63,63,63,63,63,63,63,63,-85,63,63,-36,-42,63,63,-93,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,63,63,63,63,63,63,-72,-73,-74,-75,-62,-62,-93,-93,63,-15,-78,-79,-82,-83,-46,-61,-44,-50,63,63,63,63,-45,-52,63,-51,-93,-59,-56,-58,63,63,-60,-57,]),'}':([9,10,16,41,48,50,51,52,53,54,55,56,59,61,62,63,64,69,71,72,74,76,77,79,80,85,86,89,90,93,95,96,97,98,99,101,102,103,104,105,107,108,109,110,111,120,122,124,125,126,135,141,142,152,155,156,157,158,159,160,161,162,163,164,175,178,179,180,181,182,183,184,185,199,200,201,202,203,204,206,207,208,213,214,219,221,223,224,226,227,228,231,232,238,240,241,244,245,246,247,248,],[-93,-5,-4,-93,-43,-93,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,-93,-3,-3,-89,-63,-65,-66,-68,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,140,-93,-33,-34,-35,-37,-38,-39,-40,-41,-12,-13,-14,-93,-93,-85,-32,-36,-93,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,-93,-72,-73,-74,-75,-62,-62,-93,-93,218,-15,-78,-79,-82,-83,-46,-61,-44,-93,-93,-45,-52,231,232,234,235,-51,-93,-59,-56,-58,-93,-93,247,248,-60,-57,]),'RETURN':([9,10,16,69,71,102,103,104,105,107,108,109,110,111,120,122,124,141,142,151,174,198,200,206,207,208,219,221,228,231,232,238,240,247,248,],[-93,-5,-4,-3,-3,-93,-33,-34,-35,-37,-38,-39,-40,-41,-12,-13,-14,-32,-36,-93,-93,217,-15,-46,-61,-44,-45,-52,-51,-93,-59,-56,-58,-60,-57,]),'DATAFRAME':([11,],[19,]),'INT':([11,15,42,43,149,],[20,20,20,20,20,]),'FLOAT':([11,15,42,43,149,],[21,21,21,21,21,]),'CHAR':([11,15,42,43,149,],[22,22,22,22,22,]),'MAIN':([23,],[34,]),',':([29,30,38,39,48,50,51,52,53,54,55,56,59,61,62,63,70,72,74,76,77,79,80,85,86,89,90,93,95,96,97,98,99,117,121,125,126,135,153,155,156,157,158,159,160,161,162,163,164,178,179,180,181,182,183,184,185,192,193,197,201,202,203,204,209,229,230,236,237,],[-2,-2,45,45,-43,-93,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,-2,-89,-63,-65,-66,-68,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,149,-11,-93,-93,-85,45,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,-72,-73,-74,-75,-62,-62,-93,-93,-49,211,149,-78,-79,-82,-83,211,-49,-49,211,211,]),'[':([30,73,100,],[40,123,139,]),'{':([34,118,119,194,195,233,239,],[41,151,152,213,214,241,244,]),')':([42,43,48,50,51,52,53,54,55,56,59,61,62,63,66,67,68,72,74,76,77,79,80,85,86,89,90,93,94,95,96,97,98,99,117,125,126,135,148,150,155,156,157,158,159,160,161,162,163,164,165,170,171,178,179,180,181,182,183,184,185,186,187,188,189,192,193,197,201,202,203,204,205,209,210,212,216,220,229,230,236,237,242,243,],[-93,-93,-43,-93,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,118,-29,119,-89,-63,-65,-66,-68,-71,-76,-77,-80,-81,-84,135,-86,-87,-90,-91,-92,-93,-93,-93,-85,-28,-31,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,-93,194,195,-72,-73,-74,-75,-62,-62,-93,-93,-93,206,-48,207,-49,-93,-93,-78,-79,-82,-83,-47,-93,221,-55,-30,228,-49,-49,-93,-93,-53,-54,]),'+':([48,55,56,59,61,62,63,72,90,93,95,96,97,98,99,100,135,161,162,163,164,184,185,203,204,227,],[-43,87,-93,-88,-43,-43,-43,-89,-81,-84,-86,-87,-90,-91,-92,-43,-85,87,87,-62,-62,-93,-93,-82,-83,-88,]),'-':([48,55,56,59,61,62,63,72,90,93,95,96,97,98,99,100,135,161,162,163,164,184,185,203,204,227,],[-43,88,-93,-88,-43,-43,-43,-89,-81,-84,-86,-87,-90,-91,-92,-43,-85,88,88,-62,-62,-93,-93,-82,-83,-88,]),'>':([48,54,55,56,59,61,62,63,72,86,89,90,93,95,96,97,98,99,100,135,161,162,163,164,182,183,184,185,201,202,203,204,227,],[-43,81,-93,-93,-88,-43,-43,-43,-89,-77,-80,-81,-84,-86,-87,-90,-91,-92,-43,-85,-93,-93,-62,-62,-62,-62,-93,-93,-78,-79,-82,-83,-88,]),'<':([48,54,55,56,59,61,62,63,72,86,89,90,93,95,96,97,98,99,100,135,161,162,163,164,182,183,184,185,201,202,203,204,227,],[-43,82,-93,-93,-88,-43,-43,-43,-89,-77,-80,-81,-84,-86,-87,-90,-91,-92,-43,-85,-93,-93,-62,-62,-62,-62,-93,-93,-78,-79,-82,-83,-88,]),'DIFFERENT':([48,54,55,56,59,61,62,63,72,86,89,90,93,95,96,97,98,99,100,135,161,162,163,164,182,183,184,185,201,202,203,204,227,],[-43,83,-93,-93,-88,-43,-43,-43,-89,-77,-80,-81,-84,-86,-87,-90,-91,-92,-43,-85,-93,-93,-62,-62,-62,-62,-93,-93,-78,-79,-82,-83,-88,]),'EQUAL':([48,54,55,56,59,61,62,63,72,86,89,90,93,95,96,97,98,99,100,135,161,162,163,164,182,183,184,185,201,202,203,204,227,],[-43,84,-93,-93,-88,-43,-43,-43,-89,-77,-80,-81,-84,-86,-87,-90,-91,-92,-43,-85,-93,-93,-62,-62,-62,-62,-93,-93,-78,-79,-82,-83,-88,]),'AND':([48,51,52,53,54,55,56,59,61,62,63,72,80,85,86,89,90,93,95,96,97,98,99,100,126,135,157,158,159,160,161,162,163,164,178,179,180,181,182,183,184,185,201,202,203,204,227,],[-43,78,-69,-70,-93,-93,-93,-88,-43,-43,-43,-89,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,-43,78,-85,-62,-62,-62,-62,-93,-93,-62,-62,-72,-73,-74,-75,-62,-62,-93,-93,-78,-79,-82,-83,-88,]),'OR':([48,50,51,52,53,54,55,56,59,61,62,63,72,77,79,80,85,86,89,90,93,95,96,97,98,99,100,125,126,135,156,157,158,159,160,161,162,163,164,178,179,180,181,182,183,184,185,201,202,203,204,227,],[-43,75,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,-89,-66,-68,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,-43,75,-93,-85,-67,-62,-62,-62,-62,-93,-93,-62,-62,-72,-73,-74,-75,-62,-62,-93,-93,-78,-79,-82,-83,-88,]),']':([48,49,50,51,52,53,54,55,56,59,61,62,63,72,74,76,77,79,80,85,86,89,90,93,95,96,97,98,99,125,126,135,154,155,156,157,158,159,160,161,162,163,164,167,178,179,180,181,182,183,184,185,201,202,203,204,],[-43,73,-93,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,-89,-63,-65,-66,-68,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,-93,-93,-85,177,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,190,-72,-73,-74,-75,-62,-62,-93,-93,-78,-79,-82,-83,]),'TO':([48,50,51,52,53,54,55,56,59,61,62,63,72,74,76,77,79,80,85,86,89,90,93,95,96,97,98,99,125,126,135,155,156,157,158,159,160,161,162,163,164,178,179,180,181,182,183,184,185,196,201,202,203,204,],[-43,-93,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,-89,-63,-65,-66,-68,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,-93,-93,-85,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,-72,-73,-74,-75,-62,-62,-93,-93,215,-78,-79,-82,-83,]),'DO':([48,50,51,52,53,54,55,56,59,61,62,63,72,74,76,77,79,80,85,86,89,90,93,95,96,97,98,99,125,126,135,155,156,157,158,159,160,161,162,163,164,178,179,180,181,182,183,184,185,201,202,203,204,225,],[-43,-93,-93,-69,-70,-93,-93,-93,-88,-43,-43,-43,-89,-63,-65,-66,-68,-71,-76,-77,-80,-81,-84,-86,-87,-90,-91,-92,-93,-93,-85,-64,-67,-62,-62,-62,-62,-93,-93,-62,-62,-72,-73,-74,-75,-62,-62,-93,-93,-78,-79,-82,-83,233,]),'.':([100,],[137,]),'=':([100,112,138,147,190,],[-18,143,-19,172,-20,]),'DESCRIBE':([137,],[166,]),'TITLE':([169,211,222,],[193,-50,230,]),'ELSE':([231,],[239,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'add_type':([2,20,21,22,],[3,31,32,33,]),'add_id':([4,29,30,70,],[5,38,39,121,]),'save_ids':([6,69,71,],[7,120,122,]),'VARS_PRIME':([7,9,41,151,152,],[8,16,64,174,175,]),'VARS':([7,9,41,151,152,],[9,9,9,9,9,]),'empty':([7,8,9,13,24,38,39,41,42,43,50,51,54,55,56,64,102,117,125,126,151,152,153,161,162,165,174,175,184,185,186,193,197,209,213,214,231,236,237,241,244,],[10,14,10,26,26,46,46,10,67,67,76,79,85,89,93,103,103,150,76,79,10,10,46,89,89,188,103,103,93,93,188,212,150,212,103,103,240,212,212,103,103,]),'FUNCTION_PRIME':([8,],[12,]),'FUNCTION':([8,13,24,],[13,24,24,]),'TIPO_COMP':([11,],[17,]),'TIPO_SIMPLE':([11,15,42,43,149,],[18,27,65,65,173,]),'FUNC_PRIME':([13,24,],[25,35,]),'TIPO_PRIME':([38,39,153,],[44,47,176,]),'EXPRESSION':([40,57,64,102,123,136,139,145,146,165,168,169,172,174,175,186,213,214,215,217,222,241,244,],[49,94,106,106,154,165,167,170,171,186,191,192,196,106,106,186,106,106,225,226,229,106,106,]),'AND_EXP':([40,57,64,75,102,123,136,139,145,146,165,168,169,172,174,175,186,213,214,215,217,222,241,244,],[50,50,50,125,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'B_EXP':([40,57,64,75,78,102,123,127,128,129,130,136,139,145,146,165,168,169,172,174,175,186,213,214,215,217,222,241,244,],[51,51,51,51,126,51,51,157,158,159,160,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'EXP':([40,57,64,75,78,102,123,127,128,129,130,136,139,145,146,165,168,169,172,174,175,186,213,214,215,217,222,241,244,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TERM':([40,57,64,75,78,102,123,127,128,129,130,131,132,136,139,145,146,165,168,169,172,174,175,186,213,214,215,217,222,241,244,],[55,55,55,55,55,55,55,55,55,55,55,161,162,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FACTOR':([40,57,64,75,78,102,123,127,128,129,130,131,132,133,134,136,139,145,146,165,168,169,172,174,175,186,213,214,215,217,222,241,244,],[56,56,56,56,56,56,56,56,56,56,56,56,56,163,164,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'VAR_CT':([40,57,58,60,64,75,78,102,123,127,128,129,130,131,132,133,134,136,139,145,146,165,168,169,172,174,175,186,213,214,215,217,222,241,244,],[59,59,95,96,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,227,59,59,59,]),'PARAM':([42,43,],[66,68,]),'add_operand':([48,61,62,63,100,],[72,97,98,99,72,]),'EXPRESSION_PRIME':([50,125,],[74,155,]),'AND_EXP_PRIME':([51,126,],[77,156,]),'B_EXP_PRIME':([54,],[80,]),'EXP_PRIME':([55,161,162,],[86,182,183,]),'TERM_PRIME':([56,184,185,],[90,203,204,]),'BLOCK':([64,102,174,175,213,214,241,244,],[101,141,198,199,223,224,245,246,]),'STATEMENT':([64,102,174,175,213,214,241,244,],[102,102,102,102,102,102,102,102,]),'ASSIGNATION':([64,102,174,175,213,214,241,244,],[104,104,104,104,104,104,104,104,]),'FUNC_CALL':([64,102,174,175,213,214,241,244,],[105,105,105,105,105,105,105,105,]),'WRITE':([64,102,174,175,213,214,241,244,],[107,107,107,107,107,107,107,107,]),'CONDITION':([64,102,174,175,213,214,241,244,],[108,108,108,108,108,108,108,108,]),'WHILE_STMT':([64,102,174,175,213,214,241,244,],[109,109,109,109,109,109,109,109,]),'FOR_STMT':([64,102,174,175,213,214,241,244,],[110,110,110,110,110,110,110,110,]),'DESCRIBE_STMT':([64,102,174,175,213,214,241,244,],[111,111,111,111,111,111,111,111,]),'VARIABLE':([64,102,174,175,213,214,241,244,],[112,112,112,112,112,112,112,112,]),'add_operator':([81,82,83,84,87,88,91,92,113,143,],[127,128,129,130,131,132,133,134,144,168,]),'get_variable':([100,],[138,]),'PARAM_PRIME':([117,197,],[148,216,]),'add_current_type':([121,],[153,]),'aritmetics_operation':([157,158,159,160,163,164,182,183,],[178,179,180,181,184,185,201,202,]),'FUNC_CALL_PRIME':([165,186,],[187,205,]),'print_quad':([192,229,230,],[209,236,237,]),'WRITE_PRIME':([193,209,236,237,],[210,220,242,243,]),'add_assignation_quad':([208,],[219,]),'add_print_operator':([211,],[222,]),'ELSE_STMT':([231,],[238,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK }','PROGRAM',14,'p_PROGRAM','parser.py',9),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',14),
  ('save_ids -> <empty>','save_ids',0,'p_save_ids','parser.py',18),
  ('VARS_PRIME -> VARS VARS_PRIME','VARS_PRIME',2,'p_VARS_PRIME','parser.py',23),
  ('VARS_PRIME -> empty','VARS_PRIME',1,'p_VARS_PRIME','parser.py',24),
  ('FUNCTION_PRIME -> FUNCTION FUNC_PRIME','FUNCTION_PRIME',2,'p_FUNCTION_PRIME','parser.py',30),
  ('FUNCTION_PRIME -> empty','FUNCTION_PRIME',1,'p_FUNCTION_PRIME','parser.py',31),
  ('FUNC_PRIME -> FUNCTION FUNC_PRIME','FUNC_PRIME',2,'p_FUNC','parser.py',37),
  ('FUNC_PRIME -> empty','FUNC_PRIME',1,'p_FUNC','parser.py',38),
  ('add_type -> <empty>','add_type',0,'p_add_type','parser.py',43),
  ('add_current_type -> <empty>','add_current_type',0,'p_add_current_type','parser.py',47),
  ('VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',52),
  ('VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids','VARS',7,'p_VARS','parser.py',53),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ;','VARS',7,'p_VARS','parser.py',54),
  ('VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;','VARS',10,'p_VARS','parser.py',55),
  ('TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME','TIPO_PRIME',5,'p_TIPO_PRIME','parser.py',61),
  ('TIPO_PRIME -> empty','TIPO_PRIME',1,'p_TIPO_PRIME','parser.py',62),
  ('get_variable -> <empty>','get_variable',0,'p_get_variable','parser.py',67),
  ('VARIABLE -> ID get_variable','VARIABLE',2,'p_VARIABLE','parser.py',72),
  ('VARIABLE -> ID [ EXPRESSION ]','VARIABLE',4,'p_VARIABLE','parser.py',73),
  ('TIPO_SIMPLE -> INT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',79),
  ('TIPO_SIMPLE -> FLOAT add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',80),
  ('TIPO_SIMPLE -> CHAR add_type','TIPO_SIMPLE',2,'p_TIPO_SIMPLE','parser.py',81),
  ('TIPO_COMP -> DATAFRAME','TIPO_COMP',1,'p_TIPO_COMP','parser.py',87),
  ('FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }','FUNCTION',12,'p_FUNCTION','parser.py',93),
  ('FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }','FUNCTION',12,'p_FUNCTION','parser.py',94),
  ('FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }','FUNCTION',10,'p_FUNCTION','parser.py',95),
  ('PARAM -> TIPO_SIMPLE ID PARAM_PRIME','PARAM',3,'p_PARAM','parser.py',101),
  ('PARAM -> empty','PARAM',1,'p_PARAM','parser.py',102),
  ('PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME','PARAM_PRIME',4,'p_PARAM_PRIME','parser.py',108),
  ('PARAM_PRIME -> empty','PARAM_PRIME',1,'p_PARAM_PRIME','parser.py',109),
  ('BLOCK -> STATEMENT BLOCK','BLOCK',2,'p_BLOCK','parser.py',115),
  ('BLOCK -> empty','BLOCK',1,'p_BLOCK','parser.py',116),
  ('STATEMENT -> ASSIGNATION','STATEMENT',1,'p_STATEMENT','parser.py',122),
  ('STATEMENT -> FUNC_CALL','STATEMENT',1,'p_STATEMENT','parser.py',123),
  ('STATEMENT -> EXPRESSION ;','STATEMENT',2,'p_STATEMENT','parser.py',124),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',125),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',126),
  ('STATEMENT -> WHILE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',127),
  ('STATEMENT -> FOR_STMT','STATEMENT',1,'p_STATEMENT','parser.py',128),
  ('STATEMENT -> DESCRIBE_STMT','STATEMENT',1,'p_STATEMENT','parser.py',129),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','parser.py',134),
  ('add_operand -> <empty>','add_operand',0,'p_add_operand','parser.py',138),
  ('add_assignation_quad -> <empty>','add_assignation_quad',0,'p_add_assignation_quad','parser.py',142),
  ('ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad','ASSIGNATION',6,'p_ASSIGNATION','parser.py',147),
  ('FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME )','FUNC_CALL',5,'p_FUNC_CALL','parser.py',153),
  ('FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME','FUNC_CALL_PRIME',2,'p_FUNC_CALL_PRIME','parser.py',159),
  ('FUNC_CALL_PRIME -> empty','FUNC_CALL_PRIME',1,'p_FUNC_CALL_PRIME','parser.py',160),
  ('print_quad -> <empty>','print_quad',0,'p_print_quad','parser.py',165),
  ('add_print_operator -> <empty>','add_print_operator',0,'p_add_print_operator','parser.py',169),
  ('WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )','WRITE',7,'p_WRITE','parser.py',174),
  ('WRITE -> PRINT add_operator ( TITLE WRITE_PRIME )','WRITE',6,'p_WRITE','parser.py',175),
  ('WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME','WRITE_PRIME',5,'p_WRITE_PRIME','parser.py',181),
  ('WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME','WRITE_PRIME',5,'p_WRITE_PRIME','parser.py',182),
  ('WRITE_PRIME -> empty','WRITE_PRIME',1,'p_WRITE_PRIME','parser.py',183),
  ('CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT','CONDITION',8,'p_CONDITION','parser.py',189),
  ('ELSE_STMT -> ELSE { BLOCK }','ELSE_STMT',4,'p_ELSE_STMT','parser.py',195),
  ('ELSE_STMT -> empty','ELSE_STMT',1,'p_ELSE_STMT','parser.py',196),
  ('WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK }','WHILE_STMT',7,'p_WHILE_STMT','parser.py',202),
  ('FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }','FOR_STMT',10,'p_FOR_STMT','parser.py',208),
  ('DESCRIBE_STMT -> ID . DESCRIBE ( )','DESCRIBE_STMT',5,'p_DESCRIBE_STMT','parser.py',214),
  ('aritmetics_operation -> <empty>','aritmetics_operation',0,'p_aritmetics_operation','parser.py',219),
  ('EXPRESSION -> AND_EXP EXPRESSION_PRIME','EXPRESSION',2,'p_EXPRESSION','parser.py',224),
  ('EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME','EXPRESSION_PRIME',3,'p_EXPRESSION_PRIME','parser.py',230),
  ('EXPRESSION_PRIME -> empty','EXPRESSION_PRIME',1,'p_EXPRESSION_PRIME','parser.py',231),
  ('AND_EXP -> B_EXP AND_EXP_PRIME','AND_EXP',2,'p_AND_EXP','parser.py',237),
  ('AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME','AND_EXP_PRIME',3,'p_AND_EXP_PRIME','parser.py',243),
  ('AND_EXP_PRIME -> empty','AND_EXP_PRIME',1,'p_AND_EXP_PRIME','parser.py',244),
  ('B_EXP -> TRUE','B_EXP',1,'p_B_EXP','parser.py',250),
  ('B_EXP -> FALSE','B_EXP',1,'p_B_EXP','parser.py',251),
  ('B_EXP -> EXP B_EXP_PRIME','B_EXP',2,'p_B_EXP','parser.py',252),
  ('B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',258),
  ('B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',259),
  ('B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',260),
  ('B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation','B_EXP_PRIME',4,'p_B_EXP_PRIME','parser.py',261),
  ('B_EXP_PRIME -> empty','B_EXP_PRIME',1,'p_B_EXP_PRIME','parser.py',262),
  ('EXP -> TERM EXP_PRIME','EXP',2,'p_EXP','parser.py',268),
  ('EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation','EXP_PRIME',5,'p_EXP_PRIME','parser.py',274),
  ('EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation','EXP_PRIME',5,'p_EXP_PRIME','parser.py',275),
  ('EXP_PRIME -> empty','EXP_PRIME',1,'p_EXP_PRIME','parser.py',276),
  ('TERM -> FACTOR TERM_PRIME','TERM',2,'p_TERM','parser.py',282),
  ('TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME','TERM_PRIME',5,'p_TERM_PRIME','parser.py',288),
  ('TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME','TERM_PRIME',5,'p_TERM_PRIME','parser.py',289),
  ('TERM_PRIME -> empty','TERM_PRIME',1,'p_TERM_PRIME','parser.py',290),
  ('FACTOR -> ( EXPRESSION )','FACTOR',3,'p_FACTOR','parser.py',296),
  ('FACTOR -> * VAR_CT','FACTOR',2,'p_FACTOR','parser.py',297),
  ('FACTOR -> / VAR_CT','FACTOR',2,'p_FACTOR','parser.py',298),
  ('FACTOR -> VAR_CT','FACTOR',1,'p_FACTOR','parser.py',299),
  ('VAR_CT -> ID add_operand','VAR_CT',2,'p_VAR_CT','parser.py',305),
  ('VAR_CT -> I_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',306),
  ('VAR_CT -> F_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',307),
  ('VAR_CT -> C_CONST add_operand','VAR_CT',2,'p_VAR_CT','parser.py',308),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',317),
]
