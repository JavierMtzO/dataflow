Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux
Rule 2     print_aux -> <empty>
Rule 3     add_id -> <empty>
Rule 4     save_ids -> <empty>
Rule 5     VARS_PRIME -> VARS VARS_PRIME
Rule 6     VARS_PRIME -> empty
Rule 7     FUNCTION_PRIME -> FUNCTION FUNC_PRIME
Rule 8     FUNCTION_PRIME -> empty
Rule 9     FUNC_PRIME -> FUNCTION FUNC_PRIME
Rule 10    FUNC_PRIME -> empty
Rule 11    add_type -> <empty>
Rule 12    add_current_type -> <empty>
Rule 13    VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
Rule 14    VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
Rule 15    VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
Rule 16    VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
Rule 17    TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME
Rule 18    TIPO_PRIME -> empty
Rule 19    get_variable -> <empty>
Rule 20    VARIABLE -> ID get_variable
Rule 21    VARIABLE -> ID [ EXPRESSION ]
Rule 22    TIPO_SIMPLE -> INT add_type
Rule 23    TIPO_SIMPLE -> FLOAT add_type
Rule 24    TIPO_SIMPLE -> CHAR add_type
Rule 25    TIPO_COMP -> DATAFRAME
Rule 26    FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
Rule 27    FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
Rule 28    FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }
Rule 29    PARAM -> TIPO_SIMPLE ID PARAM_PRIME
Rule 30    PARAM -> empty
Rule 31    PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME
Rule 32    PARAM_PRIME -> empty
Rule 33    BLOCK -> STATEMENT BLOCK
Rule 34    BLOCK -> empty
Rule 35    STATEMENT -> ASSIGNATION
Rule 36    STATEMENT -> FUNC_CALL
Rule 37    STATEMENT -> EXPRESSION ;
Rule 38    STATEMENT -> WRITE ;
Rule 39    STATEMENT -> CONDITION
Rule 40    STATEMENT -> WHILE_STMT
Rule 41    STATEMENT -> FOR_STMT
Rule 42    STATEMENT -> DESCRIBE_STMT
Rule 43    add_operator -> <empty>
Rule 44    add_operand -> <empty>
Rule 45    add_assignation_quad -> <empty>
Rule 46    add_assignation_for_quad -> <empty>
Rule 47    ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad
Rule 48    ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
Rule 49    FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME )
Rule 50    FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME
Rule 51    FUNC_CALL_PRIME -> empty
Rule 52    print_quad -> <empty>
Rule 53    add_print_operator -> <empty>
Rule 54    WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
Rule 55    WRITE -> PRINT add_operator ( TITLE WRITE_PRIME )
Rule 56    WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME
Rule 57    WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME
Rule 58    WRITE_PRIME -> empty
Rule 59    go_to_false_quad -> <empty>
Rule 60    fill_go_to_false_quad -> <empty>
Rule 61    go_to_true_quad -> <empty>
Rule 62    fill_go_to_true_quad -> <empty>
Rule 63    go_to_quad -> <empty>
Rule 64    pop_operand -> <empty>
Rule 65    pop_type -> <empty>
Rule 66    append_jump -> <empty>
Rule 67    CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
Rule 68    ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad
Rule 69    ELSE_STMT -> empty
Rule 70    WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
Rule 71    check_exact_type_for -> <empty>
Rule 72    add_final_counter_for -> <empty>
Rule 73    generate_for_quad -> <empty>
Rule 74    check_boolean_expression_for -> <empty>
Rule 75    end_for -> <empty>
Rule 76    FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
Rule 77    DESCRIBE_STMT -> ID . DESCRIBE ( )
Rule 78    aritmetics_operation -> <empty>
Rule 79    EXPRESSION -> AND_EXP EXPRESSION_PRIME
Rule 80    EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME
Rule 81    EXPRESSION_PRIME -> empty
Rule 82    AND_EXP -> B_EXP AND_EXP_PRIME
Rule 83    AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME
Rule 84    AND_EXP_PRIME -> empty
Rule 85    B_EXP -> TRUE
Rule 86    B_EXP -> FALSE
Rule 87    B_EXP -> EXP B_EXP_PRIME
Rule 88    B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation
Rule 89    B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation
Rule 90    B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation
Rule 91    B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation
Rule 92    B_EXP_PRIME -> empty
Rule 93    EXP -> TERM EXP_PRIME
Rule 94    EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation
Rule 95    EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation
Rule 96    EXP_PRIME -> empty
Rule 97    TERM -> FACTOR TERM_PRIME
Rule 98    TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME
Rule 99    TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME
Rule 100   TERM_PRIME -> empty
Rule 101   FACTOR -> ( EXPRESSION )
Rule 102   FACTOR -> * VAR_CT
Rule 103   FACTOR -> / VAR_CT
Rule 104   FACTOR -> VAR_CT
Rule 105   VAR_CT -> ID add_operand
Rule 106   VAR_CT -> I_CONST add_operand
Rule 107   VAR_CT -> F_CONST add_operand
Rule 108   VAR_CT -> C_CONST add_operand
Rule 109   empty -> <empty>

Terminals, with rules where they appear

(                    : 26 27 28 49 54 55 67 70 76 77 101
)                    : 26 27 28 49 54 55 67 70 76 77 101
*                    : 98 102
+                    : 94
,                    : 17 31 56 57
-                    : 95
.                    : 77
/                    : 99 103
;                    : 1 13 14 15 16 37 38 47
<                    : 89
=                    : 47 48
>                    : 88
AND                  : 83
CHAR                 : 24
C_CONST              : 108
DATAFRAME            : 25
DESCRIBE             : 77
DIFFERENT            : 90
DO                   : 76
ELSE                 : 68
EQUAL                : 91
FALSE                : 86
FLOAT                : 23
FOR                  : 48
FUNC                 : 26 27 28
F_CONST              : 107
ID                   : 1 13 14 15 16 17 20 21 26 27 28 29 31 49 77 105
IF                   : 67
INT                  : 22
I_CONST              : 106
MAIN                 : 1
OR                   : 80
PRINT                : 54 55
PROG                 : 1
RETURN               : 26 27
TITLE                : 55 57
TO                   : 76
TRUE                 : 85
VAR                  : 13 14 15 16
VOID                 : 1 28
WHILE                : 70
[                    : 15 16 16 21
]                    : 15 16 16 21
error                : 
{                    : 1 26 27 28 67 68 70 76
}                    : 1 26 27 28 67 68 70 76

Nonterminals, with rules where they appear

AND_EXP              : 79 80
AND_EXP_PRIME        : 82 83
ASSIGNATION          : 35 76
BLOCK                : 1 26 27 28 33 67 68 70 76
B_EXP                : 82 83 88 89 90 91
B_EXP_PRIME          : 87
CONDITION            : 39
DESCRIBE_STMT        : 42
ELSE_STMT            : 67
EXP                  : 87
EXPRESSION           : 15 16 16 21 26 37 47 48 49 50 54 56 67 70 76 101
EXPRESSION_PRIME     : 79 80
EXP_PRIME            : 93 94 95
FACTOR               : 97 98 99
FOR_STMT             : 41
FUNCTION             : 7 9
FUNCTION_PRIME       : 1
FUNC_CALL            : 36
FUNC_CALL_PRIME      : 49 50
FUNC_PRIME           : 7 9
PARAM                : 26 27 28
PARAM_PRIME          : 29 31
PROGRAM              : 0
STATEMENT            : 33
TERM                 : 93 94 95
TERM_PRIME           : 97 98 99
TIPO_COMP            : 13
TIPO_PRIME           : 13 14 17
TIPO_SIMPLE          : 14 15 16 26 27 29 31
VARIABLE             : 47 48
VARS                 : 5
VARS_PRIME           : 1 1 5 26 27 28
VAR_CT               : 27 102 103 104
WHILE_STMT           : 40
WRITE                : 38
WRITE_PRIME          : 54 55 56 57
add_assignation_for_quad : 48
add_assignation_quad : 47
add_current_type     : 17
add_final_counter_for : 76
add_id               : 1 13 14 17
add_operand          : 105 106 107 108
add_operator         : 47 48 54 55 88 89 90 91 94 95 98 99
add_print_operator   : 56 57
add_type             : 1 22 23 24
append_jump          : 70
aritmetics_operation : 88 89 90 91 94 95 98 99
check_boolean_expression_for : 76
check_exact_type_for : 76 76
empty                : 6 8 10 18 30 32 34 51 58 69 81 84 92 96 100
end_for              : 76
fill_go_to_false_quad : 67 70
fill_go_to_true_quad : 68
generate_for_quad    : 76
get_variable         : 20
go_to_false_quad     : 67 70
go_to_quad           : 70
go_to_true_quad      : 68
pop_operand          : 67 70
pop_type             : 67 70
print_aux            : 1
print_quad           : 54 56 57
save_ids             : 1 13 14

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux

    PROG            shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROG . add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux
    (11) add_type -> .

    ID              reduce using rule 11 (add_type -> .)

    add_type                       shift and go to state 3

state 3

    (1) PROGRAM -> PROG add_type . ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux

    ID              shift and go to state 4


state 4

    (1) PROGRAM -> PROG add_type ID . add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux
    (3) add_id -> .

    ;               reduce using rule 3 (add_id -> .)

    add_id                         shift and go to state 5

state 5

    (1) PROGRAM -> PROG add_type ID add_id . ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux

    ;               shift and go to state 6


state 6

    (1) PROGRAM -> PROG add_type ID add_id ; . save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux
    (4) save_ids -> .

    VAR             reduce using rule 4 (save_ids -> .)
    FUNC            reduce using rule 4 (save_ids -> .)
    VOID            reduce using rule 4 (save_ids -> .)

    save_ids                       shift and go to state 7

state 7

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids . VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux
    (5) VARS_PRIME -> . VARS VARS_PRIME
    (6) VARS_PRIME -> . empty
    (13) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (14) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (15) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (16) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (109) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 109 (empty -> .)
    VOID            reduce using rule 109 (empty -> .)

    VARS_PRIME                     shift and go to state 8
    VARS                           shift and go to state 9
    empty                          shift and go to state 10

state 8

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME . FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux
    (7) FUNCTION_PRIME -> . FUNCTION FUNC_PRIME
    (8) FUNCTION_PRIME -> . empty
    (26) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (28) FUNCTION -> . FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }
    (109) empty -> .

    FUNC            shift and go to state 15
    VOID            reduce using rule 109 (empty -> .)

    FUNCTION_PRIME                 shift and go to state 12
    FUNCTION                       shift and go to state 13
    empty                          shift and go to state 14

state 9

    (5) VARS_PRIME -> VARS . VARS_PRIME
    (5) VARS_PRIME -> . VARS VARS_PRIME
    (6) VARS_PRIME -> . empty
    (13) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (14) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (15) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (16) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (109) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 109 (empty -> .)
    VOID            reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    VARS                           shift and go to state 9
    VARS_PRIME                     shift and go to state 16
    empty                          shift and go to state 10

state 10

    (6) VARS_PRIME -> empty .

    FUNC            reduce using rule 6 (VARS_PRIME -> empty .)
    VOID            reduce using rule 6 (VARS_PRIME -> empty .)
    FOR             reduce using rule 6 (VARS_PRIME -> empty .)
    ID              reduce using rule 6 (VARS_PRIME -> empty .)
    PRINT           reduce using rule 6 (VARS_PRIME -> empty .)
    IF              reduce using rule 6 (VARS_PRIME -> empty .)
    WHILE           reduce using rule 6 (VARS_PRIME -> empty .)
    TRUE            reduce using rule 6 (VARS_PRIME -> empty .)
    FALSE           reduce using rule 6 (VARS_PRIME -> empty .)
    (               reduce using rule 6 (VARS_PRIME -> empty .)
    *               reduce using rule 6 (VARS_PRIME -> empty .)
    /               reduce using rule 6 (VARS_PRIME -> empty .)
    I_CONST         reduce using rule 6 (VARS_PRIME -> empty .)
    F_CONST         reduce using rule 6 (VARS_PRIME -> empty .)
    C_CONST         reduce using rule 6 (VARS_PRIME -> empty .)
    }               reduce using rule 6 (VARS_PRIME -> empty .)
    RETURN          reduce using rule 6 (VARS_PRIME -> empty .)


state 11

    (13) VARS -> VAR . TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (14) VARS -> VAR . TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (15) VARS -> VAR . TIPO_SIMPLE ID [ EXPRESSION ] ;
    (16) VARS -> VAR . TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (25) TIPO_COMP -> . DATAFRAME
    (22) TIPO_SIMPLE -> . INT add_type
    (23) TIPO_SIMPLE -> . FLOAT add_type
    (24) TIPO_SIMPLE -> . CHAR add_type

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    TIPO_COMP                      shift and go to state 17
    TIPO_SIMPLE                    shift and go to state 18

state 12

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME . VOID MAIN { VARS_PRIME BLOCK } print_aux

    VOID            shift and go to state 23


state 13

    (7) FUNCTION_PRIME -> FUNCTION . FUNC_PRIME
    (9) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (10) FUNC_PRIME -> . empty
    (26) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (28) FUNCTION -> . FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }
    (109) empty -> .

    FUNC            shift and go to state 15
    VOID            reduce using rule 109 (empty -> .)

    FUNCTION                       shift and go to state 24
    FUNC_PRIME                     shift and go to state 25
    empty                          shift and go to state 26

state 14

    (8) FUNCTION_PRIME -> empty .

    VOID            reduce using rule 8 (FUNCTION_PRIME -> empty .)


state 15

    (26) FUNCTION -> FUNC . TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC . TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (28) FUNCTION -> FUNC . VOID ID ( PARAM ) { VARS_PRIME BLOCK }
    (22) TIPO_SIMPLE -> . INT add_type
    (23) TIPO_SIMPLE -> . FLOAT add_type
    (24) TIPO_SIMPLE -> . CHAR add_type

    VOID            shift and go to state 28
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    TIPO_SIMPLE                    shift and go to state 27

state 16

    (5) VARS_PRIME -> VARS VARS_PRIME .

    FUNC            reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    VOID            reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    FOR             reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    ID              reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    PRINT           reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    IF              reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    WHILE           reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    TRUE            reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    FALSE           reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    (               reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    *               reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    /               reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    I_CONST         reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    F_CONST         reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    C_CONST         reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    }               reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)
    RETURN          reduce using rule 5 (VARS_PRIME -> VARS VARS_PRIME .)


state 17

    (13) VARS -> VAR TIPO_COMP . ID add_id TIPO_PRIME ; save_ids

    ID              shift and go to state 29


state 18

    (14) VARS -> VAR TIPO_SIMPLE . ID add_id TIPO_PRIME ; save_ids
    (15) VARS -> VAR TIPO_SIMPLE . ID [ EXPRESSION ] ;
    (16) VARS -> VAR TIPO_SIMPLE . ID [ EXPRESSION ] [ EXPRESSION ] ;

    ID              shift and go to state 30


state 19

    (25) TIPO_COMP -> DATAFRAME .

    ID              reduce using rule 25 (TIPO_COMP -> DATAFRAME .)


state 20

    (22) TIPO_SIMPLE -> INT . add_type
    (11) add_type -> .

    ID              reduce using rule 11 (add_type -> .)

    add_type                       shift and go to state 31

state 21

    (23) TIPO_SIMPLE -> FLOAT . add_type
    (11) add_type -> .

    ID              reduce using rule 11 (add_type -> .)

    add_type                       shift and go to state 32

state 22

    (24) TIPO_SIMPLE -> CHAR . add_type
    (11) add_type -> .

    ID              reduce using rule 11 (add_type -> .)

    add_type                       shift and go to state 33

state 23

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID . MAIN { VARS_PRIME BLOCK } print_aux

    MAIN            shift and go to state 34


state 24

    (9) FUNC_PRIME -> FUNCTION . FUNC_PRIME
    (9) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (10) FUNC_PRIME -> . empty
    (26) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (28) FUNCTION -> . FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }
    (109) empty -> .

    FUNC            shift and go to state 15
    VOID            reduce using rule 109 (empty -> .)

    FUNCTION                       shift and go to state 24
    FUNC_PRIME                     shift and go to state 35
    empty                          shift and go to state 26

state 25

    (7) FUNCTION_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 7 (FUNCTION_PRIME -> FUNCTION FUNC_PRIME .)


state 26

    (10) FUNC_PRIME -> empty .

    VOID            reduce using rule 10 (FUNC_PRIME -> empty .)


state 27

    (26) FUNCTION -> FUNC TIPO_SIMPLE . ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE . ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }

    ID              shift and go to state 36


state 28

    (28) FUNCTION -> FUNC VOID . ID ( PARAM ) { VARS_PRIME BLOCK }

    ID              shift and go to state 37


state 29

    (13) VARS -> VAR TIPO_COMP ID . add_id TIPO_PRIME ; save_ids
    (3) add_id -> .

    ,               reduce using rule 3 (add_id -> .)
    ;               reduce using rule 3 (add_id -> .)

    add_id                         shift and go to state 38

state 30

    (14) VARS -> VAR TIPO_SIMPLE ID . add_id TIPO_PRIME ; save_ids
    (15) VARS -> VAR TIPO_SIMPLE ID . [ EXPRESSION ] ;
    (16) VARS -> VAR TIPO_SIMPLE ID . [ EXPRESSION ] [ EXPRESSION ] ;
    (3) add_id -> .

    [               shift and go to state 40
    ,               reduce using rule 3 (add_id -> .)
    ;               reduce using rule 3 (add_id -> .)

    add_id                         shift and go to state 39

state 31

    (22) TIPO_SIMPLE -> INT add_type .

    ID              reduce using rule 22 (TIPO_SIMPLE -> INT add_type .)


state 32

    (23) TIPO_SIMPLE -> FLOAT add_type .

    ID              reduce using rule 23 (TIPO_SIMPLE -> FLOAT add_type .)


state 33

    (24) TIPO_SIMPLE -> CHAR add_type .

    ID              reduce using rule 24 (TIPO_SIMPLE -> CHAR add_type .)


state 34

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN . { VARS_PRIME BLOCK } print_aux

    {               shift and go to state 41


state 35

    (9) FUNC_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 9 (FUNC_PRIME -> FUNCTION FUNC_PRIME .)


state 36

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID . ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID . ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }

    (               shift and go to state 42


state 37

    (28) FUNCTION -> FUNC VOID ID . ( PARAM ) { VARS_PRIME BLOCK }

    (               shift and go to state 43


state 38

    (13) VARS -> VAR TIPO_COMP ID add_id . TIPO_PRIME ; save_ids
    (17) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (18) TIPO_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 45
    ;               reduce using rule 109 (empty -> .)

    TIPO_PRIME                     shift and go to state 44
    empty                          shift and go to state 46

state 39

    (14) VARS -> VAR TIPO_SIMPLE ID add_id . TIPO_PRIME ; save_ids
    (17) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (18) TIPO_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 45
    ;               reduce using rule 109 (empty -> .)

    TIPO_PRIME                     shift and go to state 47
    empty                          shift and go to state 46

state 40

    (15) VARS -> VAR TIPO_SIMPLE ID [ . EXPRESSION ] ;
    (16) VARS -> VAR TIPO_SIMPLE ID [ . EXPRESSION ] [ EXPRESSION ] ;
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 49
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 41

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { . VARS_PRIME BLOCK } print_aux
    (5) VARS_PRIME -> . VARS VARS_PRIME
    (6) VARS_PRIME -> . empty
    (13) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (14) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (15) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (16) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (109) empty -> .

    VAR             shift and go to state 11
    FOR             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)

    VARS_PRIME                     shift and go to state 64
    VARS                           shift and go to state 9
    empty                          shift and go to state 10

state 42

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( . PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( . PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (29) PARAM -> . TIPO_SIMPLE ID PARAM_PRIME
    (30) PARAM -> . empty
    (22) TIPO_SIMPLE -> . INT add_type
    (23) TIPO_SIMPLE -> . FLOAT add_type
    (24) TIPO_SIMPLE -> . CHAR add_type
    (109) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    )               reduce using rule 109 (empty -> .)

    TIPO_SIMPLE                    shift and go to state 65
    PARAM                          shift and go to state 66
    empty                          shift and go to state 67

state 43

    (28) FUNCTION -> FUNC VOID ID ( . PARAM ) { VARS_PRIME BLOCK }
    (29) PARAM -> . TIPO_SIMPLE ID PARAM_PRIME
    (30) PARAM -> . empty
    (22) TIPO_SIMPLE -> . INT add_type
    (23) TIPO_SIMPLE -> . FLOAT add_type
    (24) TIPO_SIMPLE -> . CHAR add_type
    (109) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    )               reduce using rule 109 (empty -> .)

    PARAM                          shift and go to state 68
    TIPO_SIMPLE                    shift and go to state 65
    empty                          shift and go to state 67

state 44

    (13) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME . ; save_ids

    ;               shift and go to state 69


state 45

    (17) TIPO_PRIME -> , . ID add_id add_current_type TIPO_PRIME

    ID              shift and go to state 70


state 46

    (18) TIPO_PRIME -> empty .

    ;               reduce using rule 18 (TIPO_PRIME -> empty .)


state 47

    (14) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME . ; save_ids

    ;               shift and go to state 71


state 48

    (105) VAR_CT -> ID . add_operand
    (44) add_operand -> .

    *               reduce using rule 44 (add_operand -> .)
    /               reduce using rule 44 (add_operand -> .)
    +               reduce using rule 44 (add_operand -> .)
    -               reduce using rule 44 (add_operand -> .)
    >               reduce using rule 44 (add_operand -> .)
    <               reduce using rule 44 (add_operand -> .)
    DIFFERENT       reduce using rule 44 (add_operand -> .)
    EQUAL           reduce using rule 44 (add_operand -> .)
    AND             reduce using rule 44 (add_operand -> .)
    OR              reduce using rule 44 (add_operand -> .)
    ]               reduce using rule 44 (add_operand -> .)
    )               reduce using rule 44 (add_operand -> .)
    ;               reduce using rule 44 (add_operand -> .)
    TRUE            reduce using rule 44 (add_operand -> .)
    FALSE           reduce using rule 44 (add_operand -> .)
    (               reduce using rule 44 (add_operand -> .)
    ID              reduce using rule 44 (add_operand -> .)
    I_CONST         reduce using rule 44 (add_operand -> .)
    F_CONST         reduce using rule 44 (add_operand -> .)
    C_CONST         reduce using rule 44 (add_operand -> .)
    ,               reduce using rule 44 (add_operand -> .)
    TO              reduce using rule 44 (add_operand -> .)
    FOR             reduce using rule 44 (add_operand -> .)
    PRINT           reduce using rule 44 (add_operand -> .)
    IF              reduce using rule 44 (add_operand -> .)
    WHILE           reduce using rule 44 (add_operand -> .)
    }               reduce using rule 44 (add_operand -> .)
    RETURN          reduce using rule 44 (add_operand -> .)

    add_operand                    shift and go to state 72

state 49

    (15) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION . ] ;
    (16) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION . ] [ EXPRESSION ] ;

    ]               shift and go to state 73


state 50

    (79) EXPRESSION -> AND_EXP . EXPRESSION_PRIME
    (80) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (81) EXPRESSION_PRIME -> . empty
    (109) empty -> .

    OR              shift and go to state 75
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    EXPRESSION_PRIME               shift and go to state 74
    empty                          shift and go to state 76

state 51

    (82) AND_EXP -> B_EXP . AND_EXP_PRIME
    (83) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (84) AND_EXP_PRIME -> . empty
    (109) empty -> .

    AND             shift and go to state 78
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    AND_EXP_PRIME                  shift and go to state 77
    empty                          shift and go to state 79

state 52

    (85) B_EXP -> TRUE .

    AND             reduce using rule 85 (B_EXP -> TRUE .)
    OR              reduce using rule 85 (B_EXP -> TRUE .)
    ]               reduce using rule 85 (B_EXP -> TRUE .)
    )               reduce using rule 85 (B_EXP -> TRUE .)
    ;               reduce using rule 85 (B_EXP -> TRUE .)
    TRUE            reduce using rule 85 (B_EXP -> TRUE .)
    FALSE           reduce using rule 85 (B_EXP -> TRUE .)
    (               reduce using rule 85 (B_EXP -> TRUE .)
    *               reduce using rule 85 (B_EXP -> TRUE .)
    /               reduce using rule 85 (B_EXP -> TRUE .)
    ID              reduce using rule 85 (B_EXP -> TRUE .)
    I_CONST         reduce using rule 85 (B_EXP -> TRUE .)
    F_CONST         reduce using rule 85 (B_EXP -> TRUE .)
    C_CONST         reduce using rule 85 (B_EXP -> TRUE .)
    ,               reduce using rule 85 (B_EXP -> TRUE .)
    TO              reduce using rule 85 (B_EXP -> TRUE .)
    FOR             reduce using rule 85 (B_EXP -> TRUE .)
    PRINT           reduce using rule 85 (B_EXP -> TRUE .)
    IF              reduce using rule 85 (B_EXP -> TRUE .)
    WHILE           reduce using rule 85 (B_EXP -> TRUE .)
    }               reduce using rule 85 (B_EXP -> TRUE .)
    RETURN          reduce using rule 85 (B_EXP -> TRUE .)


state 53

    (86) B_EXP -> FALSE .

    AND             reduce using rule 86 (B_EXP -> FALSE .)
    OR              reduce using rule 86 (B_EXP -> FALSE .)
    ]               reduce using rule 86 (B_EXP -> FALSE .)
    )               reduce using rule 86 (B_EXP -> FALSE .)
    ;               reduce using rule 86 (B_EXP -> FALSE .)
    TRUE            reduce using rule 86 (B_EXP -> FALSE .)
    FALSE           reduce using rule 86 (B_EXP -> FALSE .)
    (               reduce using rule 86 (B_EXP -> FALSE .)
    *               reduce using rule 86 (B_EXP -> FALSE .)
    /               reduce using rule 86 (B_EXP -> FALSE .)
    ID              reduce using rule 86 (B_EXP -> FALSE .)
    I_CONST         reduce using rule 86 (B_EXP -> FALSE .)
    F_CONST         reduce using rule 86 (B_EXP -> FALSE .)
    C_CONST         reduce using rule 86 (B_EXP -> FALSE .)
    ,               reduce using rule 86 (B_EXP -> FALSE .)
    TO              reduce using rule 86 (B_EXP -> FALSE .)
    FOR             reduce using rule 86 (B_EXP -> FALSE .)
    PRINT           reduce using rule 86 (B_EXP -> FALSE .)
    IF              reduce using rule 86 (B_EXP -> FALSE .)
    WHILE           reduce using rule 86 (B_EXP -> FALSE .)
    }               reduce using rule 86 (B_EXP -> FALSE .)
    RETURN          reduce using rule 86 (B_EXP -> FALSE .)


state 54

    (87) B_EXP -> EXP . B_EXP_PRIME
    (88) B_EXP_PRIME -> . > add_operator B_EXP aritmetics_operation
    (89) B_EXP_PRIME -> . < add_operator B_EXP aritmetics_operation
    (90) B_EXP_PRIME -> . DIFFERENT add_operator B_EXP aritmetics_operation
    (91) B_EXP_PRIME -> . EQUAL add_operator B_EXP aritmetics_operation
    (92) B_EXP_PRIME -> . empty
    (109) empty -> .

    >               shift and go to state 81
    <               shift and go to state 82
    DIFFERENT       shift and go to state 83
    EQUAL           shift and go to state 84
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    B_EXP_PRIME                    shift and go to state 80
    empty                          shift and go to state 85

state 55

    (93) EXP -> TERM . EXP_PRIME
    (94) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (95) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (96) EXP_PRIME -> . empty
    (109) empty -> .

    +               shift and go to state 87
    -               shift and go to state 88
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    DIFFERENT       reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    EXP_PRIME                      shift and go to state 86
    empty                          shift and go to state 89

state 56

    (97) TERM -> FACTOR . TERM_PRIME
    (98) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (99) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (100) TERM_PRIME -> . empty
    (109) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 91
    /               shift and go to state 92
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    DIFFERENT       reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

  ! *               [ reduce using rule 109 (empty -> .) ]
  ! /               [ reduce using rule 109 (empty -> .) ]

    TERM_PRIME                     shift and go to state 90
    empty                          shift and go to state 93

state 57

    (101) FACTOR -> ( . EXPRESSION )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 94
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 58

    (102) FACTOR -> * . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    VAR_CT                         shift and go to state 95

state 59

    (104) FACTOR -> VAR_CT .

    *               reduce using rule 104 (FACTOR -> VAR_CT .)
    /               reduce using rule 104 (FACTOR -> VAR_CT .)
    +               reduce using rule 104 (FACTOR -> VAR_CT .)
    -               reduce using rule 104 (FACTOR -> VAR_CT .)
    >               reduce using rule 104 (FACTOR -> VAR_CT .)
    <               reduce using rule 104 (FACTOR -> VAR_CT .)
    DIFFERENT       reduce using rule 104 (FACTOR -> VAR_CT .)
    EQUAL           reduce using rule 104 (FACTOR -> VAR_CT .)
    AND             reduce using rule 104 (FACTOR -> VAR_CT .)
    OR              reduce using rule 104 (FACTOR -> VAR_CT .)
    ]               reduce using rule 104 (FACTOR -> VAR_CT .)
    )               reduce using rule 104 (FACTOR -> VAR_CT .)
    ;               reduce using rule 104 (FACTOR -> VAR_CT .)
    TRUE            reduce using rule 104 (FACTOR -> VAR_CT .)
    FALSE           reduce using rule 104 (FACTOR -> VAR_CT .)
    (               reduce using rule 104 (FACTOR -> VAR_CT .)
    ID              reduce using rule 104 (FACTOR -> VAR_CT .)
    I_CONST         reduce using rule 104 (FACTOR -> VAR_CT .)
    F_CONST         reduce using rule 104 (FACTOR -> VAR_CT .)
    C_CONST         reduce using rule 104 (FACTOR -> VAR_CT .)
    ,               reduce using rule 104 (FACTOR -> VAR_CT .)
    TO              reduce using rule 104 (FACTOR -> VAR_CT .)
    FOR             reduce using rule 104 (FACTOR -> VAR_CT .)
    PRINT           reduce using rule 104 (FACTOR -> VAR_CT .)
    IF              reduce using rule 104 (FACTOR -> VAR_CT .)
    WHILE           reduce using rule 104 (FACTOR -> VAR_CT .)
    }               reduce using rule 104 (FACTOR -> VAR_CT .)
    RETURN          reduce using rule 104 (FACTOR -> VAR_CT .)


state 60

    (103) FACTOR -> / . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    VAR_CT                         shift and go to state 96

state 61

    (106) VAR_CT -> I_CONST . add_operand
    (44) add_operand -> .

    *               reduce using rule 44 (add_operand -> .)
    /               reduce using rule 44 (add_operand -> .)
    +               reduce using rule 44 (add_operand -> .)
    -               reduce using rule 44 (add_operand -> .)
    >               reduce using rule 44 (add_operand -> .)
    <               reduce using rule 44 (add_operand -> .)
    DIFFERENT       reduce using rule 44 (add_operand -> .)
    EQUAL           reduce using rule 44 (add_operand -> .)
    AND             reduce using rule 44 (add_operand -> .)
    OR              reduce using rule 44 (add_operand -> .)
    ]               reduce using rule 44 (add_operand -> .)
    )               reduce using rule 44 (add_operand -> .)
    ;               reduce using rule 44 (add_operand -> .)
    TRUE            reduce using rule 44 (add_operand -> .)
    FALSE           reduce using rule 44 (add_operand -> .)
    (               reduce using rule 44 (add_operand -> .)
    ID              reduce using rule 44 (add_operand -> .)
    I_CONST         reduce using rule 44 (add_operand -> .)
    F_CONST         reduce using rule 44 (add_operand -> .)
    C_CONST         reduce using rule 44 (add_operand -> .)
    ,               reduce using rule 44 (add_operand -> .)
    TO              reduce using rule 44 (add_operand -> .)
    FOR             reduce using rule 44 (add_operand -> .)
    PRINT           reduce using rule 44 (add_operand -> .)
    IF              reduce using rule 44 (add_operand -> .)
    WHILE           reduce using rule 44 (add_operand -> .)
    }               reduce using rule 44 (add_operand -> .)
    RETURN          reduce using rule 44 (add_operand -> .)

    add_operand                    shift and go to state 97

state 62

    (107) VAR_CT -> F_CONST . add_operand
    (44) add_operand -> .

    *               reduce using rule 44 (add_operand -> .)
    /               reduce using rule 44 (add_operand -> .)
    +               reduce using rule 44 (add_operand -> .)
    -               reduce using rule 44 (add_operand -> .)
    >               reduce using rule 44 (add_operand -> .)
    <               reduce using rule 44 (add_operand -> .)
    DIFFERENT       reduce using rule 44 (add_operand -> .)
    EQUAL           reduce using rule 44 (add_operand -> .)
    AND             reduce using rule 44 (add_operand -> .)
    OR              reduce using rule 44 (add_operand -> .)
    ]               reduce using rule 44 (add_operand -> .)
    )               reduce using rule 44 (add_operand -> .)
    ;               reduce using rule 44 (add_operand -> .)
    TRUE            reduce using rule 44 (add_operand -> .)
    FALSE           reduce using rule 44 (add_operand -> .)
    (               reduce using rule 44 (add_operand -> .)
    ID              reduce using rule 44 (add_operand -> .)
    I_CONST         reduce using rule 44 (add_operand -> .)
    F_CONST         reduce using rule 44 (add_operand -> .)
    C_CONST         reduce using rule 44 (add_operand -> .)
    ,               reduce using rule 44 (add_operand -> .)
    TO              reduce using rule 44 (add_operand -> .)
    FOR             reduce using rule 44 (add_operand -> .)
    PRINT           reduce using rule 44 (add_operand -> .)
    IF              reduce using rule 44 (add_operand -> .)
    WHILE           reduce using rule 44 (add_operand -> .)
    }               reduce using rule 44 (add_operand -> .)
    RETURN          reduce using rule 44 (add_operand -> .)

    add_operand                    shift and go to state 98

state 63

    (108) VAR_CT -> C_CONST . add_operand
    (44) add_operand -> .

    *               reduce using rule 44 (add_operand -> .)
    /               reduce using rule 44 (add_operand -> .)
    +               reduce using rule 44 (add_operand -> .)
    -               reduce using rule 44 (add_operand -> .)
    >               reduce using rule 44 (add_operand -> .)
    <               reduce using rule 44 (add_operand -> .)
    DIFFERENT       reduce using rule 44 (add_operand -> .)
    EQUAL           reduce using rule 44 (add_operand -> .)
    AND             reduce using rule 44 (add_operand -> .)
    OR              reduce using rule 44 (add_operand -> .)
    ]               reduce using rule 44 (add_operand -> .)
    )               reduce using rule 44 (add_operand -> .)
    ;               reduce using rule 44 (add_operand -> .)
    TRUE            reduce using rule 44 (add_operand -> .)
    FALSE           reduce using rule 44 (add_operand -> .)
    (               reduce using rule 44 (add_operand -> .)
    ID              reduce using rule 44 (add_operand -> .)
    I_CONST         reduce using rule 44 (add_operand -> .)
    F_CONST         reduce using rule 44 (add_operand -> .)
    C_CONST         reduce using rule 44 (add_operand -> .)
    ,               reduce using rule 44 (add_operand -> .)
    TO              reduce using rule 44 (add_operand -> .)
    FOR             reduce using rule 44 (add_operand -> .)
    PRINT           reduce using rule 44 (add_operand -> .)
    IF              reduce using rule 44 (add_operand -> .)
    WHILE           reduce using rule 44 (add_operand -> .)
    }               reduce using rule 44 (add_operand -> .)
    RETURN          reduce using rule 44 (add_operand -> .)

    add_operand                    shift and go to state 99

state 64

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME . BLOCK } print_aux
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    BLOCK                          shift and go to state 101
    STATEMENT                      shift and go to state 102
    empty                          shift and go to state 103
    ASSIGNATION                    shift and go to state 104
    FUNC_CALL                      shift and go to state 105
    EXPRESSION                     shift and go to state 106
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 65

    (29) PARAM -> TIPO_SIMPLE . ID PARAM_PRIME

    ID              shift and go to state 117


state 66

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM . ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM . ) { VARS_PRIME BLOCK RETURN VAR_CT }

    )               shift and go to state 118


state 67

    (30) PARAM -> empty .

    )               reduce using rule 30 (PARAM -> empty .)


state 68

    (28) FUNCTION -> FUNC VOID ID ( PARAM . ) { VARS_PRIME BLOCK }

    )               shift and go to state 119


state 69

    (13) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; . save_ids
    (4) save_ids -> .

    VAR             reduce using rule 4 (save_ids -> .)
    FUNC            reduce using rule 4 (save_ids -> .)
    VOID            reduce using rule 4 (save_ids -> .)
    FOR             reduce using rule 4 (save_ids -> .)
    ID              reduce using rule 4 (save_ids -> .)
    PRINT           reduce using rule 4 (save_ids -> .)
    IF              reduce using rule 4 (save_ids -> .)
    WHILE           reduce using rule 4 (save_ids -> .)
    TRUE            reduce using rule 4 (save_ids -> .)
    FALSE           reduce using rule 4 (save_ids -> .)
    (               reduce using rule 4 (save_ids -> .)
    *               reduce using rule 4 (save_ids -> .)
    /               reduce using rule 4 (save_ids -> .)
    I_CONST         reduce using rule 4 (save_ids -> .)
    F_CONST         reduce using rule 4 (save_ids -> .)
    C_CONST         reduce using rule 4 (save_ids -> .)
    }               reduce using rule 4 (save_ids -> .)
    RETURN          reduce using rule 4 (save_ids -> .)

    save_ids                       shift and go to state 120

state 70

    (17) TIPO_PRIME -> , ID . add_id add_current_type TIPO_PRIME
    (3) add_id -> .

    ,               reduce using rule 3 (add_id -> .)
    ;               reduce using rule 3 (add_id -> .)

    add_id                         shift and go to state 121

state 71

    (14) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; . save_ids
    (4) save_ids -> .

    VAR             reduce using rule 4 (save_ids -> .)
    FUNC            reduce using rule 4 (save_ids -> .)
    VOID            reduce using rule 4 (save_ids -> .)
    FOR             reduce using rule 4 (save_ids -> .)
    ID              reduce using rule 4 (save_ids -> .)
    PRINT           reduce using rule 4 (save_ids -> .)
    IF              reduce using rule 4 (save_ids -> .)
    WHILE           reduce using rule 4 (save_ids -> .)
    TRUE            reduce using rule 4 (save_ids -> .)
    FALSE           reduce using rule 4 (save_ids -> .)
    (               reduce using rule 4 (save_ids -> .)
    *               reduce using rule 4 (save_ids -> .)
    /               reduce using rule 4 (save_ids -> .)
    I_CONST         reduce using rule 4 (save_ids -> .)
    F_CONST         reduce using rule 4 (save_ids -> .)
    C_CONST         reduce using rule 4 (save_ids -> .)
    }               reduce using rule 4 (save_ids -> .)
    RETURN          reduce using rule 4 (save_ids -> .)

    save_ids                       shift and go to state 122

state 72

    (105) VAR_CT -> ID add_operand .

    *               reduce using rule 105 (VAR_CT -> ID add_operand .)
    /               reduce using rule 105 (VAR_CT -> ID add_operand .)
    +               reduce using rule 105 (VAR_CT -> ID add_operand .)
    -               reduce using rule 105 (VAR_CT -> ID add_operand .)
    >               reduce using rule 105 (VAR_CT -> ID add_operand .)
    <               reduce using rule 105 (VAR_CT -> ID add_operand .)
    DIFFERENT       reduce using rule 105 (VAR_CT -> ID add_operand .)
    EQUAL           reduce using rule 105 (VAR_CT -> ID add_operand .)
    AND             reduce using rule 105 (VAR_CT -> ID add_operand .)
    OR              reduce using rule 105 (VAR_CT -> ID add_operand .)
    ]               reduce using rule 105 (VAR_CT -> ID add_operand .)
    )               reduce using rule 105 (VAR_CT -> ID add_operand .)
    ;               reduce using rule 105 (VAR_CT -> ID add_operand .)
    TRUE            reduce using rule 105 (VAR_CT -> ID add_operand .)
    FALSE           reduce using rule 105 (VAR_CT -> ID add_operand .)
    (               reduce using rule 105 (VAR_CT -> ID add_operand .)
    ID              reduce using rule 105 (VAR_CT -> ID add_operand .)
    I_CONST         reduce using rule 105 (VAR_CT -> ID add_operand .)
    F_CONST         reduce using rule 105 (VAR_CT -> ID add_operand .)
    C_CONST         reduce using rule 105 (VAR_CT -> ID add_operand .)
    ,               reduce using rule 105 (VAR_CT -> ID add_operand .)
    TO              reduce using rule 105 (VAR_CT -> ID add_operand .)
    FOR             reduce using rule 105 (VAR_CT -> ID add_operand .)
    PRINT           reduce using rule 105 (VAR_CT -> ID add_operand .)
    IF              reduce using rule 105 (VAR_CT -> ID add_operand .)
    WHILE           reduce using rule 105 (VAR_CT -> ID add_operand .)
    }               reduce using rule 105 (VAR_CT -> ID add_operand .)
    RETURN          reduce using rule 105 (VAR_CT -> ID add_operand .)


state 73

    (15) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] . ;
    (16) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] . [ EXPRESSION ] ;

    ;               shift and go to state 124
    [               shift and go to state 123


state 74

    (79) EXPRESSION -> AND_EXP EXPRESSION_PRIME .

    ]               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ;               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    RETURN          reduce using rule 79 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)


state 75

    (80) EXPRESSION_PRIME -> OR . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    AND_EXP                        shift and go to state 125
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 76

    (81) EXPRESSION_PRIME -> empty .

    ]               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    )               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    ;               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    TRUE            reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    FALSE           reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    (               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    *               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    /               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    ID              reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    I_CONST         reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    F_CONST         reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    C_CONST         reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    ,               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    TO              reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    FOR             reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    PRINT           reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    IF              reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    WHILE           reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    }               reduce using rule 81 (EXPRESSION_PRIME -> empty .)
    RETURN          reduce using rule 81 (EXPRESSION_PRIME -> empty .)


state 77

    (82) AND_EXP -> B_EXP AND_EXP_PRIME .

    OR              reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ]               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    )               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ;               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    TRUE            reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    FALSE           reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    (               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    *               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    /               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ID              reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    I_CONST         reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    F_CONST         reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    C_CONST         reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ,               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    TO              reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    FOR             reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    PRINT           reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    IF              reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    WHILE           reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    }               reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    RETURN          reduce using rule 82 (AND_EXP -> B_EXP AND_EXP_PRIME .)


state 78

    (83) AND_EXP_PRIME -> AND . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    B_EXP                          shift and go to state 126
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 79

    (84) AND_EXP_PRIME -> empty .

    OR              reduce using rule 84 (AND_EXP_PRIME -> empty .)
    ]               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    )               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    ;               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    TRUE            reduce using rule 84 (AND_EXP_PRIME -> empty .)
    FALSE           reduce using rule 84 (AND_EXP_PRIME -> empty .)
    (               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    *               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    /               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    ID              reduce using rule 84 (AND_EXP_PRIME -> empty .)
    I_CONST         reduce using rule 84 (AND_EXP_PRIME -> empty .)
    F_CONST         reduce using rule 84 (AND_EXP_PRIME -> empty .)
    C_CONST         reduce using rule 84 (AND_EXP_PRIME -> empty .)
    ,               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    TO              reduce using rule 84 (AND_EXP_PRIME -> empty .)
    FOR             reduce using rule 84 (AND_EXP_PRIME -> empty .)
    PRINT           reduce using rule 84 (AND_EXP_PRIME -> empty .)
    IF              reduce using rule 84 (AND_EXP_PRIME -> empty .)
    WHILE           reduce using rule 84 (AND_EXP_PRIME -> empty .)
    }               reduce using rule 84 (AND_EXP_PRIME -> empty .)
    RETURN          reduce using rule 84 (AND_EXP_PRIME -> empty .)


state 80

    (87) B_EXP -> EXP B_EXP_PRIME .

    AND             reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    OR              reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    ]               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    )               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    ;               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    TRUE            reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    FALSE           reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    (               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    *               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    /               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    ID              reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    I_CONST         reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    F_CONST         reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    C_CONST         reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    ,               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    TO              reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    FOR             reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    PRINT           reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    IF              reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    WHILE           reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    }               reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)
    RETURN          reduce using rule 87 (B_EXP -> EXP B_EXP_PRIME .)


state 81

    (88) B_EXP_PRIME -> > . add_operator B_EXP aritmetics_operation
    (43) add_operator -> .

    TRUE            reduce using rule 43 (add_operator -> .)
    FALSE           reduce using rule 43 (add_operator -> .)
    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 127

state 82

    (89) B_EXP_PRIME -> < . add_operator B_EXP aritmetics_operation
    (43) add_operator -> .

    TRUE            reduce using rule 43 (add_operator -> .)
    FALSE           reduce using rule 43 (add_operator -> .)
    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 128

state 83

    (90) B_EXP_PRIME -> DIFFERENT . add_operator B_EXP aritmetics_operation
    (43) add_operator -> .

    TRUE            reduce using rule 43 (add_operator -> .)
    FALSE           reduce using rule 43 (add_operator -> .)
    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 129

state 84

    (91) B_EXP_PRIME -> EQUAL . add_operator B_EXP aritmetics_operation
    (43) add_operator -> .

    TRUE            reduce using rule 43 (add_operator -> .)
    FALSE           reduce using rule 43 (add_operator -> .)
    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 130

state 85

    (92) B_EXP_PRIME -> empty .

    AND             reduce using rule 92 (B_EXP_PRIME -> empty .)
    OR              reduce using rule 92 (B_EXP_PRIME -> empty .)
    ]               reduce using rule 92 (B_EXP_PRIME -> empty .)
    )               reduce using rule 92 (B_EXP_PRIME -> empty .)
    ;               reduce using rule 92 (B_EXP_PRIME -> empty .)
    TRUE            reduce using rule 92 (B_EXP_PRIME -> empty .)
    FALSE           reduce using rule 92 (B_EXP_PRIME -> empty .)
    (               reduce using rule 92 (B_EXP_PRIME -> empty .)
    *               reduce using rule 92 (B_EXP_PRIME -> empty .)
    /               reduce using rule 92 (B_EXP_PRIME -> empty .)
    ID              reduce using rule 92 (B_EXP_PRIME -> empty .)
    I_CONST         reduce using rule 92 (B_EXP_PRIME -> empty .)
    F_CONST         reduce using rule 92 (B_EXP_PRIME -> empty .)
    C_CONST         reduce using rule 92 (B_EXP_PRIME -> empty .)
    ,               reduce using rule 92 (B_EXP_PRIME -> empty .)
    TO              reduce using rule 92 (B_EXP_PRIME -> empty .)
    FOR             reduce using rule 92 (B_EXP_PRIME -> empty .)
    PRINT           reduce using rule 92 (B_EXP_PRIME -> empty .)
    IF              reduce using rule 92 (B_EXP_PRIME -> empty .)
    WHILE           reduce using rule 92 (B_EXP_PRIME -> empty .)
    }               reduce using rule 92 (B_EXP_PRIME -> empty .)
    RETURN          reduce using rule 92 (B_EXP_PRIME -> empty .)


state 86

    (93) EXP -> TERM EXP_PRIME .

    >               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    <               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    DIFFERENT       reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    EQUAL           reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    AND             reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    OR              reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    ]               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    )               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    ;               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    TRUE            reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    FALSE           reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    (               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    *               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    /               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    ID              reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    I_CONST         reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    F_CONST         reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    C_CONST         reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    ,               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    TO              reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    FOR             reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    PRINT           reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    IF              reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    WHILE           reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    }               reduce using rule 93 (EXP -> TERM EXP_PRIME .)
    RETURN          reduce using rule 93 (EXP -> TERM EXP_PRIME .)


state 87

    (94) EXP_PRIME -> + . add_operator TERM EXP_PRIME aritmetics_operation
    (43) add_operator -> .

    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 131

state 88

    (95) EXP_PRIME -> - . add_operator TERM EXP_PRIME aritmetics_operation
    (43) add_operator -> .

    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 132

state 89

    (96) EXP_PRIME -> empty .

    >               reduce using rule 96 (EXP_PRIME -> empty .)
    <               reduce using rule 96 (EXP_PRIME -> empty .)
    DIFFERENT       reduce using rule 96 (EXP_PRIME -> empty .)
    EQUAL           reduce using rule 96 (EXP_PRIME -> empty .)
    AND             reduce using rule 96 (EXP_PRIME -> empty .)
    OR              reduce using rule 96 (EXP_PRIME -> empty .)
    ]               reduce using rule 96 (EXP_PRIME -> empty .)
    )               reduce using rule 96 (EXP_PRIME -> empty .)
    ;               reduce using rule 96 (EXP_PRIME -> empty .)
    TRUE            reduce using rule 96 (EXP_PRIME -> empty .)
    FALSE           reduce using rule 96 (EXP_PRIME -> empty .)
    (               reduce using rule 96 (EXP_PRIME -> empty .)
    *               reduce using rule 96 (EXP_PRIME -> empty .)
    /               reduce using rule 96 (EXP_PRIME -> empty .)
    ID              reduce using rule 96 (EXP_PRIME -> empty .)
    I_CONST         reduce using rule 96 (EXP_PRIME -> empty .)
    F_CONST         reduce using rule 96 (EXP_PRIME -> empty .)
    C_CONST         reduce using rule 96 (EXP_PRIME -> empty .)
    ,               reduce using rule 96 (EXP_PRIME -> empty .)
    TO              reduce using rule 96 (EXP_PRIME -> empty .)
    FOR             reduce using rule 96 (EXP_PRIME -> empty .)
    PRINT           reduce using rule 96 (EXP_PRIME -> empty .)
    IF              reduce using rule 96 (EXP_PRIME -> empty .)
    WHILE           reduce using rule 96 (EXP_PRIME -> empty .)
    }               reduce using rule 96 (EXP_PRIME -> empty .)
    RETURN          reduce using rule 96 (EXP_PRIME -> empty .)


state 90

    (97) TERM -> FACTOR TERM_PRIME .

    +               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    -               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    >               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    <               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    DIFFERENT       reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    EQUAL           reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    AND             reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    OR              reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    ]               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    )               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    ;               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    TRUE            reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    FALSE           reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    (               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    *               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    /               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    ID              reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    I_CONST         reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    F_CONST         reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    C_CONST         reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    ,               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    TO              reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    FOR             reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    PRINT           reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    IF              reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    WHILE           reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    }               reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)
    RETURN          reduce using rule 97 (TERM -> FACTOR TERM_PRIME .)


state 91

    (98) TERM_PRIME -> * . add_operator FACTOR aritmetics_operation TERM_PRIME
    (43) add_operator -> .

    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 133

state 92

    (99) TERM_PRIME -> / . add_operator FACTOR aritmetics_operation TERM_PRIME
    (43) add_operator -> .

    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 134

state 93

    (100) TERM_PRIME -> empty .

    +               reduce using rule 100 (TERM_PRIME -> empty .)
    -               reduce using rule 100 (TERM_PRIME -> empty .)
    >               reduce using rule 100 (TERM_PRIME -> empty .)
    <               reduce using rule 100 (TERM_PRIME -> empty .)
    DIFFERENT       reduce using rule 100 (TERM_PRIME -> empty .)
    EQUAL           reduce using rule 100 (TERM_PRIME -> empty .)
    AND             reduce using rule 100 (TERM_PRIME -> empty .)
    OR              reduce using rule 100 (TERM_PRIME -> empty .)
    ]               reduce using rule 100 (TERM_PRIME -> empty .)
    )               reduce using rule 100 (TERM_PRIME -> empty .)
    ;               reduce using rule 100 (TERM_PRIME -> empty .)
    TRUE            reduce using rule 100 (TERM_PRIME -> empty .)
    FALSE           reduce using rule 100 (TERM_PRIME -> empty .)
    (               reduce using rule 100 (TERM_PRIME -> empty .)
    *               reduce using rule 100 (TERM_PRIME -> empty .)
    /               reduce using rule 100 (TERM_PRIME -> empty .)
    ID              reduce using rule 100 (TERM_PRIME -> empty .)
    I_CONST         reduce using rule 100 (TERM_PRIME -> empty .)
    F_CONST         reduce using rule 100 (TERM_PRIME -> empty .)
    C_CONST         reduce using rule 100 (TERM_PRIME -> empty .)
    ,               reduce using rule 100 (TERM_PRIME -> empty .)
    TO              reduce using rule 100 (TERM_PRIME -> empty .)
    FOR             reduce using rule 100 (TERM_PRIME -> empty .)
    PRINT           reduce using rule 100 (TERM_PRIME -> empty .)
    IF              reduce using rule 100 (TERM_PRIME -> empty .)
    WHILE           reduce using rule 100 (TERM_PRIME -> empty .)
    }               reduce using rule 100 (TERM_PRIME -> empty .)
    RETURN          reduce using rule 100 (TERM_PRIME -> empty .)


state 94

    (101) FACTOR -> ( EXPRESSION . )

    )               shift and go to state 135


state 95

    (102) FACTOR -> * VAR_CT .

    *               reduce using rule 102 (FACTOR -> * VAR_CT .)
    /               reduce using rule 102 (FACTOR -> * VAR_CT .)
    +               reduce using rule 102 (FACTOR -> * VAR_CT .)
    -               reduce using rule 102 (FACTOR -> * VAR_CT .)
    >               reduce using rule 102 (FACTOR -> * VAR_CT .)
    <               reduce using rule 102 (FACTOR -> * VAR_CT .)
    DIFFERENT       reduce using rule 102 (FACTOR -> * VAR_CT .)
    EQUAL           reduce using rule 102 (FACTOR -> * VAR_CT .)
    AND             reduce using rule 102 (FACTOR -> * VAR_CT .)
    OR              reduce using rule 102 (FACTOR -> * VAR_CT .)
    ]               reduce using rule 102 (FACTOR -> * VAR_CT .)
    )               reduce using rule 102 (FACTOR -> * VAR_CT .)
    ;               reduce using rule 102 (FACTOR -> * VAR_CT .)
    TRUE            reduce using rule 102 (FACTOR -> * VAR_CT .)
    FALSE           reduce using rule 102 (FACTOR -> * VAR_CT .)
    (               reduce using rule 102 (FACTOR -> * VAR_CT .)
    ID              reduce using rule 102 (FACTOR -> * VAR_CT .)
    I_CONST         reduce using rule 102 (FACTOR -> * VAR_CT .)
    F_CONST         reduce using rule 102 (FACTOR -> * VAR_CT .)
    C_CONST         reduce using rule 102 (FACTOR -> * VAR_CT .)
    ,               reduce using rule 102 (FACTOR -> * VAR_CT .)
    TO              reduce using rule 102 (FACTOR -> * VAR_CT .)
    FOR             reduce using rule 102 (FACTOR -> * VAR_CT .)
    PRINT           reduce using rule 102 (FACTOR -> * VAR_CT .)
    IF              reduce using rule 102 (FACTOR -> * VAR_CT .)
    WHILE           reduce using rule 102 (FACTOR -> * VAR_CT .)
    }               reduce using rule 102 (FACTOR -> * VAR_CT .)
    RETURN          reduce using rule 102 (FACTOR -> * VAR_CT .)


state 96

    (103) FACTOR -> / VAR_CT .

    *               reduce using rule 103 (FACTOR -> / VAR_CT .)
    /               reduce using rule 103 (FACTOR -> / VAR_CT .)
    +               reduce using rule 103 (FACTOR -> / VAR_CT .)
    -               reduce using rule 103 (FACTOR -> / VAR_CT .)
    >               reduce using rule 103 (FACTOR -> / VAR_CT .)
    <               reduce using rule 103 (FACTOR -> / VAR_CT .)
    DIFFERENT       reduce using rule 103 (FACTOR -> / VAR_CT .)
    EQUAL           reduce using rule 103 (FACTOR -> / VAR_CT .)
    AND             reduce using rule 103 (FACTOR -> / VAR_CT .)
    OR              reduce using rule 103 (FACTOR -> / VAR_CT .)
    ]               reduce using rule 103 (FACTOR -> / VAR_CT .)
    )               reduce using rule 103 (FACTOR -> / VAR_CT .)
    ;               reduce using rule 103 (FACTOR -> / VAR_CT .)
    TRUE            reduce using rule 103 (FACTOR -> / VAR_CT .)
    FALSE           reduce using rule 103 (FACTOR -> / VAR_CT .)
    (               reduce using rule 103 (FACTOR -> / VAR_CT .)
    ID              reduce using rule 103 (FACTOR -> / VAR_CT .)
    I_CONST         reduce using rule 103 (FACTOR -> / VAR_CT .)
    F_CONST         reduce using rule 103 (FACTOR -> / VAR_CT .)
    C_CONST         reduce using rule 103 (FACTOR -> / VAR_CT .)
    ,               reduce using rule 103 (FACTOR -> / VAR_CT .)
    TO              reduce using rule 103 (FACTOR -> / VAR_CT .)
    FOR             reduce using rule 103 (FACTOR -> / VAR_CT .)
    PRINT           reduce using rule 103 (FACTOR -> / VAR_CT .)
    IF              reduce using rule 103 (FACTOR -> / VAR_CT .)
    WHILE           reduce using rule 103 (FACTOR -> / VAR_CT .)
    }               reduce using rule 103 (FACTOR -> / VAR_CT .)
    RETURN          reduce using rule 103 (FACTOR -> / VAR_CT .)


state 97

    (106) VAR_CT -> I_CONST add_operand .

    *               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    /               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    +               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    -               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    >               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    <               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    DIFFERENT       reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    EQUAL           reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    AND             reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    OR              reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    ]               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    )               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    ;               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    TRUE            reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    FALSE           reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    (               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    ID              reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    I_CONST         reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    F_CONST         reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    C_CONST         reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    ,               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    TO              reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    FOR             reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    PRINT           reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    IF              reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    WHILE           reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    }               reduce using rule 106 (VAR_CT -> I_CONST add_operand .)
    RETURN          reduce using rule 106 (VAR_CT -> I_CONST add_operand .)


state 98

    (107) VAR_CT -> F_CONST add_operand .

    *               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    /               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    +               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    -               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    >               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    <               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    DIFFERENT       reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    EQUAL           reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    AND             reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    OR              reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    ]               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    )               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    ;               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    TRUE            reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    FALSE           reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    (               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    ID              reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    I_CONST         reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    F_CONST         reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    C_CONST         reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    ,               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    TO              reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    FOR             reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    PRINT           reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    IF              reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    WHILE           reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    }               reduce using rule 107 (VAR_CT -> F_CONST add_operand .)
    RETURN          reduce using rule 107 (VAR_CT -> F_CONST add_operand .)


state 99

    (108) VAR_CT -> C_CONST add_operand .

    *               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    /               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    +               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    -               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    >               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    <               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    DIFFERENT       reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    EQUAL           reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    AND             reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    OR              reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    ]               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    )               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    ;               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    TRUE            reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    FALSE           reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    (               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    ID              reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    I_CONST         reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    F_CONST         reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    C_CONST         reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    ,               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    TO              reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    FOR             reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    PRINT           reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    IF              reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    WHILE           reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    }               reduce using rule 108 (VAR_CT -> C_CONST add_operand .)
    RETURN          reduce using rule 108 (VAR_CT -> C_CONST add_operand .)


state 100

    (49) FUNC_CALL -> ID . ( EXPRESSION FUNC_CALL_PRIME )
    (77) DESCRIBE_STMT -> ID . . DESCRIBE ( )
    (20) VARIABLE -> ID . get_variable
    (21) VARIABLE -> ID . [ EXPRESSION ]
    (105) VAR_CT -> ID . add_operand
    (19) get_variable -> .
    (44) add_operand -> .

    (               shift and go to state 136
    .               shift and go to state 137
    [               shift and go to state 139
    =               reduce using rule 19 (get_variable -> .)
    *               reduce using rule 44 (add_operand -> .)
    /               reduce using rule 44 (add_operand -> .)
    +               reduce using rule 44 (add_operand -> .)
    -               reduce using rule 44 (add_operand -> .)
    >               reduce using rule 44 (add_operand -> .)
    <               reduce using rule 44 (add_operand -> .)
    DIFFERENT       reduce using rule 44 (add_operand -> .)
    EQUAL           reduce using rule 44 (add_operand -> .)
    AND             reduce using rule 44 (add_operand -> .)
    OR              reduce using rule 44 (add_operand -> .)
    ;               reduce using rule 44 (add_operand -> .)

    get_variable                   shift and go to state 138
    add_operand                    shift and go to state 72

state 101

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK . } print_aux

    }               shift and go to state 140


state 102

    (33) BLOCK -> STATEMENT . BLOCK
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    STATEMENT                      shift and go to state 102
    BLOCK                          shift and go to state 141
    empty                          shift and go to state 103
    ASSIGNATION                    shift and go to state 104
    FUNC_CALL                      shift and go to state 105
    EXPRESSION                     shift and go to state 106
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 103

    (34) BLOCK -> empty .

    }               reduce using rule 34 (BLOCK -> empty .)
    RETURN          reduce using rule 34 (BLOCK -> empty .)


state 104

    (35) STATEMENT -> ASSIGNATION .
    (76) FOR_STMT -> ASSIGNATION . check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (71) check_exact_type_for -> .

    FOR             reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    ID              reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    PRINT           reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    IF              reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    WHILE           reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    TRUE            reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    FALSE           reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    (               reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    *               reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    /               reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    I_CONST         reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    F_CONST         reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    C_CONST         reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    }               reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    RETURN          reduce using rule 35 (STATEMENT -> ASSIGNATION .)
    TO              reduce using rule 71 (check_exact_type_for -> .)

    check_exact_type_for           shift and go to state 142

state 105

    (36) STATEMENT -> FUNC_CALL .

    FOR             reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    ID              reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    PRINT           reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    IF              reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    WHILE           reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    TRUE            reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    FALSE           reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    (               reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    *               reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    /               reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    I_CONST         reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    F_CONST         reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    C_CONST         reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    }               reduce using rule 36 (STATEMENT -> FUNC_CALL .)
    RETURN          reduce using rule 36 (STATEMENT -> FUNC_CALL .)


state 106

    (37) STATEMENT -> EXPRESSION . ;

    ;               shift and go to state 143


state 107

    (38) STATEMENT -> WRITE . ;

    ;               shift and go to state 144


state 108

    (39) STATEMENT -> CONDITION .

    FOR             reduce using rule 39 (STATEMENT -> CONDITION .)
    ID              reduce using rule 39 (STATEMENT -> CONDITION .)
    PRINT           reduce using rule 39 (STATEMENT -> CONDITION .)
    IF              reduce using rule 39 (STATEMENT -> CONDITION .)
    WHILE           reduce using rule 39 (STATEMENT -> CONDITION .)
    TRUE            reduce using rule 39 (STATEMENT -> CONDITION .)
    FALSE           reduce using rule 39 (STATEMENT -> CONDITION .)
    (               reduce using rule 39 (STATEMENT -> CONDITION .)
    *               reduce using rule 39 (STATEMENT -> CONDITION .)
    /               reduce using rule 39 (STATEMENT -> CONDITION .)
    I_CONST         reduce using rule 39 (STATEMENT -> CONDITION .)
    F_CONST         reduce using rule 39 (STATEMENT -> CONDITION .)
    C_CONST         reduce using rule 39 (STATEMENT -> CONDITION .)
    }               reduce using rule 39 (STATEMENT -> CONDITION .)
    RETURN          reduce using rule 39 (STATEMENT -> CONDITION .)


state 109

    (40) STATEMENT -> WHILE_STMT .

    FOR             reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    ID              reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    PRINT           reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    IF              reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    WHILE           reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    TRUE            reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    FALSE           reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    (               reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    *               reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    /               reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    I_CONST         reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    F_CONST         reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    C_CONST         reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    }               reduce using rule 40 (STATEMENT -> WHILE_STMT .)
    RETURN          reduce using rule 40 (STATEMENT -> WHILE_STMT .)


state 110

    (41) STATEMENT -> FOR_STMT .

    FOR             reduce using rule 41 (STATEMENT -> FOR_STMT .)
    ID              reduce using rule 41 (STATEMENT -> FOR_STMT .)
    PRINT           reduce using rule 41 (STATEMENT -> FOR_STMT .)
    IF              reduce using rule 41 (STATEMENT -> FOR_STMT .)
    WHILE           reduce using rule 41 (STATEMENT -> FOR_STMT .)
    TRUE            reduce using rule 41 (STATEMENT -> FOR_STMT .)
    FALSE           reduce using rule 41 (STATEMENT -> FOR_STMT .)
    (               reduce using rule 41 (STATEMENT -> FOR_STMT .)
    *               reduce using rule 41 (STATEMENT -> FOR_STMT .)
    /               reduce using rule 41 (STATEMENT -> FOR_STMT .)
    I_CONST         reduce using rule 41 (STATEMENT -> FOR_STMT .)
    F_CONST         reduce using rule 41 (STATEMENT -> FOR_STMT .)
    C_CONST         reduce using rule 41 (STATEMENT -> FOR_STMT .)
    }               reduce using rule 41 (STATEMENT -> FOR_STMT .)
    RETURN          reduce using rule 41 (STATEMENT -> FOR_STMT .)


state 111

    (42) STATEMENT -> DESCRIBE_STMT .

    FOR             reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    ID              reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    PRINT           reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    IF              reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    WHILE           reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    TRUE            reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    FALSE           reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    (               reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    *               reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    /               reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    I_CONST         reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    F_CONST         reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    C_CONST         reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    }               reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)
    RETURN          reduce using rule 42 (STATEMENT -> DESCRIBE_STMT .)


state 112

    (47) ASSIGNATION -> VARIABLE . = add_operator EXPRESSION ; add_assignation_quad

    =               shift and go to state 145


state 113

    (48) ASSIGNATION -> FOR . VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]

    ID              shift and go to state 147

    VARIABLE                       shift and go to state 146

state 114

    (54) WRITE -> PRINT . add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> PRINT . add_operator ( TITLE WRITE_PRIME )
    (43) add_operator -> .

    (               reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 148

state 115

    (67) CONDITION -> IF . ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT

    (               shift and go to state 149


state 116

    (70) WHILE_STMT -> WHILE . ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad

    (               shift and go to state 150


state 117

    (29) PARAM -> TIPO_SIMPLE ID . PARAM_PRIME
    (31) PARAM_PRIME -> . , TIPO_SIMPLE ID PARAM_PRIME
    (32) PARAM_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 152
    )               reduce using rule 109 (empty -> .)

    PARAM_PRIME                    shift and go to state 151
    empty                          shift and go to state 153

state 118

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) . { VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) . { VARS_PRIME BLOCK RETURN VAR_CT }

    {               shift and go to state 154


state 119

    (28) FUNCTION -> FUNC VOID ID ( PARAM ) . { VARS_PRIME BLOCK }

    {               shift and go to state 155


state 120

    (13) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .

    VAR             reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FUNC            reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    VOID            reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FOR             reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    ID              reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    PRINT           reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    IF              reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    WHILE           reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    TRUE            reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FALSE           reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    (               reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    *               reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    /               reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    I_CONST         reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    F_CONST         reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    C_CONST         reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    }               reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    RETURN          reduce using rule 13 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)


state 121

    (17) TIPO_PRIME -> , ID add_id . add_current_type TIPO_PRIME
    (12) add_current_type -> .

    ,               reduce using rule 12 (add_current_type -> .)
    ;               reduce using rule 12 (add_current_type -> .)

    add_current_type               shift and go to state 156

state 122

    (14) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .

    VAR             reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FUNC            reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    VOID            reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FOR             reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    ID              reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    PRINT           reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    IF              reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    WHILE           reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    TRUE            reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FALSE           reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    (               reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    *               reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    /               reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    I_CONST         reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    F_CONST         reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    C_CONST         reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    }               reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    RETURN          reduce using rule 14 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)


state 123

    (16) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ . EXPRESSION ] ;
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 157
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 124

    (15) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .

    VAR             reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    FUNC            reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    VOID            reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    FOR             reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    ID              reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    PRINT           reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    IF              reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    WHILE           reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    TRUE            reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    FALSE           reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    (               reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    *               reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    /               reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    I_CONST         reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    F_CONST         reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    C_CONST         reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    }               reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    RETURN          reduce using rule 15 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)


state 125

    (80) EXPRESSION_PRIME -> OR AND_EXP . EXPRESSION_PRIME
    (80) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (81) EXPRESSION_PRIME -> . empty
    (109) empty -> .

    OR              shift and go to state 75
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    EXPRESSION_PRIME               shift and go to state 158
    empty                          shift and go to state 76

state 126

    (83) AND_EXP_PRIME -> AND B_EXP . AND_EXP_PRIME
    (83) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (84) AND_EXP_PRIME -> . empty
    (109) empty -> .

    AND             shift and go to state 78
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    AND_EXP_PRIME                  shift and go to state 159
    empty                          shift and go to state 79

state 127

    (88) B_EXP_PRIME -> > add_operator . B_EXP aritmetics_operation
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    B_EXP                          shift and go to state 160
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 128

    (89) B_EXP_PRIME -> < add_operator . B_EXP aritmetics_operation
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    B_EXP                          shift and go to state 161
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 129

    (90) B_EXP_PRIME -> DIFFERENT add_operator . B_EXP aritmetics_operation
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    B_EXP                          shift and go to state 162
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 130

    (91) B_EXP_PRIME -> EQUAL add_operator . B_EXP aritmetics_operation
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    B_EXP                          shift and go to state 163
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 131

    (94) EXP_PRIME -> + add_operator . TERM EXP_PRIME aritmetics_operation
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    TERM                           shift and go to state 164
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 132

    (95) EXP_PRIME -> - add_operator . TERM EXP_PRIME aritmetics_operation
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    TERM                           shift and go to state 165
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 133

    (98) TERM_PRIME -> * add_operator . FACTOR aritmetics_operation TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    FACTOR                         shift and go to state 166
    VAR_CT                         shift and go to state 59

state 134

    (99) TERM_PRIME -> / add_operator . FACTOR aritmetics_operation TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    FACTOR                         shift and go to state 167
    VAR_CT                         shift and go to state 59

state 135

    (101) FACTOR -> ( EXPRESSION ) .

    *               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    /               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    +               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    -               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    >               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    <               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    DIFFERENT       reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    EQUAL           reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    AND             reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    OR              reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    ]               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    )               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    ;               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    TRUE            reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    FALSE           reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    (               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    ID              reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    I_CONST         reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    F_CONST         reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    C_CONST         reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    ,               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    TO              reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    FOR             reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    PRINT           reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    IF              reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    WHILE           reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    }               reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)
    RETURN          reduce using rule 101 (FACTOR -> ( EXPRESSION ) .)


state 136

    (49) FUNC_CALL -> ID ( . EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 168
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 137

    (77) DESCRIBE_STMT -> ID . . DESCRIBE ( )

    DESCRIBE        shift and go to state 169


state 138

    (20) VARIABLE -> ID get_variable .

    =               reduce using rule 20 (VARIABLE -> ID get_variable .)


state 139

    (21) VARIABLE -> ID [ . EXPRESSION ]
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 170
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 140

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } . print_aux
    (2) print_aux -> .

    $end            reduce using rule 2 (print_aux -> .)

    print_aux                      shift and go to state 171

state 141

    (33) BLOCK -> STATEMENT BLOCK .

    }               reduce using rule 33 (BLOCK -> STATEMENT BLOCK .)
    RETURN          reduce using rule 33 (BLOCK -> STATEMENT BLOCK .)


state 142

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for . TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for

    TO              shift and go to state 172


state 143

    (37) STATEMENT -> EXPRESSION ; .

    FOR             reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    ID              reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    PRINT           reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    IF              reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    WHILE           reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    TRUE            reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    FALSE           reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    (               reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    *               reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    /               reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    I_CONST         reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    F_CONST         reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    C_CONST         reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    }               reduce using rule 37 (STATEMENT -> EXPRESSION ; .)
    RETURN          reduce using rule 37 (STATEMENT -> EXPRESSION ; .)


state 144

    (38) STATEMENT -> WRITE ; .

    FOR             reduce using rule 38 (STATEMENT -> WRITE ; .)
    ID              reduce using rule 38 (STATEMENT -> WRITE ; .)
    PRINT           reduce using rule 38 (STATEMENT -> WRITE ; .)
    IF              reduce using rule 38 (STATEMENT -> WRITE ; .)
    WHILE           reduce using rule 38 (STATEMENT -> WRITE ; .)
    TRUE            reduce using rule 38 (STATEMENT -> WRITE ; .)
    FALSE           reduce using rule 38 (STATEMENT -> WRITE ; .)
    (               reduce using rule 38 (STATEMENT -> WRITE ; .)
    *               reduce using rule 38 (STATEMENT -> WRITE ; .)
    /               reduce using rule 38 (STATEMENT -> WRITE ; .)
    I_CONST         reduce using rule 38 (STATEMENT -> WRITE ; .)
    F_CONST         reduce using rule 38 (STATEMENT -> WRITE ; .)
    C_CONST         reduce using rule 38 (STATEMENT -> WRITE ; .)
    }               reduce using rule 38 (STATEMENT -> WRITE ; .)
    RETURN          reduce using rule 38 (STATEMENT -> WRITE ; .)


state 145

    (47) ASSIGNATION -> VARIABLE = . add_operator EXPRESSION ; add_assignation_quad
    (43) add_operator -> .

    TRUE            reduce using rule 43 (add_operator -> .)
    FALSE           reduce using rule 43 (add_operator -> .)
    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 173

state 146

    (48) ASSIGNATION -> FOR VARIABLE . = add_operator EXPRESSION add_assignation_for_quad

    =               shift and go to state 174


state 147

    (20) VARIABLE -> ID . get_variable
    (21) VARIABLE -> ID . [ EXPRESSION ]
    (19) get_variable -> .

    [               shift and go to state 139
    =               reduce using rule 19 (get_variable -> .)

    get_variable                   shift and go to state 138

state 148

    (54) WRITE -> PRINT add_operator . ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> PRINT add_operator . ( TITLE WRITE_PRIME )

    (               shift and go to state 175


state 149

    (67) CONDITION -> IF ( . EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 176
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 150

    (70) WHILE_STMT -> WHILE ( . append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (66) append_jump -> .

    TRUE            reduce using rule 66 (append_jump -> .)
    FALSE           reduce using rule 66 (append_jump -> .)
    (               reduce using rule 66 (append_jump -> .)
    *               reduce using rule 66 (append_jump -> .)
    /               reduce using rule 66 (append_jump -> .)
    ID              reduce using rule 66 (append_jump -> .)
    I_CONST         reduce using rule 66 (append_jump -> .)
    F_CONST         reduce using rule 66 (append_jump -> .)
    C_CONST         reduce using rule 66 (append_jump -> .)

    append_jump                    shift and go to state 177

state 151

    (29) PARAM -> TIPO_SIMPLE ID PARAM_PRIME .

    )               reduce using rule 29 (PARAM -> TIPO_SIMPLE ID PARAM_PRIME .)


state 152

    (31) PARAM_PRIME -> , . TIPO_SIMPLE ID PARAM_PRIME
    (22) TIPO_SIMPLE -> . INT add_type
    (23) TIPO_SIMPLE -> . FLOAT add_type
    (24) TIPO_SIMPLE -> . CHAR add_type

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    TIPO_SIMPLE                    shift and go to state 178

state 153

    (32) PARAM_PRIME -> empty .

    )               reduce using rule 32 (PARAM_PRIME -> empty .)


state 154

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { . VARS_PRIME BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { . VARS_PRIME BLOCK RETURN VAR_CT }
    (5) VARS_PRIME -> . VARS VARS_PRIME
    (6) VARS_PRIME -> . empty
    (13) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (14) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (15) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (16) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (109) empty -> .

    VAR             shift and go to state 11
    FOR             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    VARS_PRIME                     shift and go to state 179
    VARS                           shift and go to state 9
    empty                          shift and go to state 10

state 155

    (28) FUNCTION -> FUNC VOID ID ( PARAM ) { . VARS_PRIME BLOCK }
    (5) VARS_PRIME -> . VARS VARS_PRIME
    (6) VARS_PRIME -> . empty
    (13) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (14) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (15) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (16) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (109) empty -> .

    VAR             shift and go to state 11
    FOR             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)

    VARS_PRIME                     shift and go to state 180
    VARS                           shift and go to state 9
    empty                          shift and go to state 10

state 156

    (17) TIPO_PRIME -> , ID add_id add_current_type . TIPO_PRIME
    (17) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (18) TIPO_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 45
    ;               reduce using rule 109 (empty -> .)

    TIPO_PRIME                     shift and go to state 181
    empty                          shift and go to state 46

state 157

    (16) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION . ] ;

    ]               shift and go to state 182


state 158

    (80) EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .

    ]               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ;               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    RETURN          reduce using rule 80 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)


state 159

    (83) AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .

    OR              reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ]               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    )               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ;               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    TRUE            reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    FALSE           reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    (               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    *               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    /               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ID              reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    I_CONST         reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    F_CONST         reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    C_CONST         reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ,               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    TO              reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    FOR             reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    PRINT           reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    IF              reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    WHILE           reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    }               reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    RETURN          reduce using rule 83 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)


state 160

    (88) B_EXP_PRIME -> > add_operator B_EXP . aritmetics_operation
    (78) aritmetics_operation -> .

    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 183

state 161

    (89) B_EXP_PRIME -> < add_operator B_EXP . aritmetics_operation
    (78) aritmetics_operation -> .

    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 184

state 162

    (90) B_EXP_PRIME -> DIFFERENT add_operator B_EXP . aritmetics_operation
    (78) aritmetics_operation -> .

    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 185

state 163

    (91) B_EXP_PRIME -> EQUAL add_operator B_EXP . aritmetics_operation
    (78) aritmetics_operation -> .

    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 186

state 164

    (94) EXP_PRIME -> + add_operator TERM . EXP_PRIME aritmetics_operation
    (94) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (95) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (96) EXP_PRIME -> . empty
    (109) empty -> .

    +               shift and go to state 87
    -               shift and go to state 88
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    DIFFERENT       reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    EXP_PRIME                      shift and go to state 187
    empty                          shift and go to state 89

state 165

    (95) EXP_PRIME -> - add_operator TERM . EXP_PRIME aritmetics_operation
    (94) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (95) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (96) EXP_PRIME -> . empty
    (109) empty -> .

    +               shift and go to state 87
    -               shift and go to state 88
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    DIFFERENT       reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    EXP_PRIME                      shift and go to state 188
    empty                          shift and go to state 89

state 166

    (98) TERM_PRIME -> * add_operator FACTOR . aritmetics_operation TERM_PRIME
    (78) aritmetics_operation -> .

    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    +               reduce using rule 78 (aritmetics_operation -> .)
    -               reduce using rule 78 (aritmetics_operation -> .)
    >               reduce using rule 78 (aritmetics_operation -> .)
    <               reduce using rule 78 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 78 (aritmetics_operation -> .)
    EQUAL           reduce using rule 78 (aritmetics_operation -> .)
    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 189

state 167

    (99) TERM_PRIME -> / add_operator FACTOR . aritmetics_operation TERM_PRIME
    (78) aritmetics_operation -> .

    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    +               reduce using rule 78 (aritmetics_operation -> .)
    -               reduce using rule 78 (aritmetics_operation -> .)
    >               reduce using rule 78 (aritmetics_operation -> .)
    <               reduce using rule 78 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 78 (aritmetics_operation -> .)
    EQUAL           reduce using rule 78 (aritmetics_operation -> .)
    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 190

state 168

    (49) FUNC_CALL -> ID ( EXPRESSION . FUNC_CALL_PRIME )
    (50) FUNC_CALL_PRIME -> . EXPRESSION FUNC_CALL_PRIME
    (51) FUNC_CALL_PRIME -> . empty
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (109) empty -> .
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    )               reduce using rule 109 (empty -> .)
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 191
    FUNC_CALL_PRIME                shift and go to state 192
    empty                          shift and go to state 193
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 169

    (77) DESCRIBE_STMT -> ID . DESCRIBE . ( )

    (               shift and go to state 194


state 170

    (21) VARIABLE -> ID [ EXPRESSION . ]

    ]               shift and go to state 195


state 171

    (1) PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux .

    $end            reduce using rule 1 (PROGRAM -> PROG add_type ID add_id ; save_ids VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } print_aux .)


state 172

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO . ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for

    (               shift and go to state 196


state 173

    (47) ASSIGNATION -> VARIABLE = add_operator . EXPRESSION ; add_assignation_quad
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 197
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 174

    (48) ASSIGNATION -> FOR VARIABLE = . add_operator EXPRESSION add_assignation_for_quad
    (43) add_operator -> .

    TRUE            reduce using rule 43 (add_operator -> .)
    FALSE           reduce using rule 43 (add_operator -> .)
    (               reduce using rule 43 (add_operator -> .)
    *               reduce using rule 43 (add_operator -> .)
    /               reduce using rule 43 (add_operator -> .)
    ID              reduce using rule 43 (add_operator -> .)
    I_CONST         reduce using rule 43 (add_operator -> .)
    F_CONST         reduce using rule 43 (add_operator -> .)
    C_CONST         reduce using rule 43 (add_operator -> .)

    add_operator                   shift and go to state 198

state 175

    (54) WRITE -> PRINT add_operator ( . EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> PRINT add_operator ( . TITLE WRITE_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TITLE           shift and go to state 200
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 199
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 176

    (67) CONDITION -> IF ( EXPRESSION . pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (64) pop_operand -> .

    )               reduce using rule 64 (pop_operand -> .)

    pop_operand                    shift and go to state 201

state 177

    (70) WHILE_STMT -> WHILE ( append_jump . EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 202
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 178

    (31) PARAM_PRIME -> , TIPO_SIMPLE . ID PARAM_PRIME

    ID              shift and go to state 203


state 179

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME . BLOCK RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME . BLOCK RETURN VAR_CT }
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    RETURN          reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    BLOCK                          shift and go to state 204
    EXPRESSION                     shift and go to state 106
    VAR_CT                         shift and go to state 59
    STATEMENT                      shift and go to state 102
    empty                          shift and go to state 103
    ASSIGNATION                    shift and go to state 104
    FUNC_CALL                      shift and go to state 105
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56

state 180

    (28) FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME . BLOCK }
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    BLOCK                          shift and go to state 205
    STATEMENT                      shift and go to state 102
    empty                          shift and go to state 103
    ASSIGNATION                    shift and go to state 104
    FUNC_CALL                      shift and go to state 105
    EXPRESSION                     shift and go to state 106
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 181

    (17) TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME .

    ;               reduce using rule 17 (TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME .)


state 182

    (16) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] . ;

    ;               shift and go to state 206


state 183

    (88) B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 88 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)


state 184

    (89) B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 89 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)


state 185

    (90) B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 90 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)


state 186

    (91) B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 91 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)


state 187

    (94) EXP_PRIME -> + add_operator TERM EXP_PRIME . aritmetics_operation
    (78) aritmetics_operation -> .

    >               reduce using rule 78 (aritmetics_operation -> .)
    <               reduce using rule 78 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 78 (aritmetics_operation -> .)
    EQUAL           reduce using rule 78 (aritmetics_operation -> .)
    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 207

state 188

    (95) EXP_PRIME -> - add_operator TERM EXP_PRIME . aritmetics_operation
    (78) aritmetics_operation -> .

    >               reduce using rule 78 (aritmetics_operation -> .)
    <               reduce using rule 78 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 78 (aritmetics_operation -> .)
    EQUAL           reduce using rule 78 (aritmetics_operation -> .)
    AND             reduce using rule 78 (aritmetics_operation -> .)
    OR              reduce using rule 78 (aritmetics_operation -> .)
    ]               reduce using rule 78 (aritmetics_operation -> .)
    )               reduce using rule 78 (aritmetics_operation -> .)
    ;               reduce using rule 78 (aritmetics_operation -> .)
    TRUE            reduce using rule 78 (aritmetics_operation -> .)
    FALSE           reduce using rule 78 (aritmetics_operation -> .)
    (               reduce using rule 78 (aritmetics_operation -> .)
    *               reduce using rule 78 (aritmetics_operation -> .)
    /               reduce using rule 78 (aritmetics_operation -> .)
    ID              reduce using rule 78 (aritmetics_operation -> .)
    I_CONST         reduce using rule 78 (aritmetics_operation -> .)
    F_CONST         reduce using rule 78 (aritmetics_operation -> .)
    C_CONST         reduce using rule 78 (aritmetics_operation -> .)
    ,               reduce using rule 78 (aritmetics_operation -> .)
    TO              reduce using rule 78 (aritmetics_operation -> .)
    FOR             reduce using rule 78 (aritmetics_operation -> .)
    PRINT           reduce using rule 78 (aritmetics_operation -> .)
    IF              reduce using rule 78 (aritmetics_operation -> .)
    WHILE           reduce using rule 78 (aritmetics_operation -> .)
    }               reduce using rule 78 (aritmetics_operation -> .)
    RETURN          reduce using rule 78 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 208

state 189

    (98) TERM_PRIME -> * add_operator FACTOR aritmetics_operation . TERM_PRIME
    (98) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (99) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (100) TERM_PRIME -> . empty
    (109) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 91
    /               shift and go to state 92
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    DIFFERENT       reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

  ! *               [ reduce using rule 109 (empty -> .) ]
  ! /               [ reduce using rule 109 (empty -> .) ]

    TERM_PRIME                     shift and go to state 209
    empty                          shift and go to state 93

state 190

    (99) TERM_PRIME -> / add_operator FACTOR aritmetics_operation . TERM_PRIME
    (98) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (99) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (100) TERM_PRIME -> . empty
    (109) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 91
    /               shift and go to state 92
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    DIFFERENT       reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    TO              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

  ! *               [ reduce using rule 109 (empty -> .) ]
  ! /               [ reduce using rule 109 (empty -> .) ]

    TERM_PRIME                     shift and go to state 210
    empty                          shift and go to state 93

state 191

    (50) FUNC_CALL_PRIME -> EXPRESSION . FUNC_CALL_PRIME
    (50) FUNC_CALL_PRIME -> . EXPRESSION FUNC_CALL_PRIME
    (51) FUNC_CALL_PRIME -> . empty
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (109) empty -> .
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    )               reduce using rule 109 (empty -> .)
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 191
    FUNC_CALL_PRIME                shift and go to state 211
    empty                          shift and go to state 193
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 192

    (49) FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME . )

    )               shift and go to state 212


state 193

    (51) FUNC_CALL_PRIME -> empty .

    )               reduce using rule 51 (FUNC_CALL_PRIME -> empty .)


state 194

    (77) DESCRIBE_STMT -> ID . DESCRIBE ( . )

    )               shift and go to state 213


state 195

    (21) VARIABLE -> ID [ EXPRESSION ] .

    =               reduce using rule 21 (VARIABLE -> ID [ EXPRESSION ] .)


state 196

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( . EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 214
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 197

    (47) ASSIGNATION -> VARIABLE = add_operator EXPRESSION . ; add_assignation_quad

    ;               shift and go to state 215


state 198

    (48) ASSIGNATION -> FOR VARIABLE = add_operator . EXPRESSION add_assignation_for_quad
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 216
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 199

    (54) WRITE -> PRINT add_operator ( EXPRESSION . print_quad WRITE_PRIME )
    (52) print_quad -> .

    ,               reduce using rule 52 (print_quad -> .)
    )               reduce using rule 52 (print_quad -> .)

    print_quad                     shift and go to state 217

state 200

    (55) WRITE -> PRINT add_operator ( TITLE . WRITE_PRIME )
    (56) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (57) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (58) WRITE_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 109 (empty -> .)

    WRITE_PRIME                    shift and go to state 218
    empty                          shift and go to state 220

state 201

    (67) CONDITION -> IF ( EXPRESSION pop_operand . pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (65) pop_type -> .

    )               reduce using rule 65 (pop_type -> .)

    pop_type                       shift and go to state 221

state 202

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION . pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (64) pop_operand -> .

    )               reduce using rule 64 (pop_operand -> .)

    pop_operand                    shift and go to state 222

state 203

    (31) PARAM_PRIME -> , TIPO_SIMPLE ID . PARAM_PRIME
    (31) PARAM_PRIME -> . , TIPO_SIMPLE ID PARAM_PRIME
    (32) PARAM_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 152
    )               reduce using rule 109 (empty -> .)

    PARAM_PRIME                    shift and go to state 223
    empty                          shift and go to state 153

state 204

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK . RETURN EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK . RETURN VAR_CT }

    RETURN          shift and go to state 224


state 205

    (28) FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK . }

    }               shift and go to state 225


state 206

    (16) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .

    VAR             reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    FUNC            reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    VOID            reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    FOR             reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    ID              reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    PRINT           reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    IF              reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    WHILE           reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    TRUE            reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    FALSE           reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    (               reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    *               reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    /               reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    I_CONST         reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    F_CONST         reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    C_CONST         reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    }               reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    RETURN          reduce using rule 16 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)


state 207

    (94) EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .

    >               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    <               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    DIFFERENT       reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    EQUAL           reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    AND             reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    OR              reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ]               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    )               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ;               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    TRUE            reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    FALSE           reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    (               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    *               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    /               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ID              reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    I_CONST         reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    F_CONST         reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    C_CONST         reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ,               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    TO              reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    FOR             reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    PRINT           reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    IF              reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    WHILE           reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    }               reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    RETURN          reduce using rule 94 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)


state 208

    (95) EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .

    >               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    <               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    DIFFERENT       reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    EQUAL           reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    AND             reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    OR              reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ]               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    )               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ;               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    TRUE            reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    FALSE           reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    (               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    *               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    /               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ID              reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    I_CONST         reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    F_CONST         reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    C_CONST         reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ,               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    TO              reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    FOR             reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    PRINT           reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    IF              reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    WHILE           reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    }               reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    RETURN          reduce using rule 95 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)


state 209

    (98) TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .

    +               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    -               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    >               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    <               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    DIFFERENT       reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    EQUAL           reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    AND             reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    OR              reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ]               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    )               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ;               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TRUE            reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FALSE           reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    (               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    *               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    /               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ID              reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    I_CONST         reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    F_CONST         reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    C_CONST         reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ,               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TO              reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FOR             reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    PRINT           reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    IF              reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    WHILE           reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    }               reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    RETURN          reduce using rule 98 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)


state 210

    (99) TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .

    +               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    -               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    >               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    <               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    DIFFERENT       reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    EQUAL           reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    AND             reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    OR              reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ]               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    )               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ;               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TRUE            reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FALSE           reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    (               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    *               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    /               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ID              reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    I_CONST         reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    F_CONST         reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    C_CONST         reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ,               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TO              reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FOR             reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    PRINT           reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    IF              reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    WHILE           reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    }               reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    RETURN          reduce using rule 99 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)


state 211

    (50) FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME .

    )               reduce using rule 50 (FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME .)


state 212

    (49) FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .

    FOR             reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    ID              reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    PRINT           reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    IF              reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    WHILE           reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    TRUE            reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    FALSE           reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    (               reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    *               reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    /               reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    I_CONST         reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    F_CONST         reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    C_CONST         reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    }               reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    RETURN          reduce using rule 49 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)


state 213

    (77) DESCRIBE_STMT -> ID . DESCRIBE ( ) .

    FOR             reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    ID              reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    PRINT           reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    IF              reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    WHILE           reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    TRUE            reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    FALSE           reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    (               reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    *               reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    /               reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    I_CONST         reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    F_CONST         reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    C_CONST         reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    }               reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    RETURN          reduce using rule 77 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)


state 214

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION . check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (71) check_exact_type_for -> .

    )               reduce using rule 71 (check_exact_type_for -> .)

    check_exact_type_for           shift and go to state 226

state 215

    (47) ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; . add_assignation_quad
    (45) add_assignation_quad -> .

    TO              reduce using rule 45 (add_assignation_quad -> .)
    FOR             reduce using rule 45 (add_assignation_quad -> .)
    ID              reduce using rule 45 (add_assignation_quad -> .)
    PRINT           reduce using rule 45 (add_assignation_quad -> .)
    IF              reduce using rule 45 (add_assignation_quad -> .)
    WHILE           reduce using rule 45 (add_assignation_quad -> .)
    TRUE            reduce using rule 45 (add_assignation_quad -> .)
    FALSE           reduce using rule 45 (add_assignation_quad -> .)
    (               reduce using rule 45 (add_assignation_quad -> .)
    *               reduce using rule 45 (add_assignation_quad -> .)
    /               reduce using rule 45 (add_assignation_quad -> .)
    I_CONST         reduce using rule 45 (add_assignation_quad -> .)
    F_CONST         reduce using rule 45 (add_assignation_quad -> .)
    C_CONST         reduce using rule 45 (add_assignation_quad -> .)
    }               reduce using rule 45 (add_assignation_quad -> .)
    RETURN          reduce using rule 45 (add_assignation_quad -> .)

    add_assignation_quad           shift and go to state 227

state 216

    (48) ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION . add_assignation_for_quad
    (46) add_assignation_for_quad -> .

    TO              reduce using rule 46 (add_assignation_for_quad -> .)
    FOR             reduce using rule 46 (add_assignation_for_quad -> .)
    ID              reduce using rule 46 (add_assignation_for_quad -> .)
    PRINT           reduce using rule 46 (add_assignation_for_quad -> .)
    IF              reduce using rule 46 (add_assignation_for_quad -> .)
    WHILE           reduce using rule 46 (add_assignation_for_quad -> .)
    TRUE            reduce using rule 46 (add_assignation_for_quad -> .)
    FALSE           reduce using rule 46 (add_assignation_for_quad -> .)
    (               reduce using rule 46 (add_assignation_for_quad -> .)
    *               reduce using rule 46 (add_assignation_for_quad -> .)
    /               reduce using rule 46 (add_assignation_for_quad -> .)
    I_CONST         reduce using rule 46 (add_assignation_for_quad -> .)
    F_CONST         reduce using rule 46 (add_assignation_for_quad -> .)
    C_CONST         reduce using rule 46 (add_assignation_for_quad -> .)
    }               reduce using rule 46 (add_assignation_for_quad -> .)
    RETURN          reduce using rule 46 (add_assignation_for_quad -> .)

    add_assignation_for_quad       shift and go to state 228

state 217

    (54) WRITE -> PRINT add_operator ( EXPRESSION print_quad . WRITE_PRIME )
    (56) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (57) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (58) WRITE_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 109 (empty -> .)

    WRITE_PRIME                    shift and go to state 229
    empty                          shift and go to state 220

state 218

    (55) WRITE -> PRINT add_operator ( TITLE WRITE_PRIME . )

    )               shift and go to state 230


state 219

    (56) WRITE_PRIME -> , . add_print_operator EXPRESSION print_quad WRITE_PRIME
    (57) WRITE_PRIME -> , . add_print_operator TITLE print_quad WRITE_PRIME
    (53) add_print_operator -> .

    TITLE           reduce using rule 53 (add_print_operator -> .)
    TRUE            reduce using rule 53 (add_print_operator -> .)
    FALSE           reduce using rule 53 (add_print_operator -> .)
    (               reduce using rule 53 (add_print_operator -> .)
    *               reduce using rule 53 (add_print_operator -> .)
    /               reduce using rule 53 (add_print_operator -> .)
    ID              reduce using rule 53 (add_print_operator -> .)
    I_CONST         reduce using rule 53 (add_print_operator -> .)
    F_CONST         reduce using rule 53 (add_print_operator -> .)
    C_CONST         reduce using rule 53 (add_print_operator -> .)

    add_print_operator             shift and go to state 231

state 220

    (58) WRITE_PRIME -> empty .

    )               reduce using rule 58 (WRITE_PRIME -> empty .)


state 221

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type . ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT

    )               shift and go to state 232


state 222

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand . pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (65) pop_type -> .

    )               reduce using rule 65 (pop_type -> .)

    pop_type                       shift and go to state 233

state 223

    (31) PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME .

    )               reduce using rule 31 (PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME .)


state 224

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN . EXPRESSION }
    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN . VAR_CT }
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT

    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60

    EXPRESSION                     shift and go to state 234
    VAR_CT                         shift and go to state 235
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56

state 225

    (28) FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK } .

    FUNC            reduce using rule 28 (FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK } .)
    VOID            reduce using rule 28 (FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK } .)


state 226

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for . add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (72) add_final_counter_for -> .

    )               reduce using rule 72 (add_final_counter_for -> .)

    add_final_counter_for          shift and go to state 236

state 227

    (47) ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .

    TO              reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    FOR             reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    ID              reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    PRINT           reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    IF              reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    WHILE           reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    TRUE            reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    FALSE           reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    (               reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    *               reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    /               reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    I_CONST         reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    F_CONST         reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    C_CONST         reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    }               reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    RETURN          reduce using rule 47 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)


state 228

    (48) ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .

    TO              reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    FOR             reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    ID              reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    PRINT           reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    IF              reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    WHILE           reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    TRUE            reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    FALSE           reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    (               reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    *               reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    /               reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    I_CONST         reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    F_CONST         reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    C_CONST         reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    }               reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    RETURN          reduce using rule 48 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)


state 229

    (54) WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME . )

    )               shift and go to state 237


state 230

    (55) WRITE -> PRINT add_operator ( TITLE WRITE_PRIME ) .

    ;               reduce using rule 55 (WRITE -> PRINT add_operator ( TITLE WRITE_PRIME ) .)


state 231

    (56) WRITE_PRIME -> , add_print_operator . EXPRESSION print_quad WRITE_PRIME
    (57) WRITE_PRIME -> , add_print_operator . TITLE print_quad WRITE_PRIME
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    TITLE           shift and go to state 239
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    ID              shift and go to state 48
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 238
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 232

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) . { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT

    {               shift and go to state 240


state 233

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type . ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad

    )               shift and go to state 241


state 234

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION . }

    }               shift and go to state 242


state 235

    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT . }
    (104) FACTOR -> VAR_CT .

  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 243
    *               reduce using rule 104 (FACTOR -> VAR_CT .)
    /               reduce using rule 104 (FACTOR -> VAR_CT .)
    +               reduce using rule 104 (FACTOR -> VAR_CT .)
    -               reduce using rule 104 (FACTOR -> VAR_CT .)
    >               reduce using rule 104 (FACTOR -> VAR_CT .)
    <               reduce using rule 104 (FACTOR -> VAR_CT .)
    DIFFERENT       reduce using rule 104 (FACTOR -> VAR_CT .)
    EQUAL           reduce using rule 104 (FACTOR -> VAR_CT .)
    AND             reduce using rule 104 (FACTOR -> VAR_CT .)
    OR              reduce using rule 104 (FACTOR -> VAR_CT .)

  ! }               [ reduce using rule 104 (FACTOR -> VAR_CT .) ]


state 236

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for . check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (74) check_boolean_expression_for -> .

    )               reduce using rule 74 (check_boolean_expression_for -> .)

    check_boolean_expression_for   shift and go to state 244

state 237

    (54) WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME ) .

    ;               reduce using rule 54 (WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME ) .)


state 238

    (56) WRITE_PRIME -> , add_print_operator EXPRESSION . print_quad WRITE_PRIME
    (52) print_quad -> .

    ,               reduce using rule 52 (print_quad -> .)
    )               reduce using rule 52 (print_quad -> .)

    print_quad                     shift and go to state 245

state 239

    (57) WRITE_PRIME -> , add_print_operator TITLE . print_quad WRITE_PRIME
    (52) print_quad -> .

    ,               reduce using rule 52 (print_quad -> .)
    )               reduce using rule 52 (print_quad -> .)

    print_quad                     shift and go to state 246

state 240

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { . go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (59) go_to_false_quad -> .

    FOR             reduce using rule 59 (go_to_false_quad -> .)
    ID              reduce using rule 59 (go_to_false_quad -> .)
    PRINT           reduce using rule 59 (go_to_false_quad -> .)
    IF              reduce using rule 59 (go_to_false_quad -> .)
    WHILE           reduce using rule 59 (go_to_false_quad -> .)
    TRUE            reduce using rule 59 (go_to_false_quad -> .)
    FALSE           reduce using rule 59 (go_to_false_quad -> .)
    (               reduce using rule 59 (go_to_false_quad -> .)
    *               reduce using rule 59 (go_to_false_quad -> .)
    /               reduce using rule 59 (go_to_false_quad -> .)
    I_CONST         reduce using rule 59 (go_to_false_quad -> .)
    F_CONST         reduce using rule 59 (go_to_false_quad -> .)
    C_CONST         reduce using rule 59 (go_to_false_quad -> .)
    }               reduce using rule 59 (go_to_false_quad -> .)

    go_to_false_quad               shift and go to state 247

state 241

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) . { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad

    {               shift and go to state 248


state 242

    (26) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION } .

    FUNC            reduce using rule 26 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION } .)
    VOID            reduce using rule 26 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION } .)


state 243

    (27) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT } .

    FUNC            reduce using rule 27 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT } .)
    VOID            reduce using rule 27 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT } .)


state 244

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for . ) generate_for_quad DO { BLOCK } end_for

    )               shift and go to state 249


state 245

    (56) WRITE_PRIME -> , add_print_operator EXPRESSION print_quad . WRITE_PRIME
    (56) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (57) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (58) WRITE_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 109 (empty -> .)

    WRITE_PRIME                    shift and go to state 250
    empty                          shift and go to state 220

state 246

    (57) WRITE_PRIME -> , add_print_operator TITLE print_quad . WRITE_PRIME
    (56) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (57) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (58) WRITE_PRIME -> . empty
    (109) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 109 (empty -> .)

    WRITE_PRIME                    shift and go to state 251
    empty                          shift and go to state 220

state 247

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad . BLOCK } fill_go_to_false_quad ELSE_STMT
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 106
    BLOCK                          shift and go to state 252
    STATEMENT                      shift and go to state 102
    empty                          shift and go to state 103
    ASSIGNATION                    shift and go to state 104
    FUNC_CALL                      shift and go to state 105
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 248

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { . go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (59) go_to_false_quad -> .

    FOR             reduce using rule 59 (go_to_false_quad -> .)
    ID              reduce using rule 59 (go_to_false_quad -> .)
    PRINT           reduce using rule 59 (go_to_false_quad -> .)
    IF              reduce using rule 59 (go_to_false_quad -> .)
    WHILE           reduce using rule 59 (go_to_false_quad -> .)
    TRUE            reduce using rule 59 (go_to_false_quad -> .)
    FALSE           reduce using rule 59 (go_to_false_quad -> .)
    (               reduce using rule 59 (go_to_false_quad -> .)
    *               reduce using rule 59 (go_to_false_quad -> .)
    /               reduce using rule 59 (go_to_false_quad -> .)
    I_CONST         reduce using rule 59 (go_to_false_quad -> .)
    F_CONST         reduce using rule 59 (go_to_false_quad -> .)
    C_CONST         reduce using rule 59 (go_to_false_quad -> .)
    }               reduce using rule 59 (go_to_false_quad -> .)

    go_to_false_quad               shift and go to state 253

state 249

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) . generate_for_quad DO { BLOCK } end_for
    (73) generate_for_quad -> .

    DO              reduce using rule 73 (generate_for_quad -> .)

    generate_for_quad              shift and go to state 254

state 250

    (56) WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME .

    )               reduce using rule 56 (WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME .)


state 251

    (57) WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME .

    )               reduce using rule 57 (WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME .)


state 252

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK . } fill_go_to_false_quad ELSE_STMT

    }               shift and go to state 255


state 253

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad . BLOCK } fill_go_to_false_quad go_to_quad
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    EXPRESSION                     shift and go to state 106
    BLOCK                          shift and go to state 256
    STATEMENT                      shift and go to state 102
    empty                          shift and go to state 103
    ASSIGNATION                    shift and go to state 104
    FUNC_CALL                      shift and go to state 105
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 254

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad . DO { BLOCK } end_for

    DO              shift and go to state 257


state 255

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } . fill_go_to_false_quad ELSE_STMT
    (60) fill_go_to_false_quad -> .

    ELSE            reduce using rule 60 (fill_go_to_false_quad -> .)
    FOR             reduce using rule 60 (fill_go_to_false_quad -> .)
    ID              reduce using rule 60 (fill_go_to_false_quad -> .)
    PRINT           reduce using rule 60 (fill_go_to_false_quad -> .)
    IF              reduce using rule 60 (fill_go_to_false_quad -> .)
    WHILE           reduce using rule 60 (fill_go_to_false_quad -> .)
    TRUE            reduce using rule 60 (fill_go_to_false_quad -> .)
    FALSE           reduce using rule 60 (fill_go_to_false_quad -> .)
    (               reduce using rule 60 (fill_go_to_false_quad -> .)
    *               reduce using rule 60 (fill_go_to_false_quad -> .)
    /               reduce using rule 60 (fill_go_to_false_quad -> .)
    I_CONST         reduce using rule 60 (fill_go_to_false_quad -> .)
    F_CONST         reduce using rule 60 (fill_go_to_false_quad -> .)
    C_CONST         reduce using rule 60 (fill_go_to_false_quad -> .)
    }               reduce using rule 60 (fill_go_to_false_quad -> .)
    RETURN          reduce using rule 60 (fill_go_to_false_quad -> .)

    fill_go_to_false_quad          shift and go to state 258

state 256

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK . } fill_go_to_false_quad go_to_quad

    }               shift and go to state 259


state 257

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO . { BLOCK } end_for

    {               shift and go to state 260


state 258

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad . ELSE_STMT
    (68) ELSE_STMT -> . ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad
    (69) ELSE_STMT -> . empty
    (109) empty -> .

    ELSE            shift and go to state 262
    FOR             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    (               reduce using rule 109 (empty -> .)
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    I_CONST         reduce using rule 109 (empty -> .)
    F_CONST         reduce using rule 109 (empty -> .)
    C_CONST         reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    ELSE_STMT                      shift and go to state 261
    empty                          shift and go to state 263

state 259

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } . fill_go_to_false_quad go_to_quad
    (60) fill_go_to_false_quad -> .

    FOR             reduce using rule 60 (fill_go_to_false_quad -> .)
    ID              reduce using rule 60 (fill_go_to_false_quad -> .)
    PRINT           reduce using rule 60 (fill_go_to_false_quad -> .)
    IF              reduce using rule 60 (fill_go_to_false_quad -> .)
    WHILE           reduce using rule 60 (fill_go_to_false_quad -> .)
    TRUE            reduce using rule 60 (fill_go_to_false_quad -> .)
    FALSE           reduce using rule 60 (fill_go_to_false_quad -> .)
    (               reduce using rule 60 (fill_go_to_false_quad -> .)
    *               reduce using rule 60 (fill_go_to_false_quad -> .)
    /               reduce using rule 60 (fill_go_to_false_quad -> .)
    I_CONST         reduce using rule 60 (fill_go_to_false_quad -> .)
    F_CONST         reduce using rule 60 (fill_go_to_false_quad -> .)
    C_CONST         reduce using rule 60 (fill_go_to_false_quad -> .)
    }               reduce using rule 60 (fill_go_to_false_quad -> .)
    RETURN          reduce using rule 60 (fill_go_to_false_quad -> .)

    fill_go_to_false_quad          shift and go to state 264

state 260

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { . BLOCK } end_for
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    ASSIGNATION                    shift and go to state 104
    EXPRESSION                     shift and go to state 106
    BLOCK                          shift and go to state 265
    STATEMENT                      shift and go to state 102
    empty                          shift and go to state 103
    FUNC_CALL                      shift and go to state 105
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 261

    (67) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .

    FOR             reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    ID              reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    PRINT           reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    IF              reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    WHILE           reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    TRUE            reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    FALSE           reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    (               reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    *               reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    /               reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    I_CONST         reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    F_CONST         reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    C_CONST         reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    }               reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    RETURN          reduce using rule 67 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)


state 262

    (68) ELSE_STMT -> ELSE . { go_to_true_quad BLOCK } fill_go_to_true_quad

    {               shift and go to state 266


state 263

    (69) ELSE_STMT -> empty .

    FOR             reduce using rule 69 (ELSE_STMT -> empty .)
    ID              reduce using rule 69 (ELSE_STMT -> empty .)
    PRINT           reduce using rule 69 (ELSE_STMT -> empty .)
    IF              reduce using rule 69 (ELSE_STMT -> empty .)
    WHILE           reduce using rule 69 (ELSE_STMT -> empty .)
    TRUE            reduce using rule 69 (ELSE_STMT -> empty .)
    FALSE           reduce using rule 69 (ELSE_STMT -> empty .)
    (               reduce using rule 69 (ELSE_STMT -> empty .)
    *               reduce using rule 69 (ELSE_STMT -> empty .)
    /               reduce using rule 69 (ELSE_STMT -> empty .)
    I_CONST         reduce using rule 69 (ELSE_STMT -> empty .)
    F_CONST         reduce using rule 69 (ELSE_STMT -> empty .)
    C_CONST         reduce using rule 69 (ELSE_STMT -> empty .)
    }               reduce using rule 69 (ELSE_STMT -> empty .)
    RETURN          reduce using rule 69 (ELSE_STMT -> empty .)


state 264

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad . go_to_quad
    (63) go_to_quad -> .

    FOR             reduce using rule 63 (go_to_quad -> .)
    ID              reduce using rule 63 (go_to_quad -> .)
    PRINT           reduce using rule 63 (go_to_quad -> .)
    IF              reduce using rule 63 (go_to_quad -> .)
    WHILE           reduce using rule 63 (go_to_quad -> .)
    TRUE            reduce using rule 63 (go_to_quad -> .)
    FALSE           reduce using rule 63 (go_to_quad -> .)
    (               reduce using rule 63 (go_to_quad -> .)
    *               reduce using rule 63 (go_to_quad -> .)
    /               reduce using rule 63 (go_to_quad -> .)
    I_CONST         reduce using rule 63 (go_to_quad -> .)
    F_CONST         reduce using rule 63 (go_to_quad -> .)
    C_CONST         reduce using rule 63 (go_to_quad -> .)
    }               reduce using rule 63 (go_to_quad -> .)
    RETURN          reduce using rule 63 (go_to_quad -> .)

    go_to_quad                     shift and go to state 267

state 265

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK . } end_for

    }               shift and go to state 268


state 266

    (68) ELSE_STMT -> ELSE { . go_to_true_quad BLOCK } fill_go_to_true_quad
    (61) go_to_true_quad -> .

    FOR             reduce using rule 61 (go_to_true_quad -> .)
    ID              reduce using rule 61 (go_to_true_quad -> .)
    PRINT           reduce using rule 61 (go_to_true_quad -> .)
    IF              reduce using rule 61 (go_to_true_quad -> .)
    WHILE           reduce using rule 61 (go_to_true_quad -> .)
    TRUE            reduce using rule 61 (go_to_true_quad -> .)
    FALSE           reduce using rule 61 (go_to_true_quad -> .)
    (               reduce using rule 61 (go_to_true_quad -> .)
    *               reduce using rule 61 (go_to_true_quad -> .)
    /               reduce using rule 61 (go_to_true_quad -> .)
    I_CONST         reduce using rule 61 (go_to_true_quad -> .)
    F_CONST         reduce using rule 61 (go_to_true_quad -> .)
    C_CONST         reduce using rule 61 (go_to_true_quad -> .)
    }               reduce using rule 61 (go_to_true_quad -> .)

    go_to_true_quad                shift and go to state 269

state 267

    (70) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .

    FOR             reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    ID              reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    PRINT           reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    IF              reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    WHILE           reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    TRUE            reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    FALSE           reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    (               reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    *               reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    /               reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    I_CONST         reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    F_CONST         reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    C_CONST         reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    }               reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    RETURN          reduce using rule 70 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)


state 268

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } . end_for
    (75) end_for -> .

    FOR             reduce using rule 75 (end_for -> .)
    ID              reduce using rule 75 (end_for -> .)
    PRINT           reduce using rule 75 (end_for -> .)
    IF              reduce using rule 75 (end_for -> .)
    WHILE           reduce using rule 75 (end_for -> .)
    TRUE            reduce using rule 75 (end_for -> .)
    FALSE           reduce using rule 75 (end_for -> .)
    (               reduce using rule 75 (end_for -> .)
    *               reduce using rule 75 (end_for -> .)
    /               reduce using rule 75 (end_for -> .)
    I_CONST         reduce using rule 75 (end_for -> .)
    F_CONST         reduce using rule 75 (end_for -> .)
    C_CONST         reduce using rule 75 (end_for -> .)
    }               reduce using rule 75 (end_for -> .)
    RETURN          reduce using rule 75 (end_for -> .)

    end_for                        shift and go to state 270

state 269

    (68) ELSE_STMT -> ELSE { go_to_true_quad . BLOCK } fill_go_to_true_quad
    (33) BLOCK -> . STATEMENT BLOCK
    (34) BLOCK -> . empty
    (35) STATEMENT -> . ASSIGNATION
    (36) STATEMENT -> . FUNC_CALL
    (37) STATEMENT -> . EXPRESSION ;
    (38) STATEMENT -> . WRITE ;
    (39) STATEMENT -> . CONDITION
    (40) STATEMENT -> . WHILE_STMT
    (41) STATEMENT -> . FOR_STMT
    (42) STATEMENT -> . DESCRIBE_STMT
    (109) empty -> .
    (47) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (48) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (49) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (79) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (54) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (55) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (67) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (70) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (76) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (77) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (20) VARIABLE -> . ID get_variable
    (21) VARIABLE -> . ID [ EXPRESSION ]
    (82) AND_EXP -> . B_EXP AND_EXP_PRIME
    (85) B_EXP -> . TRUE
    (86) B_EXP -> . FALSE
    (87) B_EXP -> . EXP B_EXP_PRIME
    (93) EXP -> . TERM EXP_PRIME
    (97) TERM -> . FACTOR TERM_PRIME
    (101) FACTOR -> . ( EXPRESSION )
    (102) FACTOR -> . * VAR_CT
    (103) FACTOR -> . / VAR_CT
    (104) FACTOR -> . VAR_CT
    (105) VAR_CT -> . ID add_operand
    (106) VAR_CT -> . I_CONST add_operand
    (107) VAR_CT -> . F_CONST add_operand
    (108) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 109 (empty -> .)
    FOR             shift and go to state 113
    ID              shift and go to state 100
    PRINT           shift and go to state 114
    IF              shift and go to state 115
    WHILE           shift and go to state 116
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    (               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 60
    I_CONST         shift and go to state 61
    F_CONST         shift and go to state 62
    C_CONST         shift and go to state 63

    BLOCK                          shift and go to state 271
    STATEMENT                      shift and go to state 102
    empty                          shift and go to state 103
    ASSIGNATION                    shift and go to state 104
    FUNC_CALL                      shift and go to state 105
    EXPRESSION                     shift and go to state 106
    WRITE                          shift and go to state 107
    CONDITION                      shift and go to state 108
    WHILE_STMT                     shift and go to state 109
    FOR_STMT                       shift and go to state 110
    DESCRIBE_STMT                  shift and go to state 111
    VARIABLE                       shift and go to state 112
    AND_EXP                        shift and go to state 50
    B_EXP                          shift and go to state 51
    EXP                            shift and go to state 54
    TERM                           shift and go to state 55
    FACTOR                         shift and go to state 56
    VAR_CT                         shift and go to state 59

state 270

    (76) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .

    FOR             reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    ID              reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    PRINT           reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    IF              reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    WHILE           reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    TRUE            reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    FALSE           reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    (               reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    *               reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    /               reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    I_CONST         reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    F_CONST         reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    C_CONST         reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    }               reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    RETURN          reduce using rule 76 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)


state 271

    (68) ELSE_STMT -> ELSE { go_to_true_quad BLOCK . } fill_go_to_true_quad

    }               shift and go to state 272


state 272

    (68) ELSE_STMT -> ELSE { go_to_true_quad BLOCK } . fill_go_to_true_quad
    (62) fill_go_to_true_quad -> .

    FOR             reduce using rule 62 (fill_go_to_true_quad -> .)
    ID              reduce using rule 62 (fill_go_to_true_quad -> .)
    PRINT           reduce using rule 62 (fill_go_to_true_quad -> .)
    IF              reduce using rule 62 (fill_go_to_true_quad -> .)
    WHILE           reduce using rule 62 (fill_go_to_true_quad -> .)
    TRUE            reduce using rule 62 (fill_go_to_true_quad -> .)
    FALSE           reduce using rule 62 (fill_go_to_true_quad -> .)
    (               reduce using rule 62 (fill_go_to_true_quad -> .)
    *               reduce using rule 62 (fill_go_to_true_quad -> .)
    /               reduce using rule 62 (fill_go_to_true_quad -> .)
    I_CONST         reduce using rule 62 (fill_go_to_true_quad -> .)
    F_CONST         reduce using rule 62 (fill_go_to_true_quad -> .)
    C_CONST         reduce using rule 62 (fill_go_to_true_quad -> .)
    }               reduce using rule 62 (fill_go_to_true_quad -> .)
    RETURN          reduce using rule 62 (fill_go_to_true_quad -> .)

    fill_go_to_true_quad           shift and go to state 273

state 273

    (68) ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .

    FOR             reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    ID              reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    PRINT           reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    IF              reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    WHILE           reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    TRUE            reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    FALSE           reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    (               reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    *               reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    /               reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    I_CONST         reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    F_CONST         reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    C_CONST         reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    }               reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    RETURN          reduce using rule 68 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for * in state 56 resolved as shift
WARNING: shift/reduce conflict for / in state 56 resolved as shift
WARNING: shift/reduce conflict for * in state 189 resolved as shift
WARNING: shift/reduce conflict for / in state 189 resolved as shift
WARNING: shift/reduce conflict for * in state 190 resolved as shift
WARNING: shift/reduce conflict for / in state 190 resolved as shift
WARNING: shift/reduce conflict for } in state 235 resolved as shift
