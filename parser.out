Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
Rule 2     go_to_main -> <empty>
Rule 3     empty_global_variables_table -> <empty>
Rule 4     empty_local_variables_table -> <empty>
Rule 5     fill_go_to_main_quad -> <empty>
Rule 6     add_id -> <empty>
Rule 7     save_ids -> <empty>
Rule 8     save_parameter -> <empty>
Rule 9     save_function -> <empty>
Rule 10    VARS_PRIME -> VARS VARS_PRIME
Rule 11    VARS_PRIME -> empty
Rule 12    FUNCTION_PRIME -> FUNCTION FUNC_PRIME
Rule 13    FUNCTION_PRIME -> empty
Rule 14    FUNC_PRIME -> FUNCTION FUNC_PRIME
Rule 15    FUNC_PRIME -> empty
Rule 16    add_type -> <empty>
Rule 17    add_current_type -> <empty>
Rule 18    check_for_array_length -> <empty>
Rule 19    save_array -> <empty>
Rule 20    save_matrix -> <empty>
Rule 21    VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
Rule 22    VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
Rule 23    VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array
Rule 24    VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
Rule 25    TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME
Rule 26    TIPO_PRIME -> empty
Rule 27    get_variable -> <empty>
Rule 28    ver_quad_dimension_one_array -> <empty>
Rule 29    ver_quad_dimension_one_matrix -> <empty>
Rule 30    ver_quad_dimension_two_matrix -> <empty>
Rule 31    VARIABLE -> ID get_variable
Rule 32    VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
Rule 33    VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
Rule 34    TIPO_SIMPLE -> INT add_type
Rule 35    TIPO_SIMPLE -> FLOAT add_type
Rule 36    TIPO_SIMPLE -> CHAR add_type
Rule 37    TIPO_COMP -> DATAFRAME
Rule 38    add_function_type -> <empty>
Rule 39    save_function_as_variable -> <empty>
Rule 40    return_quad -> <empty>
Rule 41    FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
Rule 42    FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
Rule 43    add_parameters -> <empty>
Rule 44    PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
Rule 45    PARAM -> empty
Rule 46    PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
Rule 47    PARAM_PRIME -> empty
Rule 48    BLOCK -> STATEMENT BLOCK
Rule 49    BLOCK -> empty
Rule 50    STATEMENT -> ASSIGNATION
Rule 51    STATEMENT -> FUNC_CALL
Rule 52    STATEMENT -> EXPRESSION ;
Rule 53    STATEMENT -> WRITE ;
Rule 54    STATEMENT -> CONDITION
Rule 55    STATEMENT -> WHILE_STMT
Rule 56    STATEMENT -> FOR_STMT
Rule 57    STATEMENT -> DESCRIBE_STMT
Rule 58    add_operator -> <empty>
Rule 59    add_operand -> <empty>
Rule 60    add_assignation_quad -> <empty>
Rule 61    add_assignation_for_quad -> <empty>
Rule 62    functions_assignation -> <empty>
Rule 63    ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad
Rule 64    ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
Rule 65    ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
Rule 66    era_quad -> <empty>
Rule 67    param_quad -> <empty>
Rule 68    go_sub_quad -> <empty>
Rule 69    FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
Rule 70    FUNC_CALL_PRIME -> , EXPRESSION param_quad FUNC_CALL_PRIME
Rule 71    FUNC_CALL_PRIME -> empty
Rule 72    print_quad -> <empty>
Rule 73    add_print_operator -> <empty>
Rule 74    WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
Rule 75    WRITE -> PRINT add_operator ( TITLE WRITE_PRIME )
Rule 76    WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME
Rule 77    WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME
Rule 78    WRITE_PRIME -> empty
Rule 79    go_to_false_quad -> <empty>
Rule 80    fill_go_to_false_quad -> <empty>
Rule 81    fill_go_to_false_quad_if -> <empty>
Rule 82    go_to_true_quad -> <empty>
Rule 83    fill_go_to_true_quad -> <empty>
Rule 84    go_to_quad -> <empty>
Rule 85    pop_operand -> <empty>
Rule 86    pop_type -> <empty>
Rule 87    append_jump -> <empty>
Rule 88    CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
Rule 89    ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad
Rule 90    ELSE_STMT -> empty pop_operand
Rule 91    WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
Rule 92    check_exact_type_for -> <empty>
Rule 93    add_final_counter_for -> <empty>
Rule 94    generate_for_quad -> <empty>
Rule 95    check_boolean_expression_for -> <empty>
Rule 96    end_for -> <empty>
Rule 97    FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
Rule 98    DESCRIBE_STMT -> ID . DESCRIBE ( )
Rule 99    aritmetics_operation -> <empty>
Rule 100   EXPRESSION -> AND_EXP EXPRESSION_PRIME
Rule 101   EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME
Rule 102   EXPRESSION_PRIME -> empty
Rule 103   AND_EXP -> B_EXP AND_EXP_PRIME
Rule 104   AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME
Rule 105   AND_EXP_PRIME -> empty
Rule 106   B_EXP -> TRUE
Rule 107   B_EXP -> FALSE
Rule 108   B_EXP -> EXP B_EXP_PRIME
Rule 109   B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation
Rule 110   B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation
Rule 111   B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation
Rule 112   B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation
Rule 113   B_EXP_PRIME -> empty
Rule 114   EXP -> TERM EXP_PRIME
Rule 115   EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation
Rule 116   EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation
Rule 117   EXP_PRIME -> empty
Rule 118   TERM -> FACTOR TERM_PRIME
Rule 119   TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME
Rule 120   TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME
Rule 121   TERM_PRIME -> empty
Rule 122   FACTOR -> ( EXPRESSION )
Rule 123   FACTOR -> * VAR_CT
Rule 124   FACTOR -> / VAR_CT
Rule 125   FACTOR -> VAR_CT
Rule 126   VAR_CT -> ID add_operand
Rule 127   VAR_CT -> I_CONST add_operand
Rule 128   VAR_CT -> F_CONST add_operand
Rule 129   VAR_CT -> C_CONST add_operand
Rule 130   VAR_CT -> FUNC_CALL
Rule 131   VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
Rule 132   VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
Rule 133   empty -> <empty>

Terminals, with rules where they appear

(                    : 41 42 69 74 75 88 91 97 98 122
)                    : 41 42 69 74 75 88 91 97 98 122
*                    : 119 123
+                    : 115
,                    : 25 46 70 76 77
-                    : 116
.                    : 98
/                    : 120 124
;                    : 1 21 22 23 24 41 52 53 63
<                    : 110
=                    : 63 64 65
>                    : 109
AND                  : 104
CHAR                 : 36
C_CONST              : 129
DATAFRAME            : 37
DESCRIBE             : 98
DIFFERENT            : 111
DO                   : 97
ELSE                 : 89
EQUAL                : 112
FALSE                : 107
FLOAT                : 35
FOR                  : 64
FUNC                 : 41 42 69
F_CONST              : 128
ID                   : 1 21 22 23 24 25 31 32 33 41 42 44 46 69 98 126 131 132
IF                   : 88
INT                  : 34
I_CONST              : 127
MAIN                 : 1
OR                   : 101
PRINT                : 74 75
PROG                 : 1
RETURN               : 41
TITLE                : 75 77
TO                   : 97
TRUE                 : 106
VAR                  : 21 22 23 24
VOID                 : 1 42
WHILE                : 91
[                    : 23 24 24 32 33 33 131 132 132
]                    : 23 24 24 32 33 33 131 132 132
error                : 
{                    : 1 41 42 88 89 91 97
}                    : 1 41 42 88 89 91 97

Nonterminals, with rules where they appear

AND_EXP              : 100 101
AND_EXP_PRIME        : 103 104
ASSIGNATION          : 50 97
BLOCK                : 1 41 42 48 88 89 91 97
B_EXP                : 103 104 109 110 111 112
B_EXP_PRIME          : 108
CONDITION            : 54
DESCRIBE_STMT        : 57
ELSE_STMT            : 88
EXP                  : 108
EXPRESSION           : 23 24 24 32 33 33 41 52 63 64 69 70 74 76 88 91 97 122 131 132 132
EXPRESSION_PRIME     : 100 101
EXP_PRIME            : 114 115 116
FACTOR               : 118 119 120
FOR_STMT             : 56
FUNCTION             : 12 14
FUNCTION_PRIME       : 1
FUNC_CALL            : 51 65 130
FUNC_CALL_PRIME      : 69 70
FUNC_PRIME           : 12 14
PARAM                : 41 42
PARAM_PRIME          : 44 46
PROGRAM              : 0
STATEMENT            : 48
TERM                 : 114 115 116
TERM_PRIME           : 118 119 120
TIPO_COMP            : 21
TIPO_PRIME           : 21 22 25
TIPO_SIMPLE          : 22 23 24 41 44 46
VARIABLE             : 63 64 65
VARS                 : 10
VARS_PRIME           : 1 1 10 41 42
VAR_CT               : 123 124 125
WHILE_STMT           : 55
WRITE                : 53
WRITE_PRIME          : 74 75 76 77
add_assignation_for_quad : 64
add_assignation_quad : 63 65
add_current_type     : 25
add_final_counter_for : 97
add_function_type    : 41
add_id               : 1 21 22 23 24 25 32 33 41 42 44 46 131 132
add_operand          : 126 127 128 129
add_operator         : 63 64 65 74 75 109 110 111 112 115 116 119 120
add_parameters       : 41 42
add_print_operator   : 76 77
add_type             : 1 34 35 36 42
append_jump          : 91
aritmetics_operation : 109 110 111 112 115 116 119 120
check_boolean_expression_for : 97
check_exact_type_for : 97 97
check_for_array_length : 23 24 24
empty                : 11 13 15 26 45 47 49 71 78 90 102 105 113 117 121
empty_global_variables_table : 1
empty_local_variables_table : 41 42
end_for              : 97
era_quad             : 69
fill_go_to_false_quad : 91
fill_go_to_false_quad_if : 88
fill_go_to_main_quad : 1
fill_go_to_true_quad : 89
functions_assignation : 65
generate_for_quad    : 97
get_variable         : 31
go_sub_quad          : 69
go_to_false_quad     : 88 91
go_to_main           : 1
go_to_quad           : 91
go_to_true_quad      : 89
param_quad           : 69 70
pop_operand          : 90 91
pop_type             : 88 91
print_quad           : 74 76 77
return_quad          : 41
save_array           : 23
save_function        : 1 41 42
save_function_as_variable : 41
save_ids             : 21 22
save_matrix          : 24
save_parameter       : 44 46
ver_quad_dimension_one_array : 32 131
ver_quad_dimension_one_matrix : 33 132
ver_quad_dimension_two_matrix : 33 132

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    PROG            shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROG . add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 3

state 3

    (1) PROGRAM -> PROG add_type . ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    ID              shift and go to state 4


state 4

    (1) PROGRAM -> PROG add_type ID . add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (6) add_id -> .

    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 5

state 5

    (1) PROGRAM -> PROG add_type ID add_id . ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    ;               shift and go to state 6


state 6

    (1) PROGRAM -> PROG add_type ID add_id ; . go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (2) go_to_main -> .

    VAR             reduce using rule 2 (go_to_main -> .)
    FUNC            reduce using rule 2 (go_to_main -> .)
    VOID            reduce using rule 2 (go_to_main -> .)

    go_to_main                     shift and go to state 7

state 7

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main . save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (9) save_function -> .

    VAR             reduce using rule 9 (save_function -> .)
    FUNC            reduce using rule 9 (save_function -> .)
    VOID            reduce using rule 9 (save_function -> .)

    save_function                  shift and go to state 8

state 8

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function . VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (21) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (22) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (23) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (133) empty -> .

    VAR             shift and go to state 12
    FUNC            reduce using rule 133 (empty -> .)
    VOID            reduce using rule 133 (empty -> .)

    VARS_PRIME                     shift and go to state 9
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 9

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME . FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (12) FUNCTION_PRIME -> . FUNCTION FUNC_PRIME
    (13) FUNCTION_PRIME -> . empty
    (41) FUNCTION -> . FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (42) FUNCTION -> . FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (133) empty -> .

    FUNC            shift and go to state 16
    VOID            reduce using rule 133 (empty -> .)

    FUNCTION_PRIME                 shift and go to state 13
    FUNCTION                       shift and go to state 14
    empty                          shift and go to state 15

state 10

    (10) VARS_PRIME -> VARS . VARS_PRIME
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (21) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (22) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (23) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (133) empty -> .

    VAR             shift and go to state 12
    FUNC            reduce using rule 133 (empty -> .)
    VOID            reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    VARS                           shift and go to state 10
    VARS_PRIME                     shift and go to state 17
    empty                          shift and go to state 11

state 11

    (11) VARS_PRIME -> empty .

    FUNC            reduce using rule 11 (VARS_PRIME -> empty .)
    VOID            reduce using rule 11 (VARS_PRIME -> empty .)
    FOR             reduce using rule 11 (VARS_PRIME -> empty .)
    PRINT           reduce using rule 11 (VARS_PRIME -> empty .)
    IF              reduce using rule 11 (VARS_PRIME -> empty .)
    WHILE           reduce using rule 11 (VARS_PRIME -> empty .)
    ID              reduce using rule 11 (VARS_PRIME -> empty .)
    TRUE            reduce using rule 11 (VARS_PRIME -> empty .)
    FALSE           reduce using rule 11 (VARS_PRIME -> empty .)
    (               reduce using rule 11 (VARS_PRIME -> empty .)
    *               reduce using rule 11 (VARS_PRIME -> empty .)
    /               reduce using rule 11 (VARS_PRIME -> empty .)
    I_CONST         reduce using rule 11 (VARS_PRIME -> empty .)
    F_CONST         reduce using rule 11 (VARS_PRIME -> empty .)
    C_CONST         reduce using rule 11 (VARS_PRIME -> empty .)
    }               reduce using rule 11 (VARS_PRIME -> empty .)
    RETURN          reduce using rule 11 (VARS_PRIME -> empty .)


state 12

    (21) VARS -> VAR . TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (22) VARS -> VAR . TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (23) VARS -> VAR . TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> VAR . TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (37) TIPO_COMP -> . DATAFRAME
    (34) TIPO_SIMPLE -> . INT add_type
    (35) TIPO_SIMPLE -> . FLOAT add_type
    (36) TIPO_SIMPLE -> . CHAR add_type

    DATAFRAME       shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    TIPO_COMP                      shift and go to state 18
    TIPO_SIMPLE                    shift and go to state 19

state 13

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME . VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    VOID            shift and go to state 24


state 14

    (12) FUNCTION_PRIME -> FUNCTION . FUNC_PRIME
    (14) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (15) FUNC_PRIME -> . empty
    (41) FUNCTION -> . FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (42) FUNCTION -> . FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (133) empty -> .

    FUNC            shift and go to state 16
    VOID            reduce using rule 133 (empty -> .)

    FUNCTION                       shift and go to state 25
    FUNC_PRIME                     shift and go to state 26
    empty                          shift and go to state 27

state 15

    (13) FUNCTION_PRIME -> empty .

    VOID            reduce using rule 13 (FUNCTION_PRIME -> empty .)


state 16

    (41) FUNCTION -> FUNC . TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (42) FUNCTION -> FUNC . VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (34) TIPO_SIMPLE -> . INT add_type
    (35) TIPO_SIMPLE -> . FLOAT add_type
    (36) TIPO_SIMPLE -> . CHAR add_type

    VOID            shift and go to state 29
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    TIPO_SIMPLE                    shift and go to state 28

state 17

    (10) VARS_PRIME -> VARS VARS_PRIME .

    FUNC            reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    VOID            reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    FOR             reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    PRINT           reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    IF              reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    WHILE           reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    ID              reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    TRUE            reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    FALSE           reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    (               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    *               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    /               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    I_CONST         reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    F_CONST         reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    C_CONST         reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    }               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    RETURN          reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)


state 18

    (21) VARS -> VAR TIPO_COMP . ID add_id TIPO_PRIME ; save_ids

    ID              shift and go to state 30


state 19

    (22) VARS -> VAR TIPO_SIMPLE . ID add_id TIPO_PRIME ; save_ids
    (23) VARS -> VAR TIPO_SIMPLE . ID add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> VAR TIPO_SIMPLE . ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix

    ID              shift and go to state 31


state 20

    (37) TIPO_COMP -> DATAFRAME .

    ID              reduce using rule 37 (TIPO_COMP -> DATAFRAME .)


state 21

    (34) TIPO_SIMPLE -> INT . add_type
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 32

state 22

    (35) TIPO_SIMPLE -> FLOAT . add_type
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 33

state 23

    (36) TIPO_SIMPLE -> CHAR . add_type
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 34

state 24

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID . MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    MAIN            shift and go to state 35


state 25

    (14) FUNC_PRIME -> FUNCTION . FUNC_PRIME
    (14) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (15) FUNC_PRIME -> . empty
    (41) FUNCTION -> . FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (42) FUNCTION -> . FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (133) empty -> .

    FUNC            shift and go to state 16
    VOID            reduce using rule 133 (empty -> .)

    FUNCTION                       shift and go to state 25
    FUNC_PRIME                     shift and go to state 36
    empty                          shift and go to state 27

state 26

    (12) FUNCTION_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 12 (FUNCTION_PRIME -> FUNCTION FUNC_PRIME .)


state 27

    (15) FUNC_PRIME -> empty .

    VOID            reduce using rule 15 (FUNC_PRIME -> empty .)


state 28

    (41) FUNCTION -> FUNC TIPO_SIMPLE . add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (38) add_function_type -> .

    ID              reduce using rule 38 (add_function_type -> .)

    add_function_type              shift and go to state 37

state 29

    (42) FUNCTION -> FUNC VOID . add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 38

state 30

    (21) VARS -> VAR TIPO_COMP ID . add_id TIPO_PRIME ; save_ids
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 39

state 31

    (22) VARS -> VAR TIPO_SIMPLE ID . add_id TIPO_PRIME ; save_ids
    (23) VARS -> VAR TIPO_SIMPLE ID . add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> VAR TIPO_SIMPLE ID . add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (6) add_id -> .

    [               reduce using rule 6 (add_id -> .)
    ,               reduce using rule 6 (add_id -> .)
    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 40

state 32

    (34) TIPO_SIMPLE -> INT add_type .

    ID              reduce using rule 34 (TIPO_SIMPLE -> INT add_type .)


state 33

    (35) TIPO_SIMPLE -> FLOAT add_type .

    ID              reduce using rule 35 (TIPO_SIMPLE -> FLOAT add_type .)


state 34

    (36) TIPO_SIMPLE -> CHAR add_type .

    ID              reduce using rule 36 (TIPO_SIMPLE -> CHAR add_type .)


state 35

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN . { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    {               shift and go to state 41


state 36

    (14) FUNC_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 14 (FUNC_PRIME -> FUNCTION FUNC_PRIME .)


state 37

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type . ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table

    ID              shift and go to state 42


state 38

    (42) FUNCTION -> FUNC VOID add_type . ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table

    ID              shift and go to state 43


state 39

    (21) VARS -> VAR TIPO_COMP ID add_id . TIPO_PRIME ; save_ids
    (25) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (26) TIPO_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 45
    ;               reduce using rule 133 (empty -> .)

    TIPO_PRIME                     shift and go to state 44
    empty                          shift and go to state 46

state 40

    (22) VARS -> VAR TIPO_SIMPLE ID add_id . TIPO_PRIME ; save_ids
    (23) VARS -> VAR TIPO_SIMPLE ID add_id . [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> VAR TIPO_SIMPLE ID add_id . [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (25) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (26) TIPO_PRIME -> . empty
    (133) empty -> .

    [               shift and go to state 48
    ,               shift and go to state 45
    ;               reduce using rule 133 (empty -> .)

    TIPO_PRIME                     shift and go to state 47
    empty                          shift and go to state 46

state 41

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { . fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (5) fill_go_to_main_quad -> .

    VAR             reduce using rule 5 (fill_go_to_main_quad -> .)
    FOR             reduce using rule 5 (fill_go_to_main_quad -> .)
    FUNC            reduce using rule 5 (fill_go_to_main_quad -> .)
    PRINT           reduce using rule 5 (fill_go_to_main_quad -> .)
    IF              reduce using rule 5 (fill_go_to_main_quad -> .)
    WHILE           reduce using rule 5 (fill_go_to_main_quad -> .)
    ID              reduce using rule 5 (fill_go_to_main_quad -> .)
    TRUE            reduce using rule 5 (fill_go_to_main_quad -> .)
    FALSE           reduce using rule 5 (fill_go_to_main_quad -> .)
    (               reduce using rule 5 (fill_go_to_main_quad -> .)
    *               reduce using rule 5 (fill_go_to_main_quad -> .)
    /               reduce using rule 5 (fill_go_to_main_quad -> .)
    I_CONST         reduce using rule 5 (fill_go_to_main_quad -> .)
    F_CONST         reduce using rule 5 (fill_go_to_main_quad -> .)
    C_CONST         reduce using rule 5 (fill_go_to_main_quad -> .)
    }               reduce using rule 5 (fill_go_to_main_quad -> .)

    fill_go_to_main_quad           shift and go to state 49

state 42

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID . add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (6) add_id -> .

    (               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 50

state 43

    (42) FUNCTION -> FUNC VOID add_type ID . add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (6) add_id -> .

    (               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 51

state 44

    (21) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME . ; save_ids

    ;               shift and go to state 52


state 45

    (25) TIPO_PRIME -> , . ID add_id add_current_type TIPO_PRIME

    ID              shift and go to state 53


state 46

    (26) TIPO_PRIME -> empty .

    ;               reduce using rule 26 (TIPO_PRIME -> empty .)


state 47

    (22) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME . ; save_ids

    ;               shift and go to state 54


state 48

    (23) VARS -> VAR TIPO_SIMPLE ID add_id [ . EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ . EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 56
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 49

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad . VARS_PRIME BLOCK } empty_global_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (21) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (22) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (23) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (133) empty -> .

    VAR             shift and go to state 12
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)

    VARS_PRIME                     shift and go to state 73
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 50

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id . save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (9) save_function -> .

    (               reduce using rule 9 (save_function -> .)

    save_function                  shift and go to state 74

state 51

    (42) FUNCTION -> FUNC VOID add_type ID add_id . save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (9) save_function -> .

    (               reduce using rule 9 (save_function -> .)

    save_function                  shift and go to state 75

state 52

    (21) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; . save_ids
    (7) save_ids -> .

    VAR             reduce using rule 7 (save_ids -> .)
    FUNC            reduce using rule 7 (save_ids -> .)
    VOID            reduce using rule 7 (save_ids -> .)
    FOR             reduce using rule 7 (save_ids -> .)
    PRINT           reduce using rule 7 (save_ids -> .)
    IF              reduce using rule 7 (save_ids -> .)
    WHILE           reduce using rule 7 (save_ids -> .)
    ID              reduce using rule 7 (save_ids -> .)
    TRUE            reduce using rule 7 (save_ids -> .)
    FALSE           reduce using rule 7 (save_ids -> .)
    (               reduce using rule 7 (save_ids -> .)
    *               reduce using rule 7 (save_ids -> .)
    /               reduce using rule 7 (save_ids -> .)
    I_CONST         reduce using rule 7 (save_ids -> .)
    F_CONST         reduce using rule 7 (save_ids -> .)
    C_CONST         reduce using rule 7 (save_ids -> .)
    }               reduce using rule 7 (save_ids -> .)
    RETURN          reduce using rule 7 (save_ids -> .)

    save_ids                       shift and go to state 76

state 53

    (25) TIPO_PRIME -> , ID . add_id add_current_type TIPO_PRIME
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 77

state 54

    (22) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; . save_ids
    (7) save_ids -> .

    VAR             reduce using rule 7 (save_ids -> .)
    FUNC            reduce using rule 7 (save_ids -> .)
    VOID            reduce using rule 7 (save_ids -> .)
    FOR             reduce using rule 7 (save_ids -> .)
    PRINT           reduce using rule 7 (save_ids -> .)
    IF              reduce using rule 7 (save_ids -> .)
    WHILE           reduce using rule 7 (save_ids -> .)
    ID              reduce using rule 7 (save_ids -> .)
    TRUE            reduce using rule 7 (save_ids -> .)
    FALSE           reduce using rule 7 (save_ids -> .)
    (               reduce using rule 7 (save_ids -> .)
    *               reduce using rule 7 (save_ids -> .)
    /               reduce using rule 7 (save_ids -> .)
    I_CONST         reduce using rule 7 (save_ids -> .)
    F_CONST         reduce using rule 7 (save_ids -> .)
    C_CONST         reduce using rule 7 (save_ids -> .)
    }               reduce using rule 7 (save_ids -> .)
    RETURN          reduce using rule 7 (save_ids -> .)

    save_ids                       shift and go to state 78

state 55

    (126) VAR_CT -> ID . add_operand
    (131) VAR_CT -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (59) add_operand -> .
    (6) add_id -> .

    *               reduce using rule 59 (add_operand -> .)
    /               reduce using rule 59 (add_operand -> .)
    +               reduce using rule 59 (add_operand -> .)
    -               reduce using rule 59 (add_operand -> .)
    >               reduce using rule 59 (add_operand -> .)
    <               reduce using rule 59 (add_operand -> .)
    DIFFERENT       reduce using rule 59 (add_operand -> .)
    EQUAL           reduce using rule 59 (add_operand -> .)
    AND             reduce using rule 59 (add_operand -> .)
    OR              reduce using rule 59 (add_operand -> .)
    ]               reduce using rule 59 (add_operand -> .)
    )               reduce using rule 59 (add_operand -> .)
    ;               reduce using rule 59 (add_operand -> .)
    ,               reduce using rule 59 (add_operand -> .)
    TO              reduce using rule 59 (add_operand -> .)
    FOR             reduce using rule 59 (add_operand -> .)
    FUNC            reduce using rule 59 (add_operand -> .)
    PRINT           reduce using rule 59 (add_operand -> .)
    IF              reduce using rule 59 (add_operand -> .)
    WHILE           reduce using rule 59 (add_operand -> .)
    ID              reduce using rule 59 (add_operand -> .)
    TRUE            reduce using rule 59 (add_operand -> .)
    FALSE           reduce using rule 59 (add_operand -> .)
    (               reduce using rule 59 (add_operand -> .)
    I_CONST         reduce using rule 59 (add_operand -> .)
    F_CONST         reduce using rule 59 (add_operand -> .)
    C_CONST         reduce using rule 59 (add_operand -> .)
    }               reduce using rule 59 (add_operand -> .)
    RETURN          reduce using rule 59 (add_operand -> .)
    [               reduce using rule 6 (add_id -> .)

    add_operand                    shift and go to state 79
    add_id                         shift and go to state 80

state 56

    (23) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION . ] check_for_array_length ; save_array
    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION . ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix

    ]               shift and go to state 81


state 57

    (100) EXPRESSION -> AND_EXP . EXPRESSION_PRIME
    (101) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (102) EXPRESSION_PRIME -> . empty
    (133) empty -> .

    OR              shift and go to state 83
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    EXPRESSION_PRIME               shift and go to state 82
    empty                          shift and go to state 84

state 58

    (103) AND_EXP -> B_EXP . AND_EXP_PRIME
    (104) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (105) AND_EXP_PRIME -> . empty
    (133) empty -> .

    AND             shift and go to state 86
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    AND_EXP_PRIME                  shift and go to state 85
    empty                          shift and go to state 87

state 59

    (106) B_EXP -> TRUE .

    AND             reduce using rule 106 (B_EXP -> TRUE .)
    OR              reduce using rule 106 (B_EXP -> TRUE .)
    ]               reduce using rule 106 (B_EXP -> TRUE .)
    )               reduce using rule 106 (B_EXP -> TRUE .)
    ;               reduce using rule 106 (B_EXP -> TRUE .)
    ,               reduce using rule 106 (B_EXP -> TRUE .)
    TO              reduce using rule 106 (B_EXP -> TRUE .)
    FOR             reduce using rule 106 (B_EXP -> TRUE .)
    FUNC            reduce using rule 106 (B_EXP -> TRUE .)
    PRINT           reduce using rule 106 (B_EXP -> TRUE .)
    IF              reduce using rule 106 (B_EXP -> TRUE .)
    WHILE           reduce using rule 106 (B_EXP -> TRUE .)
    ID              reduce using rule 106 (B_EXP -> TRUE .)
    TRUE            reduce using rule 106 (B_EXP -> TRUE .)
    FALSE           reduce using rule 106 (B_EXP -> TRUE .)
    (               reduce using rule 106 (B_EXP -> TRUE .)
    *               reduce using rule 106 (B_EXP -> TRUE .)
    /               reduce using rule 106 (B_EXP -> TRUE .)
    I_CONST         reduce using rule 106 (B_EXP -> TRUE .)
    F_CONST         reduce using rule 106 (B_EXP -> TRUE .)
    C_CONST         reduce using rule 106 (B_EXP -> TRUE .)
    }               reduce using rule 106 (B_EXP -> TRUE .)
    RETURN          reduce using rule 106 (B_EXP -> TRUE .)


state 60

    (107) B_EXP -> FALSE .

    AND             reduce using rule 107 (B_EXP -> FALSE .)
    OR              reduce using rule 107 (B_EXP -> FALSE .)
    ]               reduce using rule 107 (B_EXP -> FALSE .)
    )               reduce using rule 107 (B_EXP -> FALSE .)
    ;               reduce using rule 107 (B_EXP -> FALSE .)
    ,               reduce using rule 107 (B_EXP -> FALSE .)
    TO              reduce using rule 107 (B_EXP -> FALSE .)
    FOR             reduce using rule 107 (B_EXP -> FALSE .)
    FUNC            reduce using rule 107 (B_EXP -> FALSE .)
    PRINT           reduce using rule 107 (B_EXP -> FALSE .)
    IF              reduce using rule 107 (B_EXP -> FALSE .)
    WHILE           reduce using rule 107 (B_EXP -> FALSE .)
    ID              reduce using rule 107 (B_EXP -> FALSE .)
    TRUE            reduce using rule 107 (B_EXP -> FALSE .)
    FALSE           reduce using rule 107 (B_EXP -> FALSE .)
    (               reduce using rule 107 (B_EXP -> FALSE .)
    *               reduce using rule 107 (B_EXP -> FALSE .)
    /               reduce using rule 107 (B_EXP -> FALSE .)
    I_CONST         reduce using rule 107 (B_EXP -> FALSE .)
    F_CONST         reduce using rule 107 (B_EXP -> FALSE .)
    C_CONST         reduce using rule 107 (B_EXP -> FALSE .)
    }               reduce using rule 107 (B_EXP -> FALSE .)
    RETURN          reduce using rule 107 (B_EXP -> FALSE .)


state 61

    (108) B_EXP -> EXP . B_EXP_PRIME
    (109) B_EXP_PRIME -> . > add_operator B_EXP aritmetics_operation
    (110) B_EXP_PRIME -> . < add_operator B_EXP aritmetics_operation
    (111) B_EXP_PRIME -> . DIFFERENT add_operator B_EXP aritmetics_operation
    (112) B_EXP_PRIME -> . EQUAL add_operator B_EXP aritmetics_operation
    (113) B_EXP_PRIME -> . empty
    (133) empty -> .

    >               shift and go to state 89
    <               shift and go to state 90
    DIFFERENT       shift and go to state 91
    EQUAL           shift and go to state 92
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    B_EXP_PRIME                    shift and go to state 88
    empty                          shift and go to state 93

state 62

    (114) EXP -> TERM . EXP_PRIME
    (115) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (116) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (117) EXP_PRIME -> . empty
    (133) empty -> .

    +               shift and go to state 95
    -               shift and go to state 96
    >               reduce using rule 133 (empty -> .)
    <               reduce using rule 133 (empty -> .)
    DIFFERENT       reduce using rule 133 (empty -> .)
    EQUAL           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    EXP_PRIME                      shift and go to state 94
    empty                          shift and go to state 97

state 63

    (118) TERM -> FACTOR . TERM_PRIME
    (119) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (120) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (121) TERM_PRIME -> . empty
    (133) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 99
    /               shift and go to state 100
    +               reduce using rule 133 (empty -> .)
    -               reduce using rule 133 (empty -> .)
    >               reduce using rule 133 (empty -> .)
    <               reduce using rule 133 (empty -> .)
    DIFFERENT       reduce using rule 133 (empty -> .)
    EQUAL           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

  ! *               [ reduce using rule 133 (empty -> .) ]
  ! /               [ reduce using rule 133 (empty -> .) ]

    TERM_PRIME                     shift and go to state 98
    empty                          shift and go to state 101

state 64

    (122) FACTOR -> ( . EXPRESSION )
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 102
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 65

    (123) FACTOR -> * . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    VAR_CT                         shift and go to state 103
    FUNC_CALL                      shift and go to state 71

state 66

    (125) FACTOR -> VAR_CT .

    *               reduce using rule 125 (FACTOR -> VAR_CT .)
    /               reduce using rule 125 (FACTOR -> VAR_CT .)
    +               reduce using rule 125 (FACTOR -> VAR_CT .)
    -               reduce using rule 125 (FACTOR -> VAR_CT .)
    >               reduce using rule 125 (FACTOR -> VAR_CT .)
    <               reduce using rule 125 (FACTOR -> VAR_CT .)
    DIFFERENT       reduce using rule 125 (FACTOR -> VAR_CT .)
    EQUAL           reduce using rule 125 (FACTOR -> VAR_CT .)
    AND             reduce using rule 125 (FACTOR -> VAR_CT .)
    OR              reduce using rule 125 (FACTOR -> VAR_CT .)
    ]               reduce using rule 125 (FACTOR -> VAR_CT .)
    )               reduce using rule 125 (FACTOR -> VAR_CT .)
    ;               reduce using rule 125 (FACTOR -> VAR_CT .)
    ,               reduce using rule 125 (FACTOR -> VAR_CT .)
    TO              reduce using rule 125 (FACTOR -> VAR_CT .)
    FOR             reduce using rule 125 (FACTOR -> VAR_CT .)
    FUNC            reduce using rule 125 (FACTOR -> VAR_CT .)
    PRINT           reduce using rule 125 (FACTOR -> VAR_CT .)
    IF              reduce using rule 125 (FACTOR -> VAR_CT .)
    WHILE           reduce using rule 125 (FACTOR -> VAR_CT .)
    ID              reduce using rule 125 (FACTOR -> VAR_CT .)
    TRUE            reduce using rule 125 (FACTOR -> VAR_CT .)
    FALSE           reduce using rule 125 (FACTOR -> VAR_CT .)
    (               reduce using rule 125 (FACTOR -> VAR_CT .)
    I_CONST         reduce using rule 125 (FACTOR -> VAR_CT .)
    F_CONST         reduce using rule 125 (FACTOR -> VAR_CT .)
    C_CONST         reduce using rule 125 (FACTOR -> VAR_CT .)
    }               reduce using rule 125 (FACTOR -> VAR_CT .)
    RETURN          reduce using rule 125 (FACTOR -> VAR_CT .)


state 67

    (124) FACTOR -> / . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    VAR_CT                         shift and go to state 104
    FUNC_CALL                      shift and go to state 71

state 68

    (127) VAR_CT -> I_CONST . add_operand
    (59) add_operand -> .

    *               reduce using rule 59 (add_operand -> .)
    /               reduce using rule 59 (add_operand -> .)
    +               reduce using rule 59 (add_operand -> .)
    -               reduce using rule 59 (add_operand -> .)
    >               reduce using rule 59 (add_operand -> .)
    <               reduce using rule 59 (add_operand -> .)
    DIFFERENT       reduce using rule 59 (add_operand -> .)
    EQUAL           reduce using rule 59 (add_operand -> .)
    AND             reduce using rule 59 (add_operand -> .)
    OR              reduce using rule 59 (add_operand -> .)
    ]               reduce using rule 59 (add_operand -> .)
    )               reduce using rule 59 (add_operand -> .)
    ;               reduce using rule 59 (add_operand -> .)
    ,               reduce using rule 59 (add_operand -> .)
    TO              reduce using rule 59 (add_operand -> .)
    FOR             reduce using rule 59 (add_operand -> .)
    FUNC            reduce using rule 59 (add_operand -> .)
    PRINT           reduce using rule 59 (add_operand -> .)
    IF              reduce using rule 59 (add_operand -> .)
    WHILE           reduce using rule 59 (add_operand -> .)
    ID              reduce using rule 59 (add_operand -> .)
    TRUE            reduce using rule 59 (add_operand -> .)
    FALSE           reduce using rule 59 (add_operand -> .)
    (               reduce using rule 59 (add_operand -> .)
    I_CONST         reduce using rule 59 (add_operand -> .)
    F_CONST         reduce using rule 59 (add_operand -> .)
    C_CONST         reduce using rule 59 (add_operand -> .)
    }               reduce using rule 59 (add_operand -> .)
    RETURN          reduce using rule 59 (add_operand -> .)

    add_operand                    shift and go to state 105

state 69

    (128) VAR_CT -> F_CONST . add_operand
    (59) add_operand -> .

    *               reduce using rule 59 (add_operand -> .)
    /               reduce using rule 59 (add_operand -> .)
    +               reduce using rule 59 (add_operand -> .)
    -               reduce using rule 59 (add_operand -> .)
    >               reduce using rule 59 (add_operand -> .)
    <               reduce using rule 59 (add_operand -> .)
    DIFFERENT       reduce using rule 59 (add_operand -> .)
    EQUAL           reduce using rule 59 (add_operand -> .)
    AND             reduce using rule 59 (add_operand -> .)
    OR              reduce using rule 59 (add_operand -> .)
    ]               reduce using rule 59 (add_operand -> .)
    )               reduce using rule 59 (add_operand -> .)
    ;               reduce using rule 59 (add_operand -> .)
    ,               reduce using rule 59 (add_operand -> .)
    TO              reduce using rule 59 (add_operand -> .)
    FOR             reduce using rule 59 (add_operand -> .)
    FUNC            reduce using rule 59 (add_operand -> .)
    PRINT           reduce using rule 59 (add_operand -> .)
    IF              reduce using rule 59 (add_operand -> .)
    WHILE           reduce using rule 59 (add_operand -> .)
    ID              reduce using rule 59 (add_operand -> .)
    TRUE            reduce using rule 59 (add_operand -> .)
    FALSE           reduce using rule 59 (add_operand -> .)
    (               reduce using rule 59 (add_operand -> .)
    I_CONST         reduce using rule 59 (add_operand -> .)
    F_CONST         reduce using rule 59 (add_operand -> .)
    C_CONST         reduce using rule 59 (add_operand -> .)
    }               reduce using rule 59 (add_operand -> .)
    RETURN          reduce using rule 59 (add_operand -> .)

    add_operand                    shift and go to state 106

state 70

    (129) VAR_CT -> C_CONST . add_operand
    (59) add_operand -> .

    *               reduce using rule 59 (add_operand -> .)
    /               reduce using rule 59 (add_operand -> .)
    +               reduce using rule 59 (add_operand -> .)
    -               reduce using rule 59 (add_operand -> .)
    >               reduce using rule 59 (add_operand -> .)
    <               reduce using rule 59 (add_operand -> .)
    DIFFERENT       reduce using rule 59 (add_operand -> .)
    EQUAL           reduce using rule 59 (add_operand -> .)
    AND             reduce using rule 59 (add_operand -> .)
    OR              reduce using rule 59 (add_operand -> .)
    ]               reduce using rule 59 (add_operand -> .)
    )               reduce using rule 59 (add_operand -> .)
    ;               reduce using rule 59 (add_operand -> .)
    ,               reduce using rule 59 (add_operand -> .)
    TO              reduce using rule 59 (add_operand -> .)
    FOR             reduce using rule 59 (add_operand -> .)
    FUNC            reduce using rule 59 (add_operand -> .)
    PRINT           reduce using rule 59 (add_operand -> .)
    IF              reduce using rule 59 (add_operand -> .)
    WHILE           reduce using rule 59 (add_operand -> .)
    ID              reduce using rule 59 (add_operand -> .)
    TRUE            reduce using rule 59 (add_operand -> .)
    FALSE           reduce using rule 59 (add_operand -> .)
    (               reduce using rule 59 (add_operand -> .)
    I_CONST         reduce using rule 59 (add_operand -> .)
    F_CONST         reduce using rule 59 (add_operand -> .)
    C_CONST         reduce using rule 59 (add_operand -> .)
    }               reduce using rule 59 (add_operand -> .)
    RETURN          reduce using rule 59 (add_operand -> .)

    add_operand                    shift and go to state 107

state 71

    (130) VAR_CT -> FUNC_CALL .

    *               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    /               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    +               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    -               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    >               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    <               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    DIFFERENT       reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    EQUAL           reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    AND             reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    OR              reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    ]               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    )               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    ;               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    ,               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    TO              reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    FOR             reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    FUNC            reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    PRINT           reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    IF              reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    WHILE           reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    ID              reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    TRUE            reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    FALSE           reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    (               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    I_CONST         reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    F_CONST         reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    C_CONST         reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    }               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    RETURN          reduce using rule 130 (VAR_CT -> FUNC_CALL .)


state 72

    (69) FUNC_CALL -> FUNC . ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    ID              shift and go to state 108


state 73

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME . BLOCK } empty_global_variables_table
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    }               reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    BLOCK                          shift and go to state 110
    STATEMENT                      shift and go to state 111
    empty                          shift and go to state 112
    ASSIGNATION                    shift and go to state 113
    FUNC_CALL                      shift and go to state 114
    EXPRESSION                     shift and go to state 115
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 74

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function . ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table

    (               shift and go to state 126


state 75

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function . ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table

    (               shift and go to state 127


state 76

    (21) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .

    VAR             reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FUNC            reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    VOID            reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FOR             reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    PRINT           reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    IF              reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    WHILE           reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    ID              reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    TRUE            reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FALSE           reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    (               reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    *               reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    /               reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    I_CONST         reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    F_CONST         reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    C_CONST         reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    }               reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    RETURN          reduce using rule 21 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)


state 77

    (25) TIPO_PRIME -> , ID add_id . add_current_type TIPO_PRIME
    (17) add_current_type -> .

    ,               reduce using rule 17 (add_current_type -> .)
    ;               reduce using rule 17 (add_current_type -> .)

    add_current_type               shift and go to state 128

state 78

    (22) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .

    VAR             reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FUNC            reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    VOID            reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FOR             reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    PRINT           reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    IF              reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    WHILE           reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    ID              reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    TRUE            reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FALSE           reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    (               reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    *               reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    /               reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    I_CONST         reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    F_CONST         reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    C_CONST         reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    }               reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    RETURN          reduce using rule 22 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)


state 79

    (126) VAR_CT -> ID add_operand .

    *               reduce using rule 126 (VAR_CT -> ID add_operand .)
    /               reduce using rule 126 (VAR_CT -> ID add_operand .)
    +               reduce using rule 126 (VAR_CT -> ID add_operand .)
    -               reduce using rule 126 (VAR_CT -> ID add_operand .)
    >               reduce using rule 126 (VAR_CT -> ID add_operand .)
    <               reduce using rule 126 (VAR_CT -> ID add_operand .)
    DIFFERENT       reduce using rule 126 (VAR_CT -> ID add_operand .)
    EQUAL           reduce using rule 126 (VAR_CT -> ID add_operand .)
    AND             reduce using rule 126 (VAR_CT -> ID add_operand .)
    OR              reduce using rule 126 (VAR_CT -> ID add_operand .)
    ]               reduce using rule 126 (VAR_CT -> ID add_operand .)
    )               reduce using rule 126 (VAR_CT -> ID add_operand .)
    ;               reduce using rule 126 (VAR_CT -> ID add_operand .)
    ,               reduce using rule 126 (VAR_CT -> ID add_operand .)
    TO              reduce using rule 126 (VAR_CT -> ID add_operand .)
    FOR             reduce using rule 126 (VAR_CT -> ID add_operand .)
    FUNC            reduce using rule 126 (VAR_CT -> ID add_operand .)
    PRINT           reduce using rule 126 (VAR_CT -> ID add_operand .)
    IF              reduce using rule 126 (VAR_CT -> ID add_operand .)
    WHILE           reduce using rule 126 (VAR_CT -> ID add_operand .)
    ID              reduce using rule 126 (VAR_CT -> ID add_operand .)
    TRUE            reduce using rule 126 (VAR_CT -> ID add_operand .)
    FALSE           reduce using rule 126 (VAR_CT -> ID add_operand .)
    (               reduce using rule 126 (VAR_CT -> ID add_operand .)
    I_CONST         reduce using rule 126 (VAR_CT -> ID add_operand .)
    F_CONST         reduce using rule 126 (VAR_CT -> ID add_operand .)
    C_CONST         reduce using rule 126 (VAR_CT -> ID add_operand .)
    }               reduce using rule 126 (VAR_CT -> ID add_operand .)
    RETURN          reduce using rule 126 (VAR_CT -> ID add_operand .)


state 80

    (131) VAR_CT -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    [               shift and go to state 129


state 81

    (23) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] . check_for_array_length ; save_array
    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] . check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (18) check_for_array_length -> .

    ;               reduce using rule 18 (check_for_array_length -> .)
    [               reduce using rule 18 (check_for_array_length -> .)

    check_for_array_length         shift and go to state 130

state 82

    (100) EXPRESSION -> AND_EXP EXPRESSION_PRIME .

    ]               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ;               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FUNC            reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    RETURN          reduce using rule 100 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)


state 83

    (101) EXPRESSION_PRIME -> OR . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    AND_EXP                        shift and go to state 131
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 84

    (102) EXPRESSION_PRIME -> empty .

    ]               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    )               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    ;               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    ,               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    TO              reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    FOR             reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    FUNC            reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    PRINT           reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    IF              reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    WHILE           reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    ID              reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    TRUE            reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    FALSE           reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    (               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    *               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    /               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    I_CONST         reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    F_CONST         reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    C_CONST         reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    }               reduce using rule 102 (EXPRESSION_PRIME -> empty .)
    RETURN          reduce using rule 102 (EXPRESSION_PRIME -> empty .)


state 85

    (103) AND_EXP -> B_EXP AND_EXP_PRIME .

    OR              reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ]               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    )               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ;               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ,               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    TO              reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    FOR             reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    FUNC            reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    PRINT           reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    IF              reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    WHILE           reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ID              reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    TRUE            reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    FALSE           reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    (               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    *               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    /               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    I_CONST         reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    F_CONST         reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    C_CONST         reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    }               reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    RETURN          reduce using rule 103 (AND_EXP -> B_EXP AND_EXP_PRIME .)


state 86

    (104) AND_EXP_PRIME -> AND . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    B_EXP                          shift and go to state 132
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 87

    (105) AND_EXP_PRIME -> empty .

    OR              reduce using rule 105 (AND_EXP_PRIME -> empty .)
    ]               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    )               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    ;               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    ,               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    TO              reduce using rule 105 (AND_EXP_PRIME -> empty .)
    FOR             reduce using rule 105 (AND_EXP_PRIME -> empty .)
    FUNC            reduce using rule 105 (AND_EXP_PRIME -> empty .)
    PRINT           reduce using rule 105 (AND_EXP_PRIME -> empty .)
    IF              reduce using rule 105 (AND_EXP_PRIME -> empty .)
    WHILE           reduce using rule 105 (AND_EXP_PRIME -> empty .)
    ID              reduce using rule 105 (AND_EXP_PRIME -> empty .)
    TRUE            reduce using rule 105 (AND_EXP_PRIME -> empty .)
    FALSE           reduce using rule 105 (AND_EXP_PRIME -> empty .)
    (               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    *               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    /               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    I_CONST         reduce using rule 105 (AND_EXP_PRIME -> empty .)
    F_CONST         reduce using rule 105 (AND_EXP_PRIME -> empty .)
    C_CONST         reduce using rule 105 (AND_EXP_PRIME -> empty .)
    }               reduce using rule 105 (AND_EXP_PRIME -> empty .)
    RETURN          reduce using rule 105 (AND_EXP_PRIME -> empty .)


state 88

    (108) B_EXP -> EXP B_EXP_PRIME .

    AND             reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    OR              reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    ]               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    )               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    ;               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    ,               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    TO              reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    FOR             reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    FUNC            reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    PRINT           reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    IF              reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    WHILE           reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    ID              reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    TRUE            reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    FALSE           reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    (               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    *               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    /               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    I_CONST         reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    F_CONST         reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    C_CONST         reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    }               reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)
    RETURN          reduce using rule 108 (B_EXP -> EXP B_EXP_PRIME .)


state 89

    (109) B_EXP_PRIME -> > . add_operator B_EXP aritmetics_operation
    (58) add_operator -> .

    TRUE            reduce using rule 58 (add_operator -> .)
    FALSE           reduce using rule 58 (add_operator -> .)
    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 133

state 90

    (110) B_EXP_PRIME -> < . add_operator B_EXP aritmetics_operation
    (58) add_operator -> .

    TRUE            reduce using rule 58 (add_operator -> .)
    FALSE           reduce using rule 58 (add_operator -> .)
    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 134

state 91

    (111) B_EXP_PRIME -> DIFFERENT . add_operator B_EXP aritmetics_operation
    (58) add_operator -> .

    TRUE            reduce using rule 58 (add_operator -> .)
    FALSE           reduce using rule 58 (add_operator -> .)
    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 135

state 92

    (112) B_EXP_PRIME -> EQUAL . add_operator B_EXP aritmetics_operation
    (58) add_operator -> .

    TRUE            reduce using rule 58 (add_operator -> .)
    FALSE           reduce using rule 58 (add_operator -> .)
    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 136

state 93

    (113) B_EXP_PRIME -> empty .

    AND             reduce using rule 113 (B_EXP_PRIME -> empty .)
    OR              reduce using rule 113 (B_EXP_PRIME -> empty .)
    ]               reduce using rule 113 (B_EXP_PRIME -> empty .)
    )               reduce using rule 113 (B_EXP_PRIME -> empty .)
    ;               reduce using rule 113 (B_EXP_PRIME -> empty .)
    ,               reduce using rule 113 (B_EXP_PRIME -> empty .)
    TO              reduce using rule 113 (B_EXP_PRIME -> empty .)
    FOR             reduce using rule 113 (B_EXP_PRIME -> empty .)
    FUNC            reduce using rule 113 (B_EXP_PRIME -> empty .)
    PRINT           reduce using rule 113 (B_EXP_PRIME -> empty .)
    IF              reduce using rule 113 (B_EXP_PRIME -> empty .)
    WHILE           reduce using rule 113 (B_EXP_PRIME -> empty .)
    ID              reduce using rule 113 (B_EXP_PRIME -> empty .)
    TRUE            reduce using rule 113 (B_EXP_PRIME -> empty .)
    FALSE           reduce using rule 113 (B_EXP_PRIME -> empty .)
    (               reduce using rule 113 (B_EXP_PRIME -> empty .)
    *               reduce using rule 113 (B_EXP_PRIME -> empty .)
    /               reduce using rule 113 (B_EXP_PRIME -> empty .)
    I_CONST         reduce using rule 113 (B_EXP_PRIME -> empty .)
    F_CONST         reduce using rule 113 (B_EXP_PRIME -> empty .)
    C_CONST         reduce using rule 113 (B_EXP_PRIME -> empty .)
    }               reduce using rule 113 (B_EXP_PRIME -> empty .)
    RETURN          reduce using rule 113 (B_EXP_PRIME -> empty .)


state 94

    (114) EXP -> TERM EXP_PRIME .

    >               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    <               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    DIFFERENT       reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    EQUAL           reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    AND             reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    OR              reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    ]               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    )               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    ;               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    ,               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    TO              reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    FOR             reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    FUNC            reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    PRINT           reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    IF              reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    WHILE           reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    ID              reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    TRUE            reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    FALSE           reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    (               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    *               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    /               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    I_CONST         reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    F_CONST         reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    C_CONST         reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    }               reduce using rule 114 (EXP -> TERM EXP_PRIME .)
    RETURN          reduce using rule 114 (EXP -> TERM EXP_PRIME .)


state 95

    (115) EXP_PRIME -> + . add_operator TERM EXP_PRIME aritmetics_operation
    (58) add_operator -> .

    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 137

state 96

    (116) EXP_PRIME -> - . add_operator TERM EXP_PRIME aritmetics_operation
    (58) add_operator -> .

    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 138

state 97

    (117) EXP_PRIME -> empty .

    >               reduce using rule 117 (EXP_PRIME -> empty .)
    <               reduce using rule 117 (EXP_PRIME -> empty .)
    DIFFERENT       reduce using rule 117 (EXP_PRIME -> empty .)
    EQUAL           reduce using rule 117 (EXP_PRIME -> empty .)
    AND             reduce using rule 117 (EXP_PRIME -> empty .)
    OR              reduce using rule 117 (EXP_PRIME -> empty .)
    ]               reduce using rule 117 (EXP_PRIME -> empty .)
    )               reduce using rule 117 (EXP_PRIME -> empty .)
    ;               reduce using rule 117 (EXP_PRIME -> empty .)
    ,               reduce using rule 117 (EXP_PRIME -> empty .)
    TO              reduce using rule 117 (EXP_PRIME -> empty .)
    FOR             reduce using rule 117 (EXP_PRIME -> empty .)
    FUNC            reduce using rule 117 (EXP_PRIME -> empty .)
    PRINT           reduce using rule 117 (EXP_PRIME -> empty .)
    IF              reduce using rule 117 (EXP_PRIME -> empty .)
    WHILE           reduce using rule 117 (EXP_PRIME -> empty .)
    ID              reduce using rule 117 (EXP_PRIME -> empty .)
    TRUE            reduce using rule 117 (EXP_PRIME -> empty .)
    FALSE           reduce using rule 117 (EXP_PRIME -> empty .)
    (               reduce using rule 117 (EXP_PRIME -> empty .)
    *               reduce using rule 117 (EXP_PRIME -> empty .)
    /               reduce using rule 117 (EXP_PRIME -> empty .)
    I_CONST         reduce using rule 117 (EXP_PRIME -> empty .)
    F_CONST         reduce using rule 117 (EXP_PRIME -> empty .)
    C_CONST         reduce using rule 117 (EXP_PRIME -> empty .)
    }               reduce using rule 117 (EXP_PRIME -> empty .)
    RETURN          reduce using rule 117 (EXP_PRIME -> empty .)


state 98

    (118) TERM -> FACTOR TERM_PRIME .

    +               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    -               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    >               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    <               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    DIFFERENT       reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    EQUAL           reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    AND             reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    OR              reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    ]               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    )               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    ;               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    ,               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    TO              reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    FOR             reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    FUNC            reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    PRINT           reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    IF              reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    WHILE           reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    ID              reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    TRUE            reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    FALSE           reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    (               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    *               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    /               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    I_CONST         reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    F_CONST         reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    C_CONST         reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    }               reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)
    RETURN          reduce using rule 118 (TERM -> FACTOR TERM_PRIME .)


state 99

    (119) TERM_PRIME -> * . add_operator FACTOR aritmetics_operation TERM_PRIME
    (58) add_operator -> .

    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 139

state 100

    (120) TERM_PRIME -> / . add_operator FACTOR aritmetics_operation TERM_PRIME
    (58) add_operator -> .

    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 140

state 101

    (121) TERM_PRIME -> empty .

    +               reduce using rule 121 (TERM_PRIME -> empty .)
    -               reduce using rule 121 (TERM_PRIME -> empty .)
    >               reduce using rule 121 (TERM_PRIME -> empty .)
    <               reduce using rule 121 (TERM_PRIME -> empty .)
    DIFFERENT       reduce using rule 121 (TERM_PRIME -> empty .)
    EQUAL           reduce using rule 121 (TERM_PRIME -> empty .)
    AND             reduce using rule 121 (TERM_PRIME -> empty .)
    OR              reduce using rule 121 (TERM_PRIME -> empty .)
    ]               reduce using rule 121 (TERM_PRIME -> empty .)
    )               reduce using rule 121 (TERM_PRIME -> empty .)
    ;               reduce using rule 121 (TERM_PRIME -> empty .)
    ,               reduce using rule 121 (TERM_PRIME -> empty .)
    TO              reduce using rule 121 (TERM_PRIME -> empty .)
    FOR             reduce using rule 121 (TERM_PRIME -> empty .)
    FUNC            reduce using rule 121 (TERM_PRIME -> empty .)
    PRINT           reduce using rule 121 (TERM_PRIME -> empty .)
    IF              reduce using rule 121 (TERM_PRIME -> empty .)
    WHILE           reduce using rule 121 (TERM_PRIME -> empty .)
    ID              reduce using rule 121 (TERM_PRIME -> empty .)
    TRUE            reduce using rule 121 (TERM_PRIME -> empty .)
    FALSE           reduce using rule 121 (TERM_PRIME -> empty .)
    (               reduce using rule 121 (TERM_PRIME -> empty .)
    *               reduce using rule 121 (TERM_PRIME -> empty .)
    /               reduce using rule 121 (TERM_PRIME -> empty .)
    I_CONST         reduce using rule 121 (TERM_PRIME -> empty .)
    F_CONST         reduce using rule 121 (TERM_PRIME -> empty .)
    C_CONST         reduce using rule 121 (TERM_PRIME -> empty .)
    }               reduce using rule 121 (TERM_PRIME -> empty .)
    RETURN          reduce using rule 121 (TERM_PRIME -> empty .)


state 102

    (122) FACTOR -> ( EXPRESSION . )

    )               shift and go to state 141


state 103

    (123) FACTOR -> * VAR_CT .

    *               reduce using rule 123 (FACTOR -> * VAR_CT .)
    /               reduce using rule 123 (FACTOR -> * VAR_CT .)
    +               reduce using rule 123 (FACTOR -> * VAR_CT .)
    -               reduce using rule 123 (FACTOR -> * VAR_CT .)
    >               reduce using rule 123 (FACTOR -> * VAR_CT .)
    <               reduce using rule 123 (FACTOR -> * VAR_CT .)
    DIFFERENT       reduce using rule 123 (FACTOR -> * VAR_CT .)
    EQUAL           reduce using rule 123 (FACTOR -> * VAR_CT .)
    AND             reduce using rule 123 (FACTOR -> * VAR_CT .)
    OR              reduce using rule 123 (FACTOR -> * VAR_CT .)
    ]               reduce using rule 123 (FACTOR -> * VAR_CT .)
    )               reduce using rule 123 (FACTOR -> * VAR_CT .)
    ;               reduce using rule 123 (FACTOR -> * VAR_CT .)
    ,               reduce using rule 123 (FACTOR -> * VAR_CT .)
    TO              reduce using rule 123 (FACTOR -> * VAR_CT .)
    FOR             reduce using rule 123 (FACTOR -> * VAR_CT .)
    FUNC            reduce using rule 123 (FACTOR -> * VAR_CT .)
    PRINT           reduce using rule 123 (FACTOR -> * VAR_CT .)
    IF              reduce using rule 123 (FACTOR -> * VAR_CT .)
    WHILE           reduce using rule 123 (FACTOR -> * VAR_CT .)
    ID              reduce using rule 123 (FACTOR -> * VAR_CT .)
    TRUE            reduce using rule 123 (FACTOR -> * VAR_CT .)
    FALSE           reduce using rule 123 (FACTOR -> * VAR_CT .)
    (               reduce using rule 123 (FACTOR -> * VAR_CT .)
    I_CONST         reduce using rule 123 (FACTOR -> * VAR_CT .)
    F_CONST         reduce using rule 123 (FACTOR -> * VAR_CT .)
    C_CONST         reduce using rule 123 (FACTOR -> * VAR_CT .)
    }               reduce using rule 123 (FACTOR -> * VAR_CT .)
    RETURN          reduce using rule 123 (FACTOR -> * VAR_CT .)


state 104

    (124) FACTOR -> / VAR_CT .

    *               reduce using rule 124 (FACTOR -> / VAR_CT .)
    /               reduce using rule 124 (FACTOR -> / VAR_CT .)
    +               reduce using rule 124 (FACTOR -> / VAR_CT .)
    -               reduce using rule 124 (FACTOR -> / VAR_CT .)
    >               reduce using rule 124 (FACTOR -> / VAR_CT .)
    <               reduce using rule 124 (FACTOR -> / VAR_CT .)
    DIFFERENT       reduce using rule 124 (FACTOR -> / VAR_CT .)
    EQUAL           reduce using rule 124 (FACTOR -> / VAR_CT .)
    AND             reduce using rule 124 (FACTOR -> / VAR_CT .)
    OR              reduce using rule 124 (FACTOR -> / VAR_CT .)
    ]               reduce using rule 124 (FACTOR -> / VAR_CT .)
    )               reduce using rule 124 (FACTOR -> / VAR_CT .)
    ;               reduce using rule 124 (FACTOR -> / VAR_CT .)
    ,               reduce using rule 124 (FACTOR -> / VAR_CT .)
    TO              reduce using rule 124 (FACTOR -> / VAR_CT .)
    FOR             reduce using rule 124 (FACTOR -> / VAR_CT .)
    FUNC            reduce using rule 124 (FACTOR -> / VAR_CT .)
    PRINT           reduce using rule 124 (FACTOR -> / VAR_CT .)
    IF              reduce using rule 124 (FACTOR -> / VAR_CT .)
    WHILE           reduce using rule 124 (FACTOR -> / VAR_CT .)
    ID              reduce using rule 124 (FACTOR -> / VAR_CT .)
    TRUE            reduce using rule 124 (FACTOR -> / VAR_CT .)
    FALSE           reduce using rule 124 (FACTOR -> / VAR_CT .)
    (               reduce using rule 124 (FACTOR -> / VAR_CT .)
    I_CONST         reduce using rule 124 (FACTOR -> / VAR_CT .)
    F_CONST         reduce using rule 124 (FACTOR -> / VAR_CT .)
    C_CONST         reduce using rule 124 (FACTOR -> / VAR_CT .)
    }               reduce using rule 124 (FACTOR -> / VAR_CT .)
    RETURN          reduce using rule 124 (FACTOR -> / VAR_CT .)


state 105

    (127) VAR_CT -> I_CONST add_operand .

    *               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    /               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    +               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    -               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    >               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    <               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    DIFFERENT       reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    EQUAL           reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    AND             reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    OR              reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    ]               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    )               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    ;               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    ,               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    TO              reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    FOR             reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    FUNC            reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    PRINT           reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    IF              reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    WHILE           reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    ID              reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    TRUE            reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    FALSE           reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    (               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    I_CONST         reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    F_CONST         reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    C_CONST         reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    }               reduce using rule 127 (VAR_CT -> I_CONST add_operand .)
    RETURN          reduce using rule 127 (VAR_CT -> I_CONST add_operand .)


state 106

    (128) VAR_CT -> F_CONST add_operand .

    *               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    /               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    +               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    -               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    >               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    <               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    DIFFERENT       reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    EQUAL           reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    AND             reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    OR              reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    ]               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    )               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    ;               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    ,               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    TO              reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    FOR             reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    FUNC            reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    PRINT           reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    IF              reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    WHILE           reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    ID              reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    TRUE            reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    FALSE           reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    (               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    I_CONST         reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    F_CONST         reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    C_CONST         reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    }               reduce using rule 128 (VAR_CT -> F_CONST add_operand .)
    RETURN          reduce using rule 128 (VAR_CT -> F_CONST add_operand .)


state 107

    (129) VAR_CT -> C_CONST add_operand .

    *               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    /               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    +               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    -               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    >               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    <               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    DIFFERENT       reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    EQUAL           reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    AND             reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    OR              reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    ]               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    )               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    ;               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    ,               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    TO              reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    FOR             reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    FUNC            reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    PRINT           reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    IF              reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    WHILE           reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    ID              reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    TRUE            reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    FALSE           reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    (               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    I_CONST         reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    F_CONST         reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    C_CONST         reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    }               reduce using rule 129 (VAR_CT -> C_CONST add_operand .)
    RETURN          reduce using rule 129 (VAR_CT -> C_CONST add_operand .)


state 108

    (69) FUNC_CALL -> FUNC ID . era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (66) era_quad -> .

    (               reduce using rule 66 (era_quad -> .)

    era_quad                       shift and go to state 142

state 109

    (98) DESCRIBE_STMT -> ID . . DESCRIBE ( )
    (31) VARIABLE -> ID . get_variable
    (32) VARIABLE -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (126) VAR_CT -> ID . add_operand
    (131) VAR_CT -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (27) get_variable -> .
    (6) add_id -> .
    (59) add_operand -> .

    .               shift and go to state 143
    =               reduce using rule 27 (get_variable -> .)
    [               reduce using rule 6 (add_id -> .)
    *               reduce using rule 59 (add_operand -> .)
    /               reduce using rule 59 (add_operand -> .)
    +               reduce using rule 59 (add_operand -> .)
    -               reduce using rule 59 (add_operand -> .)
    >               reduce using rule 59 (add_operand -> .)
    <               reduce using rule 59 (add_operand -> .)
    DIFFERENT       reduce using rule 59 (add_operand -> .)
    EQUAL           reduce using rule 59 (add_operand -> .)
    AND             reduce using rule 59 (add_operand -> .)
    OR              reduce using rule 59 (add_operand -> .)
    ;               reduce using rule 59 (add_operand -> .)

    get_variable                   shift and go to state 144
    add_id                         shift and go to state 145
    add_operand                    shift and go to state 79

state 110

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK . } empty_global_variables_table

    }               shift and go to state 146


state 111

    (48) BLOCK -> STATEMENT . BLOCK
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    STATEMENT                      shift and go to state 111
    BLOCK                          shift and go to state 147
    empty                          shift and go to state 112
    ASSIGNATION                    shift and go to state 113
    FUNC_CALL                      shift and go to state 114
    EXPRESSION                     shift and go to state 115
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 112

    (49) BLOCK -> empty .

    }               reduce using rule 49 (BLOCK -> empty .)
    RETURN          reduce using rule 49 (BLOCK -> empty .)


state 113

    (50) STATEMENT -> ASSIGNATION .
    (97) FOR_STMT -> ASSIGNATION . check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (92) check_exact_type_for -> .

    FOR             reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    FUNC            reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    PRINT           reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    IF              reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    WHILE           reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    ID              reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    TRUE            reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    FALSE           reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    (               reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    *               reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    /               reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    I_CONST         reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    F_CONST         reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    C_CONST         reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    }               reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    RETURN          reduce using rule 50 (STATEMENT -> ASSIGNATION .)
    TO              reduce using rule 92 (check_exact_type_for -> .)

    check_exact_type_for           shift and go to state 148

state 114

    (51) STATEMENT -> FUNC_CALL .
    (130) VAR_CT -> FUNC_CALL .

  ! reduce/reduce conflict for * resolved using rule 51 (STATEMENT -> FUNC_CALL .)
  ! reduce/reduce conflict for / resolved using rule 51 (STATEMENT -> FUNC_CALL .)
    FOR             reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    FUNC            reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    PRINT           reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    IF              reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    WHILE           reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    ID              reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    TRUE            reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    FALSE           reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    (               reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    *               reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    /               reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    I_CONST         reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    F_CONST         reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    C_CONST         reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    }               reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    RETURN          reduce using rule 51 (STATEMENT -> FUNC_CALL .)
    +               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    -               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    >               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    <               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    DIFFERENT       reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    EQUAL           reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    AND             reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    OR              reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    ;               reduce using rule 130 (VAR_CT -> FUNC_CALL .)

  ! *               [ reduce using rule 130 (VAR_CT -> FUNC_CALL .) ]
  ! /               [ reduce using rule 130 (VAR_CT -> FUNC_CALL .) ]


state 115

    (52) STATEMENT -> EXPRESSION . ;

    ;               shift and go to state 149


state 116

    (53) STATEMENT -> WRITE . ;

    ;               shift and go to state 150


state 117

    (54) STATEMENT -> CONDITION .

    FOR             reduce using rule 54 (STATEMENT -> CONDITION .)
    FUNC            reduce using rule 54 (STATEMENT -> CONDITION .)
    PRINT           reduce using rule 54 (STATEMENT -> CONDITION .)
    IF              reduce using rule 54 (STATEMENT -> CONDITION .)
    WHILE           reduce using rule 54 (STATEMENT -> CONDITION .)
    ID              reduce using rule 54 (STATEMENT -> CONDITION .)
    TRUE            reduce using rule 54 (STATEMENT -> CONDITION .)
    FALSE           reduce using rule 54 (STATEMENT -> CONDITION .)
    (               reduce using rule 54 (STATEMENT -> CONDITION .)
    *               reduce using rule 54 (STATEMENT -> CONDITION .)
    /               reduce using rule 54 (STATEMENT -> CONDITION .)
    I_CONST         reduce using rule 54 (STATEMENT -> CONDITION .)
    F_CONST         reduce using rule 54 (STATEMENT -> CONDITION .)
    C_CONST         reduce using rule 54 (STATEMENT -> CONDITION .)
    }               reduce using rule 54 (STATEMENT -> CONDITION .)
    RETURN          reduce using rule 54 (STATEMENT -> CONDITION .)


state 118

    (55) STATEMENT -> WHILE_STMT .

    FOR             reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    FUNC            reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    PRINT           reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    IF              reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    WHILE           reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    ID              reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    TRUE            reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    FALSE           reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    (               reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    *               reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    /               reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    I_CONST         reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    F_CONST         reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    C_CONST         reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    }               reduce using rule 55 (STATEMENT -> WHILE_STMT .)
    RETURN          reduce using rule 55 (STATEMENT -> WHILE_STMT .)


state 119

    (56) STATEMENT -> FOR_STMT .

    FOR             reduce using rule 56 (STATEMENT -> FOR_STMT .)
    FUNC            reduce using rule 56 (STATEMENT -> FOR_STMT .)
    PRINT           reduce using rule 56 (STATEMENT -> FOR_STMT .)
    IF              reduce using rule 56 (STATEMENT -> FOR_STMT .)
    WHILE           reduce using rule 56 (STATEMENT -> FOR_STMT .)
    ID              reduce using rule 56 (STATEMENT -> FOR_STMT .)
    TRUE            reduce using rule 56 (STATEMENT -> FOR_STMT .)
    FALSE           reduce using rule 56 (STATEMENT -> FOR_STMT .)
    (               reduce using rule 56 (STATEMENT -> FOR_STMT .)
    *               reduce using rule 56 (STATEMENT -> FOR_STMT .)
    /               reduce using rule 56 (STATEMENT -> FOR_STMT .)
    I_CONST         reduce using rule 56 (STATEMENT -> FOR_STMT .)
    F_CONST         reduce using rule 56 (STATEMENT -> FOR_STMT .)
    C_CONST         reduce using rule 56 (STATEMENT -> FOR_STMT .)
    }               reduce using rule 56 (STATEMENT -> FOR_STMT .)
    RETURN          reduce using rule 56 (STATEMENT -> FOR_STMT .)


state 120

    (57) STATEMENT -> DESCRIBE_STMT .

    FOR             reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    FUNC            reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    PRINT           reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    IF              reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    WHILE           reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    ID              reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    TRUE            reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    FALSE           reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    (               reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    *               reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    /               reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    I_CONST         reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    F_CONST         reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    C_CONST         reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    }               reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)
    RETURN          reduce using rule 57 (STATEMENT -> DESCRIBE_STMT .)


state 121

    (63) ASSIGNATION -> VARIABLE . = add_operator EXPRESSION ; add_assignation_quad
    (65) ASSIGNATION -> VARIABLE . = add_operator FUNC_CALL functions_assignation add_assignation_quad

    =               shift and go to state 151


state 122

    (64) ASSIGNATION -> FOR . VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    ID              shift and go to state 153

    VARIABLE                       shift and go to state 152

state 123

    (74) WRITE -> PRINT . add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> PRINT . add_operator ( TITLE WRITE_PRIME )
    (58) add_operator -> .

    (               reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 154

state 124

    (88) CONDITION -> IF . ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT

    (               shift and go to state 155


state 125

    (91) WHILE_STMT -> WHILE . ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand

    (               shift and go to state 156


state 126

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( . PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (44) PARAM -> . TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (45) PARAM -> . empty
    (34) TIPO_SIMPLE -> . INT add_type
    (35) TIPO_SIMPLE -> . FLOAT add_type
    (36) TIPO_SIMPLE -> . CHAR add_type
    (133) empty -> .

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    )               reduce using rule 133 (empty -> .)

    TIPO_SIMPLE                    shift and go to state 157
    PARAM                          shift and go to state 158
    empty                          shift and go to state 159

state 127

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( . PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (44) PARAM -> . TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (45) PARAM -> . empty
    (34) TIPO_SIMPLE -> . INT add_type
    (35) TIPO_SIMPLE -> . FLOAT add_type
    (36) TIPO_SIMPLE -> . CHAR add_type
    (133) empty -> .

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    )               reduce using rule 133 (empty -> .)

    PARAM                          shift and go to state 160
    TIPO_SIMPLE                    shift and go to state 157
    empty                          shift and go to state 159

state 128

    (25) TIPO_PRIME -> , ID add_id add_current_type . TIPO_PRIME
    (25) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (26) TIPO_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 45
    ;               reduce using rule 133 (empty -> .)

    TIPO_PRIME                     shift and go to state 161
    empty                          shift and go to state 46

state 129

    (131) VAR_CT -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 162
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 130

    (23) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length . ; save_array
    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length . [ EXPRESSION ] check_for_array_length ; save_matrix

    ;               shift and go to state 164
    [               shift and go to state 163


state 131

    (101) EXPRESSION_PRIME -> OR AND_EXP . EXPRESSION_PRIME
    (101) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (102) EXPRESSION_PRIME -> . empty
    (133) empty -> .

    OR              shift and go to state 83
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    EXPRESSION_PRIME               shift and go to state 165
    empty                          shift and go to state 84

state 132

    (104) AND_EXP_PRIME -> AND B_EXP . AND_EXP_PRIME
    (104) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (105) AND_EXP_PRIME -> . empty
    (133) empty -> .

    AND             shift and go to state 86
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    AND_EXP_PRIME                  shift and go to state 166
    empty                          shift and go to state 87

state 133

    (109) B_EXP_PRIME -> > add_operator . B_EXP aritmetics_operation
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    B_EXP                          shift and go to state 167
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 134

    (110) B_EXP_PRIME -> < add_operator . B_EXP aritmetics_operation
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    B_EXP                          shift and go to state 168
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 135

    (111) B_EXP_PRIME -> DIFFERENT add_operator . B_EXP aritmetics_operation
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    B_EXP                          shift and go to state 169
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 136

    (112) B_EXP_PRIME -> EQUAL add_operator . B_EXP aritmetics_operation
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    B_EXP                          shift and go to state 170
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 137

    (115) EXP_PRIME -> + add_operator . TERM EXP_PRIME aritmetics_operation
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    TERM                           shift and go to state 171
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 138

    (116) EXP_PRIME -> - add_operator . TERM EXP_PRIME aritmetics_operation
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    TERM                           shift and go to state 172
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 139

    (119) TERM_PRIME -> * add_operator . FACTOR aritmetics_operation TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    FACTOR                         shift and go to state 173
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 140

    (120) TERM_PRIME -> / add_operator . FACTOR aritmetics_operation TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    FACTOR                         shift and go to state 174
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 141

    (122) FACTOR -> ( EXPRESSION ) .

    *               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    /               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    +               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    -               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    >               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    <               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    DIFFERENT       reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    EQUAL           reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    AND             reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    OR              reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    ]               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    )               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    ;               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    ,               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    TO              reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    FOR             reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    FUNC            reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    PRINT           reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    IF              reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    WHILE           reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    ID              reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    TRUE            reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    FALSE           reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    (               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    I_CONST         reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    F_CONST         reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    C_CONST         reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    }               reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)
    RETURN          reduce using rule 122 (FACTOR -> ( EXPRESSION ) .)


state 142

    (69) FUNC_CALL -> FUNC ID era_quad . ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    (               shift and go to state 175


state 143

    (98) DESCRIBE_STMT -> ID . . DESCRIBE ( )

    DESCRIBE        shift and go to state 176


state 144

    (31) VARIABLE -> ID get_variable .

    =               reduce using rule 31 (VARIABLE -> ID get_variable .)


state 145

    (32) VARIABLE -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (131) VAR_CT -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    [               shift and go to state 177


state 146

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } . empty_global_variables_table
    (3) empty_global_variables_table -> .

    $end            reduce using rule 3 (empty_global_variables_table -> .)

    empty_global_variables_table   shift and go to state 178

state 147

    (48) BLOCK -> STATEMENT BLOCK .

    }               reduce using rule 48 (BLOCK -> STATEMENT BLOCK .)
    RETURN          reduce using rule 48 (BLOCK -> STATEMENT BLOCK .)


state 148

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for . TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for

    TO              shift and go to state 179


state 149

    (52) STATEMENT -> EXPRESSION ; .

    FOR             reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    FUNC            reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    PRINT           reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    IF              reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    WHILE           reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    ID              reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    TRUE            reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    FALSE           reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    (               reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    *               reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    /               reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    I_CONST         reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    F_CONST         reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    C_CONST         reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    }               reduce using rule 52 (STATEMENT -> EXPRESSION ; .)
    RETURN          reduce using rule 52 (STATEMENT -> EXPRESSION ; .)


state 150

    (53) STATEMENT -> WRITE ; .

    FOR             reduce using rule 53 (STATEMENT -> WRITE ; .)
    FUNC            reduce using rule 53 (STATEMENT -> WRITE ; .)
    PRINT           reduce using rule 53 (STATEMENT -> WRITE ; .)
    IF              reduce using rule 53 (STATEMENT -> WRITE ; .)
    WHILE           reduce using rule 53 (STATEMENT -> WRITE ; .)
    ID              reduce using rule 53 (STATEMENT -> WRITE ; .)
    TRUE            reduce using rule 53 (STATEMENT -> WRITE ; .)
    FALSE           reduce using rule 53 (STATEMENT -> WRITE ; .)
    (               reduce using rule 53 (STATEMENT -> WRITE ; .)
    *               reduce using rule 53 (STATEMENT -> WRITE ; .)
    /               reduce using rule 53 (STATEMENT -> WRITE ; .)
    I_CONST         reduce using rule 53 (STATEMENT -> WRITE ; .)
    F_CONST         reduce using rule 53 (STATEMENT -> WRITE ; .)
    C_CONST         reduce using rule 53 (STATEMENT -> WRITE ; .)
    }               reduce using rule 53 (STATEMENT -> WRITE ; .)
    RETURN          reduce using rule 53 (STATEMENT -> WRITE ; .)


state 151

    (63) ASSIGNATION -> VARIABLE = . add_operator EXPRESSION ; add_assignation_quad
    (65) ASSIGNATION -> VARIABLE = . add_operator FUNC_CALL functions_assignation add_assignation_quad
    (58) add_operator -> .

    FUNC            reduce using rule 58 (add_operator -> .)
    TRUE            reduce using rule 58 (add_operator -> .)
    FALSE           reduce using rule 58 (add_operator -> .)
    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 180

state 152

    (64) ASSIGNATION -> FOR VARIABLE . = add_operator EXPRESSION add_assignation_for_quad

    =               shift and go to state 181


state 153

    (31) VARIABLE -> ID . get_variable
    (32) VARIABLE -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID . add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (27) get_variable -> .
    (6) add_id -> .

    =               reduce using rule 27 (get_variable -> .)
    [               reduce using rule 6 (add_id -> .)

    get_variable                   shift and go to state 144
    add_id                         shift and go to state 182

state 154

    (74) WRITE -> PRINT add_operator . ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> PRINT add_operator . ( TITLE WRITE_PRIME )

    (               shift and go to state 183


state 155

    (88) CONDITION -> IF ( . EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 184
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 156

    (91) WHILE_STMT -> WHILE ( . append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (87) append_jump -> .

    TRUE            reduce using rule 87 (append_jump -> .)
    FALSE           reduce using rule 87 (append_jump -> .)
    (               reduce using rule 87 (append_jump -> .)
    *               reduce using rule 87 (append_jump -> .)
    /               reduce using rule 87 (append_jump -> .)
    ID              reduce using rule 87 (append_jump -> .)
    I_CONST         reduce using rule 87 (append_jump -> .)
    F_CONST         reduce using rule 87 (append_jump -> .)
    C_CONST         reduce using rule 87 (append_jump -> .)
    FUNC            reduce using rule 87 (append_jump -> .)

    append_jump                    shift and go to state 185

state 157

    (44) PARAM -> TIPO_SIMPLE . ID add_id save_parameter PARAM_PRIME

    ID              shift and go to state 186


state 158

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM . add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (43) add_parameters -> .

    )               reduce using rule 43 (add_parameters -> .)

    add_parameters                 shift and go to state 187

state 159

    (45) PARAM -> empty .

    )               reduce using rule 45 (PARAM -> empty .)


state 160

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM . add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (43) add_parameters -> .

    )               reduce using rule 43 (add_parameters -> .)

    add_parameters                 shift and go to state 188

state 161

    (25) TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME .

    ;               reduce using rule 25 (TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME .)


state 162

    (131) VAR_CT -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    ]               shift and go to state 189


state 163

    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ . EXPRESSION ] check_for_array_length ; save_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 190
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 164

    (23) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; . save_array
    (19) save_array -> .

    VAR             reduce using rule 19 (save_array -> .)
    FUNC            reduce using rule 19 (save_array -> .)
    VOID            reduce using rule 19 (save_array -> .)
    FOR             reduce using rule 19 (save_array -> .)
    PRINT           reduce using rule 19 (save_array -> .)
    IF              reduce using rule 19 (save_array -> .)
    WHILE           reduce using rule 19 (save_array -> .)
    ID              reduce using rule 19 (save_array -> .)
    TRUE            reduce using rule 19 (save_array -> .)
    FALSE           reduce using rule 19 (save_array -> .)
    (               reduce using rule 19 (save_array -> .)
    *               reduce using rule 19 (save_array -> .)
    /               reduce using rule 19 (save_array -> .)
    I_CONST         reduce using rule 19 (save_array -> .)
    F_CONST         reduce using rule 19 (save_array -> .)
    C_CONST         reduce using rule 19 (save_array -> .)
    }               reduce using rule 19 (save_array -> .)
    RETURN          reduce using rule 19 (save_array -> .)

    save_array                     shift and go to state 191

state 165

    (101) EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .

    ]               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ;               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FUNC            reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    RETURN          reduce using rule 101 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)


state 166

    (104) AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .

    OR              reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ]               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    )               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ;               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ,               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    TO              reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    FOR             reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    FUNC            reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    PRINT           reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    IF              reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    WHILE           reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ID              reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    TRUE            reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    FALSE           reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    (               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    *               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    /               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    I_CONST         reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    F_CONST         reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    C_CONST         reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    }               reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    RETURN          reduce using rule 104 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)


state 167

    (109) B_EXP_PRIME -> > add_operator B_EXP . aritmetics_operation
    (99) aritmetics_operation -> .

    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 192

state 168

    (110) B_EXP_PRIME -> < add_operator B_EXP . aritmetics_operation
    (99) aritmetics_operation -> .

    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 193

state 169

    (111) B_EXP_PRIME -> DIFFERENT add_operator B_EXP . aritmetics_operation
    (99) aritmetics_operation -> .

    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 194

state 170

    (112) B_EXP_PRIME -> EQUAL add_operator B_EXP . aritmetics_operation
    (99) aritmetics_operation -> .

    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 195

state 171

    (115) EXP_PRIME -> + add_operator TERM . EXP_PRIME aritmetics_operation
    (115) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (116) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (117) EXP_PRIME -> . empty
    (133) empty -> .

    +               shift and go to state 95
    -               shift and go to state 96
    >               reduce using rule 133 (empty -> .)
    <               reduce using rule 133 (empty -> .)
    DIFFERENT       reduce using rule 133 (empty -> .)
    EQUAL           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    EXP_PRIME                      shift and go to state 196
    empty                          shift and go to state 97

state 172

    (116) EXP_PRIME -> - add_operator TERM . EXP_PRIME aritmetics_operation
    (115) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (116) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (117) EXP_PRIME -> . empty
    (133) empty -> .

    +               shift and go to state 95
    -               shift and go to state 96
    >               reduce using rule 133 (empty -> .)
    <               reduce using rule 133 (empty -> .)
    DIFFERENT       reduce using rule 133 (empty -> .)
    EQUAL           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    EXP_PRIME                      shift and go to state 197
    empty                          shift and go to state 97

state 173

    (119) TERM_PRIME -> * add_operator FACTOR . aritmetics_operation TERM_PRIME
    (99) aritmetics_operation -> .

    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    +               reduce using rule 99 (aritmetics_operation -> .)
    -               reduce using rule 99 (aritmetics_operation -> .)
    >               reduce using rule 99 (aritmetics_operation -> .)
    <               reduce using rule 99 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 99 (aritmetics_operation -> .)
    EQUAL           reduce using rule 99 (aritmetics_operation -> .)
    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 198

state 174

    (120) TERM_PRIME -> / add_operator FACTOR . aritmetics_operation TERM_PRIME
    (99) aritmetics_operation -> .

    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    +               reduce using rule 99 (aritmetics_operation -> .)
    -               reduce using rule 99 (aritmetics_operation -> .)
    >               reduce using rule 99 (aritmetics_operation -> .)
    <               reduce using rule 99 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 99 (aritmetics_operation -> .)
    EQUAL           reduce using rule 99 (aritmetics_operation -> .)
    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 199

state 175

    (69) FUNC_CALL -> FUNC ID era_quad ( . EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 200
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 176

    (98) DESCRIBE_STMT -> ID . DESCRIBE . ( )

    (               shift and go to state 201


state 177

    (32) VARIABLE -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (131) VAR_CT -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 202
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 178

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table .

    $end            reduce using rule 1 (PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table .)


state 179

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO . ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for

    (               shift and go to state 203


state 180

    (63) ASSIGNATION -> VARIABLE = add_operator . EXPRESSION ; add_assignation_quad
    (65) ASSIGNATION -> VARIABLE = add_operator . FUNC_CALL functions_assignation add_assignation_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    FUNC            shift and go to state 72
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    EXPRESSION                     shift and go to state 204
    FUNC_CALL                      shift and go to state 205
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 181

    (64) ASSIGNATION -> FOR VARIABLE = . add_operator EXPRESSION add_assignation_for_quad
    (58) add_operator -> .

    TRUE            reduce using rule 58 (add_operator -> .)
    FALSE           reduce using rule 58 (add_operator -> .)
    (               reduce using rule 58 (add_operator -> .)
    *               reduce using rule 58 (add_operator -> .)
    /               reduce using rule 58 (add_operator -> .)
    ID              reduce using rule 58 (add_operator -> .)
    I_CONST         reduce using rule 58 (add_operator -> .)
    F_CONST         reduce using rule 58 (add_operator -> .)
    C_CONST         reduce using rule 58 (add_operator -> .)
    FUNC            reduce using rule 58 (add_operator -> .)

    add_operator                   shift and go to state 206

state 182

    (32) VARIABLE -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id . [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    [               shift and go to state 207


state 183

    (74) WRITE -> PRINT add_operator ( . EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> PRINT add_operator ( . TITLE WRITE_PRIME )
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TITLE           shift and go to state 209
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 208
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 184

    (88) CONDITION -> IF ( EXPRESSION . pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (86) pop_type -> .

    )               reduce using rule 86 (pop_type -> .)

    pop_type                       shift and go to state 210

state 185

    (91) WHILE_STMT -> WHILE ( append_jump . EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 211
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 186

    (44) PARAM -> TIPO_SIMPLE ID . add_id save_parameter PARAM_PRIME
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    )               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 212

state 187

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters . ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table

    )               shift and go to state 213


state 188

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters . ) { VARS_PRIME BLOCK } empty_local_variables_table

    )               shift and go to state 214


state 189

    (131) VAR_CT -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (28) ver_quad_dimension_one_array -> .
    (29) ver_quad_dimension_one_matrix -> .

    *               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    /               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    +               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    -               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    >               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    <               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    DIFFERENT       reduce using rule 28 (ver_quad_dimension_one_array -> .)
    EQUAL           reduce using rule 28 (ver_quad_dimension_one_array -> .)
    AND             reduce using rule 28 (ver_quad_dimension_one_array -> .)
    OR              reduce using rule 28 (ver_quad_dimension_one_array -> .)
    ]               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    )               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    ;               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    ,               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    TO              reduce using rule 28 (ver_quad_dimension_one_array -> .)
    FOR             reduce using rule 28 (ver_quad_dimension_one_array -> .)
    FUNC            reduce using rule 28 (ver_quad_dimension_one_array -> .)
    PRINT           reduce using rule 28 (ver_quad_dimension_one_array -> .)
    IF              reduce using rule 28 (ver_quad_dimension_one_array -> .)
    WHILE           reduce using rule 28 (ver_quad_dimension_one_array -> .)
    ID              reduce using rule 28 (ver_quad_dimension_one_array -> .)
    TRUE            reduce using rule 28 (ver_quad_dimension_one_array -> .)
    FALSE           reduce using rule 28 (ver_quad_dimension_one_array -> .)
    (               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    I_CONST         reduce using rule 28 (ver_quad_dimension_one_array -> .)
    F_CONST         reduce using rule 28 (ver_quad_dimension_one_array -> .)
    C_CONST         reduce using rule 28 (ver_quad_dimension_one_array -> .)
    }               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    RETURN          reduce using rule 28 (ver_quad_dimension_one_array -> .)
    [               reduce using rule 29 (ver_quad_dimension_one_matrix -> .)

    ver_quad_dimension_one_array   shift and go to state 215
    ver_quad_dimension_one_matrix  shift and go to state 216

state 190

    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION . ] check_for_array_length ; save_matrix

    ]               shift and go to state 217


state 191

    (23) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .

    VAR             reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    FUNC            reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    VOID            reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    FOR             reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    PRINT           reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    IF              reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    WHILE           reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    ID              reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    TRUE            reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    FALSE           reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    (               reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    *               reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    /               reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    I_CONST         reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    F_CONST         reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    C_CONST         reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    }               reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)
    RETURN          reduce using rule 23 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array .)


state 192

    (109) B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    FUNC            reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 109 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)


state 193

    (110) B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    FUNC            reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 110 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)


state 194

    (111) B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    FUNC            reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 111 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)


state 195

    (112) B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    FUNC            reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 112 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)


state 196

    (115) EXP_PRIME -> + add_operator TERM EXP_PRIME . aritmetics_operation
    (99) aritmetics_operation -> .

    >               reduce using rule 99 (aritmetics_operation -> .)
    <               reduce using rule 99 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 99 (aritmetics_operation -> .)
    EQUAL           reduce using rule 99 (aritmetics_operation -> .)
    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 218

state 197

    (116) EXP_PRIME -> - add_operator TERM EXP_PRIME . aritmetics_operation
    (99) aritmetics_operation -> .

    >               reduce using rule 99 (aritmetics_operation -> .)
    <               reduce using rule 99 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 99 (aritmetics_operation -> .)
    EQUAL           reduce using rule 99 (aritmetics_operation -> .)
    AND             reduce using rule 99 (aritmetics_operation -> .)
    OR              reduce using rule 99 (aritmetics_operation -> .)
    ]               reduce using rule 99 (aritmetics_operation -> .)
    )               reduce using rule 99 (aritmetics_operation -> .)
    ;               reduce using rule 99 (aritmetics_operation -> .)
    ,               reduce using rule 99 (aritmetics_operation -> .)
    TO              reduce using rule 99 (aritmetics_operation -> .)
    FOR             reduce using rule 99 (aritmetics_operation -> .)
    FUNC            reduce using rule 99 (aritmetics_operation -> .)
    PRINT           reduce using rule 99 (aritmetics_operation -> .)
    IF              reduce using rule 99 (aritmetics_operation -> .)
    WHILE           reduce using rule 99 (aritmetics_operation -> .)
    ID              reduce using rule 99 (aritmetics_operation -> .)
    TRUE            reduce using rule 99 (aritmetics_operation -> .)
    FALSE           reduce using rule 99 (aritmetics_operation -> .)
    (               reduce using rule 99 (aritmetics_operation -> .)
    *               reduce using rule 99 (aritmetics_operation -> .)
    /               reduce using rule 99 (aritmetics_operation -> .)
    I_CONST         reduce using rule 99 (aritmetics_operation -> .)
    F_CONST         reduce using rule 99 (aritmetics_operation -> .)
    C_CONST         reduce using rule 99 (aritmetics_operation -> .)
    }               reduce using rule 99 (aritmetics_operation -> .)
    RETURN          reduce using rule 99 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 219

state 198

    (119) TERM_PRIME -> * add_operator FACTOR aritmetics_operation . TERM_PRIME
    (119) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (120) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (121) TERM_PRIME -> . empty
    (133) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 99
    /               shift and go to state 100
    +               reduce using rule 133 (empty -> .)
    -               reduce using rule 133 (empty -> .)
    >               reduce using rule 133 (empty -> .)
    <               reduce using rule 133 (empty -> .)
    DIFFERENT       reduce using rule 133 (empty -> .)
    EQUAL           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

  ! *               [ reduce using rule 133 (empty -> .) ]
  ! /               [ reduce using rule 133 (empty -> .) ]

    TERM_PRIME                     shift and go to state 220
    empty                          shift and go to state 101

state 199

    (120) TERM_PRIME -> / add_operator FACTOR aritmetics_operation . TERM_PRIME
    (119) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (120) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (121) TERM_PRIME -> . empty
    (133) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 99
    /               shift and go to state 100
    +               reduce using rule 133 (empty -> .)
    -               reduce using rule 133 (empty -> .)
    >               reduce using rule 133 (empty -> .)
    <               reduce using rule 133 (empty -> .)
    DIFFERENT       reduce using rule 133 (empty -> .)
    EQUAL           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    ]               reduce using rule 133 (empty -> .)
    )               reduce using rule 133 (empty -> .)
    ;               reduce using rule 133 (empty -> .)
    ,               reduce using rule 133 (empty -> .)
    TO              reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

  ! *               [ reduce using rule 133 (empty -> .) ]
  ! /               [ reduce using rule 133 (empty -> .) ]

    TERM_PRIME                     shift and go to state 221
    empty                          shift and go to state 101

state 200

    (69) FUNC_CALL -> FUNC ID era_quad ( EXPRESSION . param_quad FUNC_CALL_PRIME ) go_sub_quad
    (67) param_quad -> .

    ,               reduce using rule 67 (param_quad -> .)
    )               reduce using rule 67 (param_quad -> .)

    param_quad                     shift and go to state 222

state 201

    (98) DESCRIBE_STMT -> ID . DESCRIBE ( . )

    )               shift and go to state 223


state 202

    (32) VARIABLE -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (131) VAR_CT -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    ]               shift and go to state 224


state 203

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( . EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 225
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 204

    (63) ASSIGNATION -> VARIABLE = add_operator EXPRESSION . ; add_assignation_quad

    ;               shift and go to state 226


state 205

    (65) ASSIGNATION -> VARIABLE = add_operator FUNC_CALL . functions_assignation add_assignation_quad
    (130) VAR_CT -> FUNC_CALL .
    (62) functions_assignation -> .

  ! reduce/reduce conflict for * resolved using rule 62 (functions_assignation -> .)
  ! reduce/reduce conflict for / resolved using rule 62 (functions_assignation -> .)
    +               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    -               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    >               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    <               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    DIFFERENT       reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    EQUAL           reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    AND             reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    OR              reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    ;               reduce using rule 130 (VAR_CT -> FUNC_CALL .)
    TO              reduce using rule 62 (functions_assignation -> .)
    FOR             reduce using rule 62 (functions_assignation -> .)
    FUNC            reduce using rule 62 (functions_assignation -> .)
    PRINT           reduce using rule 62 (functions_assignation -> .)
    IF              reduce using rule 62 (functions_assignation -> .)
    WHILE           reduce using rule 62 (functions_assignation -> .)
    ID              reduce using rule 62 (functions_assignation -> .)
    TRUE            reduce using rule 62 (functions_assignation -> .)
    FALSE           reduce using rule 62 (functions_assignation -> .)
    (               reduce using rule 62 (functions_assignation -> .)
    *               reduce using rule 62 (functions_assignation -> .)
    /               reduce using rule 62 (functions_assignation -> .)
    I_CONST         reduce using rule 62 (functions_assignation -> .)
    F_CONST         reduce using rule 62 (functions_assignation -> .)
    C_CONST         reduce using rule 62 (functions_assignation -> .)
    }               reduce using rule 62 (functions_assignation -> .)
    RETURN          reduce using rule 62 (functions_assignation -> .)

  ! *               [ reduce using rule 130 (VAR_CT -> FUNC_CALL .) ]
  ! /               [ reduce using rule 130 (VAR_CT -> FUNC_CALL .) ]

    functions_assignation          shift and go to state 227

state 206

    (64) ASSIGNATION -> FOR VARIABLE = add_operator . EXPRESSION add_assignation_for_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 228
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 207

    (32) VARIABLE -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id [ . EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 229
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 208

    (74) WRITE -> PRINT add_operator ( EXPRESSION . print_quad WRITE_PRIME )
    (72) print_quad -> .

    ,               reduce using rule 72 (print_quad -> .)
    )               reduce using rule 72 (print_quad -> .)

    print_quad                     shift and go to state 230

state 209

    (75) WRITE -> PRINT add_operator ( TITLE . WRITE_PRIME )
    (76) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (77) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (78) WRITE_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 232
    )               reduce using rule 133 (empty -> .)

    WRITE_PRIME                    shift and go to state 231
    empty                          shift and go to state 233

state 210

    (88) CONDITION -> IF ( EXPRESSION pop_type . ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT

    )               shift and go to state 234


state 211

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION . pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (86) pop_type -> .

    )               reduce using rule 86 (pop_type -> .)

    pop_type                       shift and go to state 235

state 212

    (44) PARAM -> TIPO_SIMPLE ID add_id . save_parameter PARAM_PRIME
    (8) save_parameter -> .

    ,               reduce using rule 8 (save_parameter -> .)
    )               reduce using rule 8 (save_parameter -> .)

    save_parameter                 shift and go to state 236

state 213

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) . save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (39) save_function_as_variable -> .

    {               reduce using rule 39 (save_function_as_variable -> .)

    save_function_as_variable      shift and go to state 237

state 214

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) . { VARS_PRIME BLOCK } empty_local_variables_table

    {               shift and go to state 238


state 215

    (131) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .

    *               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    /               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    +               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    -               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    >               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    <               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    DIFFERENT       reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    EQUAL           reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    AND             reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    OR              reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    ]               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    )               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    ;               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    ,               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    TO              reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    FOR             reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    FUNC            reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    PRINT           reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    IF              reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    WHILE           reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    ID              reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    TRUE            reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    FALSE           reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    (               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    I_CONST         reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    F_CONST         reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    C_CONST         reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    }               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    RETURN          reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)


state 216

    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix . [ EXPRESSION ] ver_quad_dimension_two_matrix

    [               shift and go to state 239


state 217

    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] . check_for_array_length ; save_matrix
    (18) check_for_array_length -> .

    ;               reduce using rule 18 (check_for_array_length -> .)

    check_for_array_length         shift and go to state 240

state 218

    (115) EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .

    >               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    <               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    DIFFERENT       reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    EQUAL           reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    AND             reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    OR              reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ]               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    )               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ;               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ,               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    TO              reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    FOR             reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    FUNC            reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    PRINT           reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    IF              reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    WHILE           reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ID              reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    TRUE            reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    FALSE           reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    (               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    *               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    /               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    I_CONST         reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    F_CONST         reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    C_CONST         reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    }               reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    RETURN          reduce using rule 115 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)


state 219

    (116) EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .

    >               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    <               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    DIFFERENT       reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    EQUAL           reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    AND             reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    OR              reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ]               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    )               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ;               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ,               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    TO              reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    FOR             reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    FUNC            reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    PRINT           reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    IF              reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    WHILE           reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ID              reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    TRUE            reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    FALSE           reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    (               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    *               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    /               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    I_CONST         reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    F_CONST         reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    C_CONST         reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    }               reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    RETURN          reduce using rule 116 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)


state 220

    (119) TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .

    +               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    -               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    >               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    <               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    DIFFERENT       reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    EQUAL           reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    AND             reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    OR              reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ]               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    )               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ;               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ,               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TO              reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FOR             reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FUNC            reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    PRINT           reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    IF              reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    WHILE           reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ID              reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TRUE            reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FALSE           reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    (               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    *               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    /               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    I_CONST         reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    F_CONST         reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    C_CONST         reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    }               reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    RETURN          reduce using rule 119 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)


state 221

    (120) TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .

    +               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    -               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    >               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    <               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    DIFFERENT       reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    EQUAL           reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    AND             reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    OR              reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ]               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    )               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ;               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ,               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TO              reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FOR             reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FUNC            reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    PRINT           reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    IF              reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    WHILE           reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ID              reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TRUE            reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FALSE           reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    (               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    *               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    /               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    I_CONST         reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    F_CONST         reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    C_CONST         reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    }               reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    RETURN          reduce using rule 120 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)


state 222

    (69) FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad . FUNC_CALL_PRIME ) go_sub_quad
    (70) FUNC_CALL_PRIME -> . , EXPRESSION param_quad FUNC_CALL_PRIME
    (71) FUNC_CALL_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 242
    )               reduce using rule 133 (empty -> .)

    FUNC_CALL_PRIME                shift and go to state 241
    empty                          shift and go to state 243

state 223

    (98) DESCRIBE_STMT -> ID . DESCRIBE ( ) .

    FOR             reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    FUNC            reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    PRINT           reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    IF              reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    WHILE           reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    ID              reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    TRUE            reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    FALSE           reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    (               reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    *               reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    /               reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    I_CONST         reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    F_CONST         reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    C_CONST         reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    }               reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    RETURN          reduce using rule 98 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)


state 224

    (32) VARIABLE -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (131) VAR_CT -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_array
    (132) VAR_CT -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (28) ver_quad_dimension_one_array -> .
    (29) ver_quad_dimension_one_matrix -> .

    =               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    *               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    /               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    +               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    -               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    >               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    <               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    DIFFERENT       reduce using rule 28 (ver_quad_dimension_one_array -> .)
    EQUAL           reduce using rule 28 (ver_quad_dimension_one_array -> .)
    AND             reduce using rule 28 (ver_quad_dimension_one_array -> .)
    OR              reduce using rule 28 (ver_quad_dimension_one_array -> .)
    ;               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    ]               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    [               reduce using rule 29 (ver_quad_dimension_one_matrix -> .)

    ver_quad_dimension_one_array   shift and go to state 244
    ver_quad_dimension_one_matrix  shift and go to state 245

state 225

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION . check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (92) check_exact_type_for -> .

    )               reduce using rule 92 (check_exact_type_for -> .)

    check_exact_type_for           shift and go to state 246

state 226

    (63) ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; . add_assignation_quad
    (60) add_assignation_quad -> .

    TO              reduce using rule 60 (add_assignation_quad -> .)
    FOR             reduce using rule 60 (add_assignation_quad -> .)
    FUNC            reduce using rule 60 (add_assignation_quad -> .)
    PRINT           reduce using rule 60 (add_assignation_quad -> .)
    IF              reduce using rule 60 (add_assignation_quad -> .)
    WHILE           reduce using rule 60 (add_assignation_quad -> .)
    ID              reduce using rule 60 (add_assignation_quad -> .)
    TRUE            reduce using rule 60 (add_assignation_quad -> .)
    FALSE           reduce using rule 60 (add_assignation_quad -> .)
    (               reduce using rule 60 (add_assignation_quad -> .)
    *               reduce using rule 60 (add_assignation_quad -> .)
    /               reduce using rule 60 (add_assignation_quad -> .)
    I_CONST         reduce using rule 60 (add_assignation_quad -> .)
    F_CONST         reduce using rule 60 (add_assignation_quad -> .)
    C_CONST         reduce using rule 60 (add_assignation_quad -> .)
    }               reduce using rule 60 (add_assignation_quad -> .)
    RETURN          reduce using rule 60 (add_assignation_quad -> .)

    add_assignation_quad           shift and go to state 247

state 227

    (65) ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation . add_assignation_quad
    (60) add_assignation_quad -> .

    TO              reduce using rule 60 (add_assignation_quad -> .)
    FOR             reduce using rule 60 (add_assignation_quad -> .)
    FUNC            reduce using rule 60 (add_assignation_quad -> .)
    PRINT           reduce using rule 60 (add_assignation_quad -> .)
    IF              reduce using rule 60 (add_assignation_quad -> .)
    WHILE           reduce using rule 60 (add_assignation_quad -> .)
    ID              reduce using rule 60 (add_assignation_quad -> .)
    TRUE            reduce using rule 60 (add_assignation_quad -> .)
    FALSE           reduce using rule 60 (add_assignation_quad -> .)
    (               reduce using rule 60 (add_assignation_quad -> .)
    *               reduce using rule 60 (add_assignation_quad -> .)
    /               reduce using rule 60 (add_assignation_quad -> .)
    I_CONST         reduce using rule 60 (add_assignation_quad -> .)
    F_CONST         reduce using rule 60 (add_assignation_quad -> .)
    C_CONST         reduce using rule 60 (add_assignation_quad -> .)
    }               reduce using rule 60 (add_assignation_quad -> .)
    RETURN          reduce using rule 60 (add_assignation_quad -> .)

    add_assignation_quad           shift and go to state 248

state 228

    (64) ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION . add_assignation_for_quad
    (61) add_assignation_for_quad -> .

    TO              reduce using rule 61 (add_assignation_for_quad -> .)
    FOR             reduce using rule 61 (add_assignation_for_quad -> .)
    FUNC            reduce using rule 61 (add_assignation_for_quad -> .)
    PRINT           reduce using rule 61 (add_assignation_for_quad -> .)
    IF              reduce using rule 61 (add_assignation_for_quad -> .)
    WHILE           reduce using rule 61 (add_assignation_for_quad -> .)
    ID              reduce using rule 61 (add_assignation_for_quad -> .)
    TRUE            reduce using rule 61 (add_assignation_for_quad -> .)
    FALSE           reduce using rule 61 (add_assignation_for_quad -> .)
    (               reduce using rule 61 (add_assignation_for_quad -> .)
    *               reduce using rule 61 (add_assignation_for_quad -> .)
    /               reduce using rule 61 (add_assignation_for_quad -> .)
    I_CONST         reduce using rule 61 (add_assignation_for_quad -> .)
    F_CONST         reduce using rule 61 (add_assignation_for_quad -> .)
    C_CONST         reduce using rule 61 (add_assignation_for_quad -> .)
    }               reduce using rule 61 (add_assignation_for_quad -> .)
    RETURN          reduce using rule 61 (add_assignation_for_quad -> .)

    add_assignation_for_quad       shift and go to state 249

state 229

    (32) VARIABLE -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id [ EXPRESSION . ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    ]               shift and go to state 250


state 230

    (74) WRITE -> PRINT add_operator ( EXPRESSION print_quad . WRITE_PRIME )
    (76) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (77) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (78) WRITE_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 232
    )               reduce using rule 133 (empty -> .)

    WRITE_PRIME                    shift and go to state 251
    empty                          shift and go to state 233

state 231

    (75) WRITE -> PRINT add_operator ( TITLE WRITE_PRIME . )

    )               shift and go to state 252


state 232

    (76) WRITE_PRIME -> , . add_print_operator EXPRESSION print_quad WRITE_PRIME
    (77) WRITE_PRIME -> , . add_print_operator TITLE print_quad WRITE_PRIME
    (73) add_print_operator -> .

    TITLE           reduce using rule 73 (add_print_operator -> .)
    TRUE            reduce using rule 73 (add_print_operator -> .)
    FALSE           reduce using rule 73 (add_print_operator -> .)
    (               reduce using rule 73 (add_print_operator -> .)
    *               reduce using rule 73 (add_print_operator -> .)
    /               reduce using rule 73 (add_print_operator -> .)
    ID              reduce using rule 73 (add_print_operator -> .)
    I_CONST         reduce using rule 73 (add_print_operator -> .)
    F_CONST         reduce using rule 73 (add_print_operator -> .)
    C_CONST         reduce using rule 73 (add_print_operator -> .)
    FUNC            reduce using rule 73 (add_print_operator -> .)

    add_print_operator             shift and go to state 253

state 233

    (78) WRITE_PRIME -> empty .

    )               reduce using rule 78 (WRITE_PRIME -> empty .)


state 234

    (88) CONDITION -> IF ( EXPRESSION pop_type ) . { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT

    {               shift and go to state 254


state 235

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type . ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand

    )               shift and go to state 255


state 236

    (44) PARAM -> TIPO_SIMPLE ID add_id save_parameter . PARAM_PRIME
    (46) PARAM_PRIME -> . , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (47) PARAM_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 257
    )               reduce using rule 133 (empty -> .)

    PARAM_PRIME                    shift and go to state 256
    empty                          shift and go to state 258

state 237

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable . { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table

    {               shift and go to state 259


state 238

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { . VARS_PRIME BLOCK } empty_local_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (21) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (22) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (23) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (133) empty -> .

    VAR             shift and go to state 12
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)

    VARS_PRIME                     shift and go to state 260
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 239

    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ . EXPRESSION ] ver_quad_dimension_two_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 261
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 240

    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length . ; save_matrix

    ;               shift and go to state 262


state 241

    (69) FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME . ) go_sub_quad

    )               shift and go to state 263


state 242

    (70) FUNC_CALL_PRIME -> , . EXPRESSION param_quad FUNC_CALL_PRIME
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 264
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 243

    (71) FUNC_CALL_PRIME -> empty .

    )               reduce using rule 71 (FUNC_CALL_PRIME -> empty .)


state 244

    (32) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .
    (131) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .

    =               reduce using rule 32 (VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    *               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    /               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    +               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    -               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    >               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    <               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    DIFFERENT       reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    EQUAL           reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    AND             reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    OR              reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)
    ;               reduce using rule 131 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)


state 245

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix . [ EXPRESSION ] ver_quad_dimension_two_matrix
    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix . [ EXPRESSION ] ver_quad_dimension_two_matrix

    [               shift and go to state 265


state 246

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for . add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (93) add_final_counter_for -> .

    )               reduce using rule 93 (add_final_counter_for -> .)

    add_final_counter_for          shift and go to state 266

state 247

    (63) ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .

    TO              reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    FOR             reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    FUNC            reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    PRINT           reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    IF              reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    WHILE           reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    ID              reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    TRUE            reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    FALSE           reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    (               reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    *               reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    /               reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    I_CONST         reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    F_CONST         reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    C_CONST         reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    }               reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    RETURN          reduce using rule 63 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)


state 248

    (65) ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .

    TO              reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    FOR             reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    FUNC            reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    PRINT           reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    IF              reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    WHILE           reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    ID              reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    TRUE            reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    FALSE           reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    (               reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    *               reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    /               reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    I_CONST         reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    F_CONST         reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    C_CONST         reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    }               reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)
    RETURN          reduce using rule 65 (ASSIGNATION -> VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad .)


state 249

    (64) ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .

    TO              reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    FOR             reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    FUNC            reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    PRINT           reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    IF              reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    WHILE           reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    ID              reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    TRUE            reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    FALSE           reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    (               reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    *               reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    /               reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    I_CONST         reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    F_CONST         reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    C_CONST         reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    }               reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    RETURN          reduce using rule 64 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)


state 250

    (32) VARIABLE -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_array
    (33) VARIABLE -> ID add_id [ EXPRESSION ] . ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (28) ver_quad_dimension_one_array -> .
    (29) ver_quad_dimension_one_matrix -> .

    =               reduce using rule 28 (ver_quad_dimension_one_array -> .)
    [               reduce using rule 29 (ver_quad_dimension_one_matrix -> .)

    ver_quad_dimension_one_array   shift and go to state 267
    ver_quad_dimension_one_matrix  shift and go to state 268

state 251

    (74) WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME . )

    )               shift and go to state 269


state 252

    (75) WRITE -> PRINT add_operator ( TITLE WRITE_PRIME ) .

    ;               reduce using rule 75 (WRITE -> PRINT add_operator ( TITLE WRITE_PRIME ) .)


state 253

    (76) WRITE_PRIME -> , add_print_operator . EXPRESSION print_quad WRITE_PRIME
    (77) WRITE_PRIME -> , add_print_operator . TITLE print_quad WRITE_PRIME
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TITLE           shift and go to state 271
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 270
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 254

    (88) CONDITION -> IF ( EXPRESSION pop_type ) { . go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (79) go_to_false_quad -> .

    FOR             reduce using rule 79 (go_to_false_quad -> .)
    FUNC            reduce using rule 79 (go_to_false_quad -> .)
    PRINT           reduce using rule 79 (go_to_false_quad -> .)
    IF              reduce using rule 79 (go_to_false_quad -> .)
    WHILE           reduce using rule 79 (go_to_false_quad -> .)
    ID              reduce using rule 79 (go_to_false_quad -> .)
    TRUE            reduce using rule 79 (go_to_false_quad -> .)
    FALSE           reduce using rule 79 (go_to_false_quad -> .)
    (               reduce using rule 79 (go_to_false_quad -> .)
    *               reduce using rule 79 (go_to_false_quad -> .)
    /               reduce using rule 79 (go_to_false_quad -> .)
    I_CONST         reduce using rule 79 (go_to_false_quad -> .)
    F_CONST         reduce using rule 79 (go_to_false_quad -> .)
    C_CONST         reduce using rule 79 (go_to_false_quad -> .)
    }               reduce using rule 79 (go_to_false_quad -> .)

    go_to_false_quad               shift and go to state 272

state 255

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) . { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand

    {               shift and go to state 273


state 256

    (44) PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .

    )               reduce using rule 44 (PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .)


state 257

    (46) PARAM_PRIME -> , . TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (34) TIPO_SIMPLE -> . INT add_type
    (35) TIPO_SIMPLE -> . FLOAT add_type
    (36) TIPO_SIMPLE -> . CHAR add_type

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    TIPO_SIMPLE                    shift and go to state 274

state 258

    (47) PARAM_PRIME -> empty .

    )               reduce using rule 47 (PARAM_PRIME -> empty .)


state 259

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { . VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (21) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (22) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (23) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length ; save_array
    (24) VARS -> . VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix
    (133) empty -> .

    VAR             shift and go to state 12
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    VARS_PRIME                     shift and go to state 275
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 260

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME . BLOCK } empty_local_variables_table
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    }               reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    BLOCK                          shift and go to state 276
    STATEMENT                      shift and go to state 111
    empty                          shift and go to state 112
    ASSIGNATION                    shift and go to state 113
    FUNC_CALL                      shift and go to state 114
    EXPRESSION                     shift and go to state 115
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 261

    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION . ] ver_quad_dimension_two_matrix

    ]               shift and go to state 277


state 262

    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; . save_matrix
    (20) save_matrix -> .

    VAR             reduce using rule 20 (save_matrix -> .)
    FUNC            reduce using rule 20 (save_matrix -> .)
    VOID            reduce using rule 20 (save_matrix -> .)
    FOR             reduce using rule 20 (save_matrix -> .)
    PRINT           reduce using rule 20 (save_matrix -> .)
    IF              reduce using rule 20 (save_matrix -> .)
    WHILE           reduce using rule 20 (save_matrix -> .)
    ID              reduce using rule 20 (save_matrix -> .)
    TRUE            reduce using rule 20 (save_matrix -> .)
    FALSE           reduce using rule 20 (save_matrix -> .)
    (               reduce using rule 20 (save_matrix -> .)
    *               reduce using rule 20 (save_matrix -> .)
    /               reduce using rule 20 (save_matrix -> .)
    I_CONST         reduce using rule 20 (save_matrix -> .)
    F_CONST         reduce using rule 20 (save_matrix -> .)
    C_CONST         reduce using rule 20 (save_matrix -> .)
    }               reduce using rule 20 (save_matrix -> .)
    RETURN          reduce using rule 20 (save_matrix -> .)

    save_matrix                    shift and go to state 278

state 263

    (69) FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) . go_sub_quad
    (68) go_sub_quad -> .

    *               reduce using rule 68 (go_sub_quad -> .)
    /               reduce using rule 68 (go_sub_quad -> .)
    +               reduce using rule 68 (go_sub_quad -> .)
    -               reduce using rule 68 (go_sub_quad -> .)
    >               reduce using rule 68 (go_sub_quad -> .)
    <               reduce using rule 68 (go_sub_quad -> .)
    DIFFERENT       reduce using rule 68 (go_sub_quad -> .)
    EQUAL           reduce using rule 68 (go_sub_quad -> .)
    AND             reduce using rule 68 (go_sub_quad -> .)
    OR              reduce using rule 68 (go_sub_quad -> .)
    ]               reduce using rule 68 (go_sub_quad -> .)
    )               reduce using rule 68 (go_sub_quad -> .)
    ;               reduce using rule 68 (go_sub_quad -> .)
    ,               reduce using rule 68 (go_sub_quad -> .)
    TO              reduce using rule 68 (go_sub_quad -> .)
    FOR             reduce using rule 68 (go_sub_quad -> .)
    FUNC            reduce using rule 68 (go_sub_quad -> .)
    PRINT           reduce using rule 68 (go_sub_quad -> .)
    IF              reduce using rule 68 (go_sub_quad -> .)
    WHILE           reduce using rule 68 (go_sub_quad -> .)
    ID              reduce using rule 68 (go_sub_quad -> .)
    TRUE            reduce using rule 68 (go_sub_quad -> .)
    FALSE           reduce using rule 68 (go_sub_quad -> .)
    (               reduce using rule 68 (go_sub_quad -> .)
    I_CONST         reduce using rule 68 (go_sub_quad -> .)
    F_CONST         reduce using rule 68 (go_sub_quad -> .)
    C_CONST         reduce using rule 68 (go_sub_quad -> .)
    }               reduce using rule 68 (go_sub_quad -> .)
    RETURN          reduce using rule 68 (go_sub_quad -> .)

    go_sub_quad                    shift and go to state 279

state 264

    (70) FUNC_CALL_PRIME -> , EXPRESSION . param_quad FUNC_CALL_PRIME
    (67) param_quad -> .

    ,               reduce using rule 67 (param_quad -> .)
    )               reduce using rule 67 (param_quad -> .)

    param_quad                     shift and go to state 280

state 265

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ . EXPRESSION ] ver_quad_dimension_two_matrix
    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ . EXPRESSION ] ver_quad_dimension_two_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 281
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 266

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for . check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (95) check_boolean_expression_for -> .

    )               reduce using rule 95 (check_boolean_expression_for -> .)

    check_boolean_expression_for   shift and go to state 282

state 267

    (32) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .

    =               reduce using rule 32 (VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_array .)


state 268

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix . [ EXPRESSION ] ver_quad_dimension_two_matrix

    [               shift and go to state 283


state 269

    (74) WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME ) .

    ;               reduce using rule 74 (WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME ) .)


state 270

    (76) WRITE_PRIME -> , add_print_operator EXPRESSION . print_quad WRITE_PRIME
    (72) print_quad -> .

    ,               reduce using rule 72 (print_quad -> .)
    )               reduce using rule 72 (print_quad -> .)

    print_quad                     shift and go to state 284

state 271

    (77) WRITE_PRIME -> , add_print_operator TITLE . print_quad WRITE_PRIME
    (72) print_quad -> .

    ,               reduce using rule 72 (print_quad -> .)
    )               reduce using rule 72 (print_quad -> .)

    print_quad                     shift and go to state 285

state 272

    (88) CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad . BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    }               reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    EXPRESSION                     shift and go to state 115
    BLOCK                          shift and go to state 286
    STATEMENT                      shift and go to state 111
    empty                          shift and go to state 112
    ASSIGNATION                    shift and go to state 113
    FUNC_CALL                      shift and go to state 114
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 273

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { . go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (79) go_to_false_quad -> .

    FOR             reduce using rule 79 (go_to_false_quad -> .)
    FUNC            reduce using rule 79 (go_to_false_quad -> .)
    PRINT           reduce using rule 79 (go_to_false_quad -> .)
    IF              reduce using rule 79 (go_to_false_quad -> .)
    WHILE           reduce using rule 79 (go_to_false_quad -> .)
    ID              reduce using rule 79 (go_to_false_quad -> .)
    TRUE            reduce using rule 79 (go_to_false_quad -> .)
    FALSE           reduce using rule 79 (go_to_false_quad -> .)
    (               reduce using rule 79 (go_to_false_quad -> .)
    *               reduce using rule 79 (go_to_false_quad -> .)
    /               reduce using rule 79 (go_to_false_quad -> .)
    I_CONST         reduce using rule 79 (go_to_false_quad -> .)
    F_CONST         reduce using rule 79 (go_to_false_quad -> .)
    C_CONST         reduce using rule 79 (go_to_false_quad -> .)
    }               reduce using rule 79 (go_to_false_quad -> .)

    go_to_false_quad               shift and go to state 287

state 274

    (46) PARAM_PRIME -> , TIPO_SIMPLE . ID add_id save_parameter PARAM_PRIME

    ID              shift and go to state 288


state 275

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME . BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    RETURN          reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    BLOCK                          shift and go to state 289
    EXPRESSION                     shift and go to state 115
    STATEMENT                      shift and go to state 111
    empty                          shift and go to state 112
    ASSIGNATION                    shift and go to state 113
    FUNC_CALL                      shift and go to state 114
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 276

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK . } empty_local_variables_table

    }               shift and go to state 290


state 277

    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] . ver_quad_dimension_two_matrix
    (30) ver_quad_dimension_two_matrix -> .

    *               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    /               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    +               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    -               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    >               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    <               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    DIFFERENT       reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    EQUAL           reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    AND             reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    OR              reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    ]               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    )               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    ;               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    ,               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    TO              reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    FOR             reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    FUNC            reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    PRINT           reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    IF              reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    WHILE           reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    ID              reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    TRUE            reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    FALSE           reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    (               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    I_CONST         reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    F_CONST         reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    C_CONST         reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    }               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    RETURN          reduce using rule 30 (ver_quad_dimension_two_matrix -> .)

    ver_quad_dimension_two_matrix  shift and go to state 291

state 278

    (24) VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .

    VAR             reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    FUNC            reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    VOID            reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    FOR             reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    PRINT           reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    IF              reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    WHILE           reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    ID              reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    TRUE            reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    FALSE           reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    (               reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    *               reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    /               reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    I_CONST         reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    F_CONST         reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    C_CONST         reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    }               reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)
    RETURN          reduce using rule 24 (VARS -> VAR TIPO_SIMPLE ID add_id [ EXPRESSION ] check_for_array_length [ EXPRESSION ] check_for_array_length ; save_matrix .)


state 279

    (69) FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .

    *               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    /               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    +               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    -               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    >               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    <               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    DIFFERENT       reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    EQUAL           reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    AND             reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    OR              reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    ]               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    )               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    ;               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    ,               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    TO              reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    FOR             reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    FUNC            reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    PRINT           reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    IF              reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    WHILE           reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    ID              reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    TRUE            reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    FALSE           reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    (               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    I_CONST         reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    F_CONST         reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    C_CONST         reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    }               reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)
    RETURN          reduce using rule 69 (FUNC_CALL -> FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad .)


state 280

    (70) FUNC_CALL_PRIME -> , EXPRESSION param_quad . FUNC_CALL_PRIME
    (70) FUNC_CALL_PRIME -> . , EXPRESSION param_quad FUNC_CALL_PRIME
    (71) FUNC_CALL_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 242
    )               reduce using rule 133 (empty -> .)

    FUNC_CALL_PRIME                shift and go to state 292
    empty                          shift and go to state 243

state 281

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION . ] ver_quad_dimension_two_matrix
    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION . ] ver_quad_dimension_two_matrix

    ]               shift and go to state 293


state 282

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for . ) generate_for_quad DO { BLOCK } end_for

    )               shift and go to state 294


state 283

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ . EXPRESSION ] ver_quad_dimension_two_matrix
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 295
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 284

    (76) WRITE_PRIME -> , add_print_operator EXPRESSION print_quad . WRITE_PRIME
    (76) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (77) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (78) WRITE_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 232
    )               reduce using rule 133 (empty -> .)

    WRITE_PRIME                    shift and go to state 296
    empty                          shift and go to state 233

state 285

    (77) WRITE_PRIME -> , add_print_operator TITLE print_quad . WRITE_PRIME
    (76) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (77) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (78) WRITE_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 232
    )               reduce using rule 133 (empty -> .)

    WRITE_PRIME                    shift and go to state 297
    empty                          shift and go to state 233

state 286

    (88) CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK . } fill_go_to_false_quad_if ELSE_STMT

    }               shift and go to state 298


state 287

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad . BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    }               reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    EXPRESSION                     shift and go to state 115
    BLOCK                          shift and go to state 299
    STATEMENT                      shift and go to state 111
    empty                          shift and go to state 112
    ASSIGNATION                    shift and go to state 113
    FUNC_CALL                      shift and go to state 114
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 288

    (46) PARAM_PRIME -> , TIPO_SIMPLE ID . add_id save_parameter PARAM_PRIME
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    )               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 300

state 289

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK . RETURN EXPRESSION ; return_quad } empty_local_variables_table

    RETURN          shift and go to state 301


state 290

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } . empty_local_variables_table
    (4) empty_local_variables_table -> .

    FUNC            reduce using rule 4 (empty_local_variables_table -> .)
    VOID            reduce using rule 4 (empty_local_variables_table -> .)

    empty_local_variables_table    shift and go to state 302

state 291

    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .

    *               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    /               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    +               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    -               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    >               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    <               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    DIFFERENT       reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    EQUAL           reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    AND             reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    OR              reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    ]               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    )               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    ;               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    ,               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    TO              reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    FOR             reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    FUNC            reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    PRINT           reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    IF              reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    WHILE           reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    ID              reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    TRUE            reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    FALSE           reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    (               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    I_CONST         reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    F_CONST         reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    C_CONST         reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    }               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    RETURN          reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)


state 292

    (70) FUNC_CALL_PRIME -> , EXPRESSION param_quad FUNC_CALL_PRIME .

    )               reduce using rule 70 (FUNC_CALL_PRIME -> , EXPRESSION param_quad FUNC_CALL_PRIME .)


state 293

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] . ver_quad_dimension_two_matrix
    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] . ver_quad_dimension_two_matrix
    (30) ver_quad_dimension_two_matrix -> .

    =               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    *               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    /               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    +               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    -               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    >               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    <               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    DIFFERENT       reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    EQUAL           reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    AND             reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    OR              reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    ;               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)
    ]               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)

    ver_quad_dimension_two_matrix  shift and go to state 303

state 294

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) . generate_for_quad DO { BLOCK } end_for
    (94) generate_for_quad -> .

    DO              reduce using rule 94 (generate_for_quad -> .)

    generate_for_quad              shift and go to state 304

state 295

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION . ] ver_quad_dimension_two_matrix

    ]               shift and go to state 305


state 296

    (76) WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME .

    )               reduce using rule 76 (WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME .)


state 297

    (77) WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME .

    )               reduce using rule 77 (WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME .)


state 298

    (88) CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } . fill_go_to_false_quad_if ELSE_STMT
    (81) fill_go_to_false_quad_if -> .

    ELSE            reduce using rule 81 (fill_go_to_false_quad_if -> .)
    FOR             reduce using rule 81 (fill_go_to_false_quad_if -> .)
    FUNC            reduce using rule 81 (fill_go_to_false_quad_if -> .)
    PRINT           reduce using rule 81 (fill_go_to_false_quad_if -> .)
    IF              reduce using rule 81 (fill_go_to_false_quad_if -> .)
    WHILE           reduce using rule 81 (fill_go_to_false_quad_if -> .)
    ID              reduce using rule 81 (fill_go_to_false_quad_if -> .)
    TRUE            reduce using rule 81 (fill_go_to_false_quad_if -> .)
    FALSE           reduce using rule 81 (fill_go_to_false_quad_if -> .)
    (               reduce using rule 81 (fill_go_to_false_quad_if -> .)
    *               reduce using rule 81 (fill_go_to_false_quad_if -> .)
    /               reduce using rule 81 (fill_go_to_false_quad_if -> .)
    I_CONST         reduce using rule 81 (fill_go_to_false_quad_if -> .)
    F_CONST         reduce using rule 81 (fill_go_to_false_quad_if -> .)
    C_CONST         reduce using rule 81 (fill_go_to_false_quad_if -> .)
    }               reduce using rule 81 (fill_go_to_false_quad_if -> .)
    RETURN          reduce using rule 81 (fill_go_to_false_quad_if -> .)

    fill_go_to_false_quad_if       shift and go to state 306

state 299

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK . } fill_go_to_false_quad go_to_quad pop_operand

    }               shift and go to state 307


state 300

    (46) PARAM_PRIME -> , TIPO_SIMPLE ID add_id . save_parameter PARAM_PRIME
    (8) save_parameter -> .

    ,               reduce using rule 8 (save_parameter -> .)
    )               reduce using rule 8 (save_parameter -> .)

    save_parameter                 shift and go to state 308

state 301

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN . EXPRESSION ; return_quad } empty_local_variables_table
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    ID              shift and go to state 55
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70
    FUNC            shift and go to state 72

    EXPRESSION                     shift and go to state 309
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66
    FUNC_CALL                      shift and go to state 71

state 302

    (42) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table .

    FUNC            reduce using rule 42 (FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table .)
    VOID            reduce using rule 42 (FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table .)


state 303

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .
    (132) VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .

    =               reduce using rule 33 (VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    *               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    /               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    +               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    -               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    >               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    <               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    DIFFERENT       reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    EQUAL           reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    AND             reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    OR              reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)
    ;               reduce using rule 132 (VAR_CT -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)


state 304

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad . DO { BLOCK } end_for

    DO              shift and go to state 310


state 305

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] . ver_quad_dimension_two_matrix
    (30) ver_quad_dimension_two_matrix -> .

    =               reduce using rule 30 (ver_quad_dimension_two_matrix -> .)

    ver_quad_dimension_two_matrix  shift and go to state 311

state 306

    (88) CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if . ELSE_STMT
    (89) ELSE_STMT -> . ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad
    (90) ELSE_STMT -> . empty pop_operand
    (133) empty -> .

    ELSE            shift and go to state 313
    FOR             reduce using rule 133 (empty -> .)
    FUNC            reduce using rule 133 (empty -> .)
    PRINT           reduce using rule 133 (empty -> .)
    IF              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    TRUE            reduce using rule 133 (empty -> .)
    FALSE           reduce using rule 133 (empty -> .)
    (               reduce using rule 133 (empty -> .)
    *               reduce using rule 133 (empty -> .)
    /               reduce using rule 133 (empty -> .)
    I_CONST         reduce using rule 133 (empty -> .)
    F_CONST         reduce using rule 133 (empty -> .)
    C_CONST         reduce using rule 133 (empty -> .)
    }               reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    ELSE_STMT                      shift and go to state 312
    empty                          shift and go to state 314

state 307

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } . fill_go_to_false_quad go_to_quad pop_operand
    (80) fill_go_to_false_quad -> .

    FOR             reduce using rule 80 (fill_go_to_false_quad -> .)
    FUNC            reduce using rule 80 (fill_go_to_false_quad -> .)
    PRINT           reduce using rule 80 (fill_go_to_false_quad -> .)
    IF              reduce using rule 80 (fill_go_to_false_quad -> .)
    WHILE           reduce using rule 80 (fill_go_to_false_quad -> .)
    ID              reduce using rule 80 (fill_go_to_false_quad -> .)
    TRUE            reduce using rule 80 (fill_go_to_false_quad -> .)
    FALSE           reduce using rule 80 (fill_go_to_false_quad -> .)
    (               reduce using rule 80 (fill_go_to_false_quad -> .)
    *               reduce using rule 80 (fill_go_to_false_quad -> .)
    /               reduce using rule 80 (fill_go_to_false_quad -> .)
    I_CONST         reduce using rule 80 (fill_go_to_false_quad -> .)
    F_CONST         reduce using rule 80 (fill_go_to_false_quad -> .)
    C_CONST         reduce using rule 80 (fill_go_to_false_quad -> .)
    }               reduce using rule 80 (fill_go_to_false_quad -> .)
    RETURN          reduce using rule 80 (fill_go_to_false_quad -> .)

    fill_go_to_false_quad          shift and go to state 315

state 308

    (46) PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter . PARAM_PRIME
    (46) PARAM_PRIME -> . , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (47) PARAM_PRIME -> . empty
    (133) empty -> .

    ,               shift and go to state 257
    )               reduce using rule 133 (empty -> .)

    PARAM_PRIME                    shift and go to state 316
    empty                          shift and go to state 258

state 309

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION . ; return_quad } empty_local_variables_table

    ;               shift and go to state 317


state 310

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO . { BLOCK } end_for

    {               shift and go to state 318


state 311

    (33) VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .

    =               reduce using rule 33 (VARIABLE -> ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix .)


state 312

    (88) CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .

    FOR             reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    FUNC            reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    PRINT           reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    IF              reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    WHILE           reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    ID              reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    TRUE            reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    FALSE           reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    (               reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    *               reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    /               reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    I_CONST         reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    F_CONST         reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    C_CONST         reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    }               reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)
    RETURN          reduce using rule 88 (CONDITION -> IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT .)


state 313

    (89) ELSE_STMT -> ELSE . { go_to_true_quad BLOCK } fill_go_to_true_quad

    {               shift and go to state 319


state 314

    (90) ELSE_STMT -> empty . pop_operand
    (85) pop_operand -> .

    FOR             reduce using rule 85 (pop_operand -> .)
    FUNC            reduce using rule 85 (pop_operand -> .)
    PRINT           reduce using rule 85 (pop_operand -> .)
    IF              reduce using rule 85 (pop_operand -> .)
    WHILE           reduce using rule 85 (pop_operand -> .)
    ID              reduce using rule 85 (pop_operand -> .)
    TRUE            reduce using rule 85 (pop_operand -> .)
    FALSE           reduce using rule 85 (pop_operand -> .)
    (               reduce using rule 85 (pop_operand -> .)
    *               reduce using rule 85 (pop_operand -> .)
    /               reduce using rule 85 (pop_operand -> .)
    I_CONST         reduce using rule 85 (pop_operand -> .)
    F_CONST         reduce using rule 85 (pop_operand -> .)
    C_CONST         reduce using rule 85 (pop_operand -> .)
    }               reduce using rule 85 (pop_operand -> .)
    RETURN          reduce using rule 85 (pop_operand -> .)

    pop_operand                    shift and go to state 320

state 315

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad . go_to_quad pop_operand
    (84) go_to_quad -> .

    FOR             reduce using rule 84 (go_to_quad -> .)
    FUNC            reduce using rule 84 (go_to_quad -> .)
    PRINT           reduce using rule 84 (go_to_quad -> .)
    IF              reduce using rule 84 (go_to_quad -> .)
    WHILE           reduce using rule 84 (go_to_quad -> .)
    ID              reduce using rule 84 (go_to_quad -> .)
    TRUE            reduce using rule 84 (go_to_quad -> .)
    FALSE           reduce using rule 84 (go_to_quad -> .)
    (               reduce using rule 84 (go_to_quad -> .)
    *               reduce using rule 84 (go_to_quad -> .)
    /               reduce using rule 84 (go_to_quad -> .)
    I_CONST         reduce using rule 84 (go_to_quad -> .)
    F_CONST         reduce using rule 84 (go_to_quad -> .)
    C_CONST         reduce using rule 84 (go_to_quad -> .)
    }               reduce using rule 84 (go_to_quad -> .)
    RETURN          reduce using rule 84 (go_to_quad -> .)

    go_to_quad                     shift and go to state 321

state 316

    (46) PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .

    )               reduce using rule 46 (PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .)


state 317

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; . return_quad } empty_local_variables_table
    (40) return_quad -> .

    }               reduce using rule 40 (return_quad -> .)

    return_quad                    shift and go to state 322

state 318

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { . BLOCK } end_for
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    }               reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    ASSIGNATION                    shift and go to state 113
    EXPRESSION                     shift and go to state 115
    BLOCK                          shift and go to state 323
    STATEMENT                      shift and go to state 111
    empty                          shift and go to state 112
    FUNC_CALL                      shift and go to state 114
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 319

    (89) ELSE_STMT -> ELSE { . go_to_true_quad BLOCK } fill_go_to_true_quad
    (82) go_to_true_quad -> .

    FOR             reduce using rule 82 (go_to_true_quad -> .)
    FUNC            reduce using rule 82 (go_to_true_quad -> .)
    PRINT           reduce using rule 82 (go_to_true_quad -> .)
    IF              reduce using rule 82 (go_to_true_quad -> .)
    WHILE           reduce using rule 82 (go_to_true_quad -> .)
    ID              reduce using rule 82 (go_to_true_quad -> .)
    TRUE            reduce using rule 82 (go_to_true_quad -> .)
    FALSE           reduce using rule 82 (go_to_true_quad -> .)
    (               reduce using rule 82 (go_to_true_quad -> .)
    *               reduce using rule 82 (go_to_true_quad -> .)
    /               reduce using rule 82 (go_to_true_quad -> .)
    I_CONST         reduce using rule 82 (go_to_true_quad -> .)
    F_CONST         reduce using rule 82 (go_to_true_quad -> .)
    C_CONST         reduce using rule 82 (go_to_true_quad -> .)
    }               reduce using rule 82 (go_to_true_quad -> .)

    go_to_true_quad                shift and go to state 324

state 320

    (90) ELSE_STMT -> empty pop_operand .

    FOR             reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    FUNC            reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    PRINT           reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    IF              reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    WHILE           reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    ID              reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    TRUE            reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    FALSE           reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    (               reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    *               reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    /               reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    I_CONST         reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    F_CONST         reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    C_CONST         reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    }               reduce using rule 90 (ELSE_STMT -> empty pop_operand .)
    RETURN          reduce using rule 90 (ELSE_STMT -> empty pop_operand .)


state 321

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad . pop_operand
    (85) pop_operand -> .

    FOR             reduce using rule 85 (pop_operand -> .)
    FUNC            reduce using rule 85 (pop_operand -> .)
    PRINT           reduce using rule 85 (pop_operand -> .)
    IF              reduce using rule 85 (pop_operand -> .)
    WHILE           reduce using rule 85 (pop_operand -> .)
    ID              reduce using rule 85 (pop_operand -> .)
    TRUE            reduce using rule 85 (pop_operand -> .)
    FALSE           reduce using rule 85 (pop_operand -> .)
    (               reduce using rule 85 (pop_operand -> .)
    *               reduce using rule 85 (pop_operand -> .)
    /               reduce using rule 85 (pop_operand -> .)
    I_CONST         reduce using rule 85 (pop_operand -> .)
    F_CONST         reduce using rule 85 (pop_operand -> .)
    C_CONST         reduce using rule 85 (pop_operand -> .)
    }               reduce using rule 85 (pop_operand -> .)
    RETURN          reduce using rule 85 (pop_operand -> .)

    pop_operand                    shift and go to state 325

state 322

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad . } empty_local_variables_table

    }               shift and go to state 326


state 323

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK . } end_for

    }               shift and go to state 327


state 324

    (89) ELSE_STMT -> ELSE { go_to_true_quad . BLOCK } fill_go_to_true_quad
    (48) BLOCK -> . STATEMENT BLOCK
    (49) BLOCK -> . empty
    (50) STATEMENT -> . ASSIGNATION
    (51) STATEMENT -> . FUNC_CALL
    (52) STATEMENT -> . EXPRESSION ;
    (53) STATEMENT -> . WRITE ;
    (54) STATEMENT -> . CONDITION
    (55) STATEMENT -> . WHILE_STMT
    (56) STATEMENT -> . FOR_STMT
    (57) STATEMENT -> . DESCRIBE_STMT
    (133) empty -> .
    (63) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (64) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (65) ASSIGNATION -> . VARIABLE = add_operator FUNC_CALL functions_assignation add_assignation_quad
    (69) FUNC_CALL -> . FUNC ID era_quad ( EXPRESSION param_quad FUNC_CALL_PRIME ) go_sub_quad
    (100) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (74) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (75) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (88) CONDITION -> . IF ( EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad_if ELSE_STMT
    (91) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand
    (97) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (98) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (31) VARIABLE -> . ID get_variable
    (32) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (33) VARIABLE -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix
    (103) AND_EXP -> . B_EXP AND_EXP_PRIME
    (106) B_EXP -> . TRUE
    (107) B_EXP -> . FALSE
    (108) B_EXP -> . EXP B_EXP_PRIME
    (114) EXP -> . TERM EXP_PRIME
    (118) TERM -> . FACTOR TERM_PRIME
    (122) FACTOR -> . ( EXPRESSION )
    (123) FACTOR -> . * VAR_CT
    (124) FACTOR -> . / VAR_CT
    (125) FACTOR -> . VAR_CT
    (126) VAR_CT -> . ID add_operand
    (127) VAR_CT -> . I_CONST add_operand
    (128) VAR_CT -> . F_CONST add_operand
    (129) VAR_CT -> . C_CONST add_operand
    (130) VAR_CT -> . FUNC_CALL
    (131) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_array
    (132) VAR_CT -> . ID add_id [ EXPRESSION ] ver_quad_dimension_one_matrix [ EXPRESSION ] ver_quad_dimension_two_matrix

    }               reduce using rule 133 (empty -> .)
    FOR             shift and go to state 122
    FUNC            shift and go to state 72
    PRINT           shift and go to state 123
    IF              shift and go to state 124
    WHILE           shift and go to state 125
    ID              shift and go to state 109
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    (               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 67
    I_CONST         shift and go to state 68
    F_CONST         shift and go to state 69
    C_CONST         shift and go to state 70

    BLOCK                          shift and go to state 328
    STATEMENT                      shift and go to state 111
    empty                          shift and go to state 112
    ASSIGNATION                    shift and go to state 113
    FUNC_CALL                      shift and go to state 114
    EXPRESSION                     shift and go to state 115
    WRITE                          shift and go to state 116
    CONDITION                      shift and go to state 117
    WHILE_STMT                     shift and go to state 118
    FOR_STMT                       shift and go to state 119
    DESCRIBE_STMT                  shift and go to state 120
    VARIABLE                       shift and go to state 121
    AND_EXP                        shift and go to state 57
    B_EXP                          shift and go to state 58
    EXP                            shift and go to state 61
    TERM                           shift and go to state 62
    FACTOR                         shift and go to state 63
    VAR_CT                         shift and go to state 66

state 325

    (91) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .

    FOR             reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    FUNC            reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    PRINT           reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    IF              reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    WHILE           reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    ID              reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    TRUE            reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    FALSE           reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    (               reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    *               reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    /               reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    I_CONST         reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    F_CONST         reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    C_CONST         reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    }               reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)
    RETURN          reduce using rule 91 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad pop_operand .)


state 326

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } . empty_local_variables_table
    (4) empty_local_variables_table -> .

    FUNC            reduce using rule 4 (empty_local_variables_table -> .)
    VOID            reduce using rule 4 (empty_local_variables_table -> .)

    empty_local_variables_table    shift and go to state 329

state 327

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } . end_for
    (96) end_for -> .

    FOR             reduce using rule 96 (end_for -> .)
    FUNC            reduce using rule 96 (end_for -> .)
    PRINT           reduce using rule 96 (end_for -> .)
    IF              reduce using rule 96 (end_for -> .)
    WHILE           reduce using rule 96 (end_for -> .)
    ID              reduce using rule 96 (end_for -> .)
    TRUE            reduce using rule 96 (end_for -> .)
    FALSE           reduce using rule 96 (end_for -> .)
    (               reduce using rule 96 (end_for -> .)
    *               reduce using rule 96 (end_for -> .)
    /               reduce using rule 96 (end_for -> .)
    I_CONST         reduce using rule 96 (end_for -> .)
    F_CONST         reduce using rule 96 (end_for -> .)
    C_CONST         reduce using rule 96 (end_for -> .)
    }               reduce using rule 96 (end_for -> .)
    RETURN          reduce using rule 96 (end_for -> .)

    end_for                        shift and go to state 330

state 328

    (89) ELSE_STMT -> ELSE { go_to_true_quad BLOCK . } fill_go_to_true_quad

    }               shift and go to state 331


state 329

    (41) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table .

    FUNC            reduce using rule 41 (FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table .)
    VOID            reduce using rule 41 (FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) save_function_as_variable { VARS_PRIME BLOCK RETURN EXPRESSION ; return_quad } empty_local_variables_table .)


state 330

    (97) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .

    FOR             reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    FUNC            reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    PRINT           reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    IF              reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    WHILE           reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    ID              reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    TRUE            reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    FALSE           reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    (               reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    *               reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    /               reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    I_CONST         reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    F_CONST         reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    C_CONST         reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    }               reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    RETURN          reduce using rule 97 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)


state 331

    (89) ELSE_STMT -> ELSE { go_to_true_quad BLOCK } . fill_go_to_true_quad
    (83) fill_go_to_true_quad -> .

    FOR             reduce using rule 83 (fill_go_to_true_quad -> .)
    FUNC            reduce using rule 83 (fill_go_to_true_quad -> .)
    PRINT           reduce using rule 83 (fill_go_to_true_quad -> .)
    IF              reduce using rule 83 (fill_go_to_true_quad -> .)
    WHILE           reduce using rule 83 (fill_go_to_true_quad -> .)
    ID              reduce using rule 83 (fill_go_to_true_quad -> .)
    TRUE            reduce using rule 83 (fill_go_to_true_quad -> .)
    FALSE           reduce using rule 83 (fill_go_to_true_quad -> .)
    (               reduce using rule 83 (fill_go_to_true_quad -> .)
    *               reduce using rule 83 (fill_go_to_true_quad -> .)
    /               reduce using rule 83 (fill_go_to_true_quad -> .)
    I_CONST         reduce using rule 83 (fill_go_to_true_quad -> .)
    F_CONST         reduce using rule 83 (fill_go_to_true_quad -> .)
    C_CONST         reduce using rule 83 (fill_go_to_true_quad -> .)
    }               reduce using rule 83 (fill_go_to_true_quad -> .)
    RETURN          reduce using rule 83 (fill_go_to_true_quad -> .)

    fill_go_to_true_quad           shift and go to state 332

state 332

    (89) ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .

    FOR             reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    FUNC            reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    PRINT           reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    IF              reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    WHILE           reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    ID              reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    TRUE            reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    FALSE           reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    (               reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    *               reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    /               reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    I_CONST         reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    F_CONST         reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    C_CONST         reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    }               reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    RETURN          reduce using rule 89 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for * in state 63 resolved as shift
WARNING: shift/reduce conflict for / in state 63 resolved as shift
WARNING: shift/reduce conflict for * in state 198 resolved as shift
WARNING: shift/reduce conflict for / in state 198 resolved as shift
WARNING: shift/reduce conflict for * in state 199 resolved as shift
WARNING: shift/reduce conflict for / in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 114 resolved using rule (STATEMENT -> FUNC_CALL)
WARNING: rejected rule (VAR_CT -> FUNC_CALL) in state 114
WARNING: reduce/reduce conflict in state 205 resolved using rule (functions_assignation -> <empty>)
WARNING: rejected rule (VAR_CT -> FUNC_CALL) in state 205
