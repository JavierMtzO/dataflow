Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
Rule 2     go_to_main -> <empty>
Rule 3     empty_global_variables_table -> <empty>
Rule 4     empty_local_variables_table -> <empty>
Rule 5     fill_go_to_main_quad -> <empty>
Rule 6     add_id -> <empty>
Rule 7     save_ids -> <empty>
Rule 8     save_parameter -> <empty>
Rule 9     save_function -> <empty>
Rule 10    VARS_PRIME -> VARS VARS_PRIME
Rule 11    VARS_PRIME -> empty
Rule 12    FUNCTION_PRIME -> FUNCTION FUNC_PRIME
Rule 13    FUNCTION_PRIME -> empty
Rule 14    FUNC_PRIME -> FUNCTION FUNC_PRIME
Rule 15    FUNC_PRIME -> empty
Rule 16    add_type -> <empty>
Rule 17    add_current_type -> <empty>
Rule 18    VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
Rule 19    VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
Rule 20    VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
Rule 21    VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
Rule 22    TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME
Rule 23    TIPO_PRIME -> empty
Rule 24    get_variable -> <empty>
Rule 25    VARIABLE -> ID get_variable
Rule 26    VARIABLE -> ID [ EXPRESSION ]
Rule 27    TIPO_SIMPLE -> INT add_type
Rule 28    TIPO_SIMPLE -> FLOAT add_type
Rule 29    TIPO_SIMPLE -> CHAR add_type
Rule 30    TIPO_COMP -> DATAFRAME
Rule 31    add_function_type -> <empty>
Rule 32    save_function_as_global_variable -> <empty>
Rule 33    FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
Rule 34    FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
Rule 35    add_parameters -> <empty>
Rule 36    PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
Rule 37    PARAM -> empty
Rule 38    PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
Rule 39    PARAM_PRIME -> empty
Rule 40    BLOCK -> STATEMENT BLOCK
Rule 41    BLOCK -> empty
Rule 42    STATEMENT -> ASSIGNATION
Rule 43    STATEMENT -> FUNC_CALL
Rule 44    STATEMENT -> EXPRESSION ;
Rule 45    STATEMENT -> WRITE ;
Rule 46    STATEMENT -> CONDITION
Rule 47    STATEMENT -> WHILE_STMT
Rule 48    STATEMENT -> FOR_STMT
Rule 49    STATEMENT -> DESCRIBE_STMT
Rule 50    add_operator -> <empty>
Rule 51    add_operand -> <empty>
Rule 52    add_assignation_quad -> <empty>
Rule 53    add_assignation_for_quad -> <empty>
Rule 54    ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad
Rule 55    ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
Rule 56    FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME )
Rule 57    FUNC_CALL_PRIME -> , EXPRESSION FUNC_CALL_PRIME
Rule 58    FUNC_CALL_PRIME -> empty
Rule 59    print_quad -> <empty>
Rule 60    add_print_operator -> <empty>
Rule 61    WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
Rule 62    WRITE -> PRINT add_operator ( TITLE WRITE_PRIME )
Rule 63    WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME
Rule 64    WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME
Rule 65    WRITE_PRIME -> empty
Rule 66    go_to_false_quad -> <empty>
Rule 67    fill_go_to_false_quad -> <empty>
Rule 68    go_to_true_quad -> <empty>
Rule 69    fill_go_to_true_quad -> <empty>
Rule 70    go_to_quad -> <empty>
Rule 71    pop_operand -> <empty>
Rule 72    pop_type -> <empty>
Rule 73    append_jump -> <empty>
Rule 74    CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
Rule 75    ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad
Rule 76    ELSE_STMT -> empty
Rule 77    WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
Rule 78    check_exact_type_for -> <empty>
Rule 79    add_final_counter_for -> <empty>
Rule 80    generate_for_quad -> <empty>
Rule 81    check_boolean_expression_for -> <empty>
Rule 82    end_for -> <empty>
Rule 83    FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
Rule 84    DESCRIBE_STMT -> ID . DESCRIBE ( )
Rule 85    aritmetics_operation -> <empty>
Rule 86    EXPRESSION -> AND_EXP EXPRESSION_PRIME
Rule 87    EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME
Rule 88    EXPRESSION_PRIME -> empty
Rule 89    AND_EXP -> B_EXP AND_EXP_PRIME
Rule 90    AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME
Rule 91    AND_EXP_PRIME -> empty
Rule 92    B_EXP -> TRUE
Rule 93    B_EXP -> FALSE
Rule 94    B_EXP -> EXP B_EXP_PRIME
Rule 95    B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation
Rule 96    B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation
Rule 97    B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation
Rule 98    B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation
Rule 99    B_EXP_PRIME -> empty
Rule 100   EXP -> TERM EXP_PRIME
Rule 101   EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation
Rule 102   EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation
Rule 103   EXP_PRIME -> empty
Rule 104   TERM -> FACTOR TERM_PRIME
Rule 105   TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME
Rule 106   TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME
Rule 107   TERM_PRIME -> empty
Rule 108   FACTOR -> ( EXPRESSION )
Rule 109   FACTOR -> * VAR_CT
Rule 110   FACTOR -> / VAR_CT
Rule 111   FACTOR -> VAR_CT
Rule 112   VAR_CT -> ID add_operand
Rule 113   VAR_CT -> I_CONST add_operand
Rule 114   VAR_CT -> F_CONST add_operand
Rule 115   VAR_CT -> C_CONST add_operand
Rule 116   empty -> <empty>

Terminals, with rules where they appear

(                    : 33 34 56 61 62 74 77 83 84 108
)                    : 33 34 56 61 62 74 77 83 84 108
*                    : 105 109
+                    : 101
,                    : 22 38 57 63 64
-                    : 102
.                    : 84
/                    : 106 110
;                    : 1 18 19 20 21 33 44 45 54
<                    : 96
=                    : 54 55
>                    : 95
AND                  : 90
CHAR                 : 29
C_CONST              : 115
DATAFRAME            : 30
DESCRIBE             : 84
DIFFERENT            : 97
DO                   : 83
ELSE                 : 75
EQUAL                : 98
FALSE                : 93
FLOAT                : 28
FOR                  : 55
FUNC                 : 33 34
F_CONST              : 114
ID                   : 1 18 19 20 21 22 25 26 33 34 36 38 56 84 112
IF                   : 74
INT                  : 27
I_CONST              : 113
MAIN                 : 1
OR                   : 87
PRINT                : 61 62
PROG                 : 1
RETURN               : 33
TITLE                : 62 64
TO                   : 83
TRUE                 : 92
VAR                  : 18 19 20 21
VOID                 : 1 34
WHILE                : 77
[                    : 20 21 21 26
]                    : 20 21 21 26
error                : 
{                    : 1 33 34 74 75 77 83
}                    : 1 33 34 74 75 77 83

Nonterminals, with rules where they appear

AND_EXP              : 86 87
AND_EXP_PRIME        : 89 90
ASSIGNATION          : 42 83
BLOCK                : 1 33 34 40 74 75 77 83
B_EXP                : 89 90 95 96 97 98
B_EXP_PRIME          : 94
CONDITION            : 46
DESCRIBE_STMT        : 49
ELSE_STMT            : 74
EXP                  : 94
EXPRESSION           : 20 21 21 26 33 44 54 55 56 57 61 63 74 77 83 108
EXPRESSION_PRIME     : 86 87
EXP_PRIME            : 100 101 102
FACTOR               : 104 105 106
FOR_STMT             : 48
FUNCTION             : 12 14
FUNCTION_PRIME       : 1
FUNC_CALL            : 43
FUNC_CALL_PRIME      : 56 57
FUNC_PRIME           : 12 14
PARAM                : 33 34
PARAM_PRIME          : 36 38
PROGRAM              : 0
STATEMENT            : 40
TERM                 : 100 101 102
TERM_PRIME           : 104 105 106
TIPO_COMP            : 18
TIPO_PRIME           : 18 19 22
TIPO_SIMPLE          : 19 20 21 33 36 38
VARIABLE             : 54 55
VARS                 : 10
VARS_PRIME           : 1 1 10 33 34
VAR_CT               : 109 110 111
WHILE_STMT           : 47
WRITE                : 45
WRITE_PRIME          : 61 62 63 64
add_assignation_for_quad : 55
add_assignation_quad : 54
add_current_type     : 22
add_final_counter_for : 83
add_function_type    : 33
add_id               : 1 18 19 22 33 34 36 38
add_operand          : 112 113 114 115
add_operator         : 54 55 61 62 95 96 97 98 101 102 105 106
add_parameters       : 33 34
add_print_operator   : 63 64
add_type             : 1 27 28 29 34
append_jump          : 77
aritmetics_operation : 95 96 97 98 101 102 105 106
check_boolean_expression_for : 83
check_exact_type_for : 83 83
empty                : 11 13 15 23 37 39 41 58 65 76 88 91 99 103 107
empty_global_variables_table : 1
empty_local_variables_table : 33 34
end_for              : 83
fill_go_to_false_quad : 74 77
fill_go_to_main_quad : 1
fill_go_to_true_quad : 75
generate_for_quad    : 83
get_variable         : 25
go_to_false_quad     : 74 77
go_to_main           : 1
go_to_quad           : 77
go_to_true_quad      : 75
pop_operand          : 74 77
pop_type             : 74 77
print_quad           : 61 63 64
save_function        : 1 33 34
save_function_as_global_variable : 33
save_ids             : 18 19
save_parameter       : 36 38

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    PROG            shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROG . add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 3

state 3

    (1) PROGRAM -> PROG add_type . ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    ID              shift and go to state 4


state 4

    (1) PROGRAM -> PROG add_type ID . add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (6) add_id -> .

    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 5

state 5

    (1) PROGRAM -> PROG add_type ID add_id . ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    ;               shift and go to state 6


state 6

    (1) PROGRAM -> PROG add_type ID add_id ; . go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (2) go_to_main -> .

    VAR             reduce using rule 2 (go_to_main -> .)
    FUNC            reduce using rule 2 (go_to_main -> .)
    VOID            reduce using rule 2 (go_to_main -> .)

    go_to_main                     shift and go to state 7

state 7

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main . save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (9) save_function -> .

    VAR             reduce using rule 9 (save_function -> .)
    FUNC            reduce using rule 9 (save_function -> .)
    VOID            reduce using rule 9 (save_function -> .)

    save_function                  shift and go to state 8

state 8

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function . VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (18) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (19) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (20) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (21) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (116) empty -> .

    VAR             shift and go to state 12
    FUNC            reduce using rule 116 (empty -> .)
    VOID            reduce using rule 116 (empty -> .)

    VARS_PRIME                     shift and go to state 9
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 9

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME . FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (12) FUNCTION_PRIME -> . FUNCTION FUNC_PRIME
    (13) FUNCTION_PRIME -> . empty
    (33) FUNCTION -> . FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (34) FUNCTION -> . FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (116) empty -> .

    FUNC            shift and go to state 16
    VOID            reduce using rule 116 (empty -> .)

    FUNCTION_PRIME                 shift and go to state 13
    FUNCTION                       shift and go to state 14
    empty                          shift and go to state 15

state 10

    (10) VARS_PRIME -> VARS . VARS_PRIME
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (18) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (19) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (20) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (21) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (116) empty -> .

    VAR             shift and go to state 12
    FUNC            reduce using rule 116 (empty -> .)
    VOID            reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    VARS                           shift and go to state 10
    VARS_PRIME                     shift and go to state 17
    empty                          shift and go to state 11

state 11

    (11) VARS_PRIME -> empty .

    FUNC            reduce using rule 11 (VARS_PRIME -> empty .)
    VOID            reduce using rule 11 (VARS_PRIME -> empty .)
    FOR             reduce using rule 11 (VARS_PRIME -> empty .)
    ID              reduce using rule 11 (VARS_PRIME -> empty .)
    PRINT           reduce using rule 11 (VARS_PRIME -> empty .)
    IF              reduce using rule 11 (VARS_PRIME -> empty .)
    WHILE           reduce using rule 11 (VARS_PRIME -> empty .)
    TRUE            reduce using rule 11 (VARS_PRIME -> empty .)
    FALSE           reduce using rule 11 (VARS_PRIME -> empty .)
    (               reduce using rule 11 (VARS_PRIME -> empty .)
    *               reduce using rule 11 (VARS_PRIME -> empty .)
    /               reduce using rule 11 (VARS_PRIME -> empty .)
    I_CONST         reduce using rule 11 (VARS_PRIME -> empty .)
    F_CONST         reduce using rule 11 (VARS_PRIME -> empty .)
    C_CONST         reduce using rule 11 (VARS_PRIME -> empty .)
    }               reduce using rule 11 (VARS_PRIME -> empty .)
    RETURN          reduce using rule 11 (VARS_PRIME -> empty .)


state 12

    (18) VARS -> VAR . TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (19) VARS -> VAR . TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (20) VARS -> VAR . TIPO_SIMPLE ID [ EXPRESSION ] ;
    (21) VARS -> VAR . TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (30) TIPO_COMP -> . DATAFRAME
    (27) TIPO_SIMPLE -> . INT add_type
    (28) TIPO_SIMPLE -> . FLOAT add_type
    (29) TIPO_SIMPLE -> . CHAR add_type

    DATAFRAME       shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    TIPO_COMP                      shift and go to state 18
    TIPO_SIMPLE                    shift and go to state 19

state 13

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME . VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    VOID            shift and go to state 24


state 14

    (12) FUNCTION_PRIME -> FUNCTION . FUNC_PRIME
    (14) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (15) FUNC_PRIME -> . empty
    (33) FUNCTION -> . FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (34) FUNCTION -> . FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (116) empty -> .

    FUNC            shift and go to state 16
    VOID            reduce using rule 116 (empty -> .)

    FUNCTION                       shift and go to state 25
    FUNC_PRIME                     shift and go to state 26
    empty                          shift and go to state 27

state 15

    (13) FUNCTION_PRIME -> empty .

    VOID            reduce using rule 13 (FUNCTION_PRIME -> empty .)


state 16

    (33) FUNCTION -> FUNC . TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (34) FUNCTION -> FUNC . VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (27) TIPO_SIMPLE -> . INT add_type
    (28) TIPO_SIMPLE -> . FLOAT add_type
    (29) TIPO_SIMPLE -> . CHAR add_type

    VOID            shift and go to state 29
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    TIPO_SIMPLE                    shift and go to state 28

state 17

    (10) VARS_PRIME -> VARS VARS_PRIME .

    FUNC            reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    VOID            reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    FOR             reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    ID              reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    PRINT           reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    IF              reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    WHILE           reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    TRUE            reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    FALSE           reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    (               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    *               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    /               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    I_CONST         reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    F_CONST         reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    C_CONST         reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    }               reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)
    RETURN          reduce using rule 10 (VARS_PRIME -> VARS VARS_PRIME .)


state 18

    (18) VARS -> VAR TIPO_COMP . ID add_id TIPO_PRIME ; save_ids

    ID              shift and go to state 30


state 19

    (19) VARS -> VAR TIPO_SIMPLE . ID add_id TIPO_PRIME ; save_ids
    (20) VARS -> VAR TIPO_SIMPLE . ID [ EXPRESSION ] ;
    (21) VARS -> VAR TIPO_SIMPLE . ID [ EXPRESSION ] [ EXPRESSION ] ;

    ID              shift and go to state 31


state 20

    (30) TIPO_COMP -> DATAFRAME .

    ID              reduce using rule 30 (TIPO_COMP -> DATAFRAME .)


state 21

    (27) TIPO_SIMPLE -> INT . add_type
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 32

state 22

    (28) TIPO_SIMPLE -> FLOAT . add_type
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 33

state 23

    (29) TIPO_SIMPLE -> CHAR . add_type
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 34

state 24

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID . MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    MAIN            shift and go to state 35


state 25

    (14) FUNC_PRIME -> FUNCTION . FUNC_PRIME
    (14) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (15) FUNC_PRIME -> . empty
    (33) FUNCTION -> . FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (34) FUNCTION -> . FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (116) empty -> .

    FUNC            shift and go to state 16
    VOID            reduce using rule 116 (empty -> .)

    FUNCTION                       shift and go to state 25
    FUNC_PRIME                     shift and go to state 36
    empty                          shift and go to state 27

state 26

    (12) FUNCTION_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 12 (FUNCTION_PRIME -> FUNCTION FUNC_PRIME .)


state 27

    (15) FUNC_PRIME -> empty .

    VOID            reduce using rule 15 (FUNC_PRIME -> empty .)


state 28

    (33) FUNCTION -> FUNC TIPO_SIMPLE . add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (31) add_function_type -> .

    ID              reduce using rule 31 (add_function_type -> .)

    add_function_type              shift and go to state 37

state 29

    (34) FUNCTION -> FUNC VOID . add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (16) add_type -> .

    ID              reduce using rule 16 (add_type -> .)

    add_type                       shift and go to state 38

state 30

    (18) VARS -> VAR TIPO_COMP ID . add_id TIPO_PRIME ; save_ids
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 39

state 31

    (19) VARS -> VAR TIPO_SIMPLE ID . add_id TIPO_PRIME ; save_ids
    (20) VARS -> VAR TIPO_SIMPLE ID . [ EXPRESSION ] ;
    (21) VARS -> VAR TIPO_SIMPLE ID . [ EXPRESSION ] [ EXPRESSION ] ;
    (6) add_id -> .

    [               shift and go to state 41
    ,               reduce using rule 6 (add_id -> .)
    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 40

state 32

    (27) TIPO_SIMPLE -> INT add_type .

    ID              reduce using rule 27 (TIPO_SIMPLE -> INT add_type .)


state 33

    (28) TIPO_SIMPLE -> FLOAT add_type .

    ID              reduce using rule 28 (TIPO_SIMPLE -> FLOAT add_type .)


state 34

    (29) TIPO_SIMPLE -> CHAR add_type .

    ID              reduce using rule 29 (TIPO_SIMPLE -> CHAR add_type .)


state 35

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN . { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table

    {               shift and go to state 42


state 36

    (14) FUNC_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 14 (FUNC_PRIME -> FUNCTION FUNC_PRIME .)


state 37

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type . ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table

    ID              shift and go to state 43


state 38

    (34) FUNCTION -> FUNC VOID add_type . ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table

    ID              shift and go to state 44


state 39

    (18) VARS -> VAR TIPO_COMP ID add_id . TIPO_PRIME ; save_ids
    (22) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (23) TIPO_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 46
    ;               reduce using rule 116 (empty -> .)

    TIPO_PRIME                     shift and go to state 45
    empty                          shift and go to state 47

state 40

    (19) VARS -> VAR TIPO_SIMPLE ID add_id . TIPO_PRIME ; save_ids
    (22) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (23) TIPO_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 46
    ;               reduce using rule 116 (empty -> .)

    TIPO_PRIME                     shift and go to state 48
    empty                          shift and go to state 47

state 41

    (20) VARS -> VAR TIPO_SIMPLE ID [ . EXPRESSION ] ;
    (21) VARS -> VAR TIPO_SIMPLE ID [ . EXPRESSION ] [ EXPRESSION ] ;
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 50
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 42

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { . fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table
    (5) fill_go_to_main_quad -> .

    VAR             reduce using rule 5 (fill_go_to_main_quad -> .)
    FOR             reduce using rule 5 (fill_go_to_main_quad -> .)
    ID              reduce using rule 5 (fill_go_to_main_quad -> .)
    PRINT           reduce using rule 5 (fill_go_to_main_quad -> .)
    IF              reduce using rule 5 (fill_go_to_main_quad -> .)
    WHILE           reduce using rule 5 (fill_go_to_main_quad -> .)
    TRUE            reduce using rule 5 (fill_go_to_main_quad -> .)
    FALSE           reduce using rule 5 (fill_go_to_main_quad -> .)
    (               reduce using rule 5 (fill_go_to_main_quad -> .)
    *               reduce using rule 5 (fill_go_to_main_quad -> .)
    /               reduce using rule 5 (fill_go_to_main_quad -> .)
    I_CONST         reduce using rule 5 (fill_go_to_main_quad -> .)
    F_CONST         reduce using rule 5 (fill_go_to_main_quad -> .)
    C_CONST         reduce using rule 5 (fill_go_to_main_quad -> .)
    }               reduce using rule 5 (fill_go_to_main_quad -> .)

    fill_go_to_main_quad           shift and go to state 65

state 43

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID . add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (6) add_id -> .

    (               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 66

state 44

    (34) FUNCTION -> FUNC VOID add_type ID . add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (6) add_id -> .

    (               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 67

state 45

    (18) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME . ; save_ids

    ;               shift and go to state 68


state 46

    (22) TIPO_PRIME -> , . ID add_id add_current_type TIPO_PRIME

    ID              shift and go to state 69


state 47

    (23) TIPO_PRIME -> empty .

    ;               reduce using rule 23 (TIPO_PRIME -> empty .)


state 48

    (19) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME . ; save_ids

    ;               shift and go to state 70


state 49

    (112) VAR_CT -> ID . add_operand
    (51) add_operand -> .

    *               reduce using rule 51 (add_operand -> .)
    /               reduce using rule 51 (add_operand -> .)
    +               reduce using rule 51 (add_operand -> .)
    -               reduce using rule 51 (add_operand -> .)
    >               reduce using rule 51 (add_operand -> .)
    <               reduce using rule 51 (add_operand -> .)
    DIFFERENT       reduce using rule 51 (add_operand -> .)
    EQUAL           reduce using rule 51 (add_operand -> .)
    AND             reduce using rule 51 (add_operand -> .)
    OR              reduce using rule 51 (add_operand -> .)
    ]               reduce using rule 51 (add_operand -> .)
    )               reduce using rule 51 (add_operand -> .)
    ;               reduce using rule 51 (add_operand -> .)
    ,               reduce using rule 51 (add_operand -> .)
    TO              reduce using rule 51 (add_operand -> .)
    FOR             reduce using rule 51 (add_operand -> .)
    ID              reduce using rule 51 (add_operand -> .)
    PRINT           reduce using rule 51 (add_operand -> .)
    IF              reduce using rule 51 (add_operand -> .)
    WHILE           reduce using rule 51 (add_operand -> .)
    TRUE            reduce using rule 51 (add_operand -> .)
    FALSE           reduce using rule 51 (add_operand -> .)
    (               reduce using rule 51 (add_operand -> .)
    I_CONST         reduce using rule 51 (add_operand -> .)
    F_CONST         reduce using rule 51 (add_operand -> .)
    C_CONST         reduce using rule 51 (add_operand -> .)
    }               reduce using rule 51 (add_operand -> .)
    RETURN          reduce using rule 51 (add_operand -> .)

    add_operand                    shift and go to state 71

state 50

    (20) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION . ] ;
    (21) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION . ] [ EXPRESSION ] ;

    ]               shift and go to state 72


state 51

    (86) EXPRESSION -> AND_EXP . EXPRESSION_PRIME
    (87) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (88) EXPRESSION_PRIME -> . empty
    (116) empty -> .

    OR              shift and go to state 74
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    EXPRESSION_PRIME               shift and go to state 73
    empty                          shift and go to state 75

state 52

    (89) AND_EXP -> B_EXP . AND_EXP_PRIME
    (90) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (91) AND_EXP_PRIME -> . empty
    (116) empty -> .

    AND             shift and go to state 77
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    AND_EXP_PRIME                  shift and go to state 76
    empty                          shift and go to state 78

state 53

    (92) B_EXP -> TRUE .

    AND             reduce using rule 92 (B_EXP -> TRUE .)
    OR              reduce using rule 92 (B_EXP -> TRUE .)
    ]               reduce using rule 92 (B_EXP -> TRUE .)
    )               reduce using rule 92 (B_EXP -> TRUE .)
    ;               reduce using rule 92 (B_EXP -> TRUE .)
    ,               reduce using rule 92 (B_EXP -> TRUE .)
    TO              reduce using rule 92 (B_EXP -> TRUE .)
    FOR             reduce using rule 92 (B_EXP -> TRUE .)
    ID              reduce using rule 92 (B_EXP -> TRUE .)
    PRINT           reduce using rule 92 (B_EXP -> TRUE .)
    IF              reduce using rule 92 (B_EXP -> TRUE .)
    WHILE           reduce using rule 92 (B_EXP -> TRUE .)
    TRUE            reduce using rule 92 (B_EXP -> TRUE .)
    FALSE           reduce using rule 92 (B_EXP -> TRUE .)
    (               reduce using rule 92 (B_EXP -> TRUE .)
    *               reduce using rule 92 (B_EXP -> TRUE .)
    /               reduce using rule 92 (B_EXP -> TRUE .)
    I_CONST         reduce using rule 92 (B_EXP -> TRUE .)
    F_CONST         reduce using rule 92 (B_EXP -> TRUE .)
    C_CONST         reduce using rule 92 (B_EXP -> TRUE .)
    }               reduce using rule 92 (B_EXP -> TRUE .)
    RETURN          reduce using rule 92 (B_EXP -> TRUE .)


state 54

    (93) B_EXP -> FALSE .

    AND             reduce using rule 93 (B_EXP -> FALSE .)
    OR              reduce using rule 93 (B_EXP -> FALSE .)
    ]               reduce using rule 93 (B_EXP -> FALSE .)
    )               reduce using rule 93 (B_EXP -> FALSE .)
    ;               reduce using rule 93 (B_EXP -> FALSE .)
    ,               reduce using rule 93 (B_EXP -> FALSE .)
    TO              reduce using rule 93 (B_EXP -> FALSE .)
    FOR             reduce using rule 93 (B_EXP -> FALSE .)
    ID              reduce using rule 93 (B_EXP -> FALSE .)
    PRINT           reduce using rule 93 (B_EXP -> FALSE .)
    IF              reduce using rule 93 (B_EXP -> FALSE .)
    WHILE           reduce using rule 93 (B_EXP -> FALSE .)
    TRUE            reduce using rule 93 (B_EXP -> FALSE .)
    FALSE           reduce using rule 93 (B_EXP -> FALSE .)
    (               reduce using rule 93 (B_EXP -> FALSE .)
    *               reduce using rule 93 (B_EXP -> FALSE .)
    /               reduce using rule 93 (B_EXP -> FALSE .)
    I_CONST         reduce using rule 93 (B_EXP -> FALSE .)
    F_CONST         reduce using rule 93 (B_EXP -> FALSE .)
    C_CONST         reduce using rule 93 (B_EXP -> FALSE .)
    }               reduce using rule 93 (B_EXP -> FALSE .)
    RETURN          reduce using rule 93 (B_EXP -> FALSE .)


state 55

    (94) B_EXP -> EXP . B_EXP_PRIME
    (95) B_EXP_PRIME -> . > add_operator B_EXP aritmetics_operation
    (96) B_EXP_PRIME -> . < add_operator B_EXP aritmetics_operation
    (97) B_EXP_PRIME -> . DIFFERENT add_operator B_EXP aritmetics_operation
    (98) B_EXP_PRIME -> . EQUAL add_operator B_EXP aritmetics_operation
    (99) B_EXP_PRIME -> . empty
    (116) empty -> .

    >               shift and go to state 80
    <               shift and go to state 81
    DIFFERENT       shift and go to state 82
    EQUAL           shift and go to state 83
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    B_EXP_PRIME                    shift and go to state 79
    empty                          shift and go to state 84

state 56

    (100) EXP -> TERM . EXP_PRIME
    (101) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (102) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (103) EXP_PRIME -> . empty
    (116) empty -> .

    +               shift and go to state 86
    -               shift and go to state 87
    >               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    DIFFERENT       reduce using rule 116 (empty -> .)
    EQUAL           reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    EXP_PRIME                      shift and go to state 85
    empty                          shift and go to state 88

state 57

    (104) TERM -> FACTOR . TERM_PRIME
    (105) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (106) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (107) TERM_PRIME -> . empty
    (116) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 90
    /               shift and go to state 91
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    DIFFERENT       reduce using rule 116 (empty -> .)
    EQUAL           reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

  ! *               [ reduce using rule 116 (empty -> .) ]
  ! /               [ reduce using rule 116 (empty -> .) ]

    TERM_PRIME                     shift and go to state 89
    empty                          shift and go to state 92

state 58

    (108) FACTOR -> ( . EXPRESSION )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 93
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 59

    (109) FACTOR -> * . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    VAR_CT                         shift and go to state 94

state 60

    (111) FACTOR -> VAR_CT .

    *               reduce using rule 111 (FACTOR -> VAR_CT .)
    /               reduce using rule 111 (FACTOR -> VAR_CT .)
    +               reduce using rule 111 (FACTOR -> VAR_CT .)
    -               reduce using rule 111 (FACTOR -> VAR_CT .)
    >               reduce using rule 111 (FACTOR -> VAR_CT .)
    <               reduce using rule 111 (FACTOR -> VAR_CT .)
    DIFFERENT       reduce using rule 111 (FACTOR -> VAR_CT .)
    EQUAL           reduce using rule 111 (FACTOR -> VAR_CT .)
    AND             reduce using rule 111 (FACTOR -> VAR_CT .)
    OR              reduce using rule 111 (FACTOR -> VAR_CT .)
    ]               reduce using rule 111 (FACTOR -> VAR_CT .)
    )               reduce using rule 111 (FACTOR -> VAR_CT .)
    ;               reduce using rule 111 (FACTOR -> VAR_CT .)
    ,               reduce using rule 111 (FACTOR -> VAR_CT .)
    TO              reduce using rule 111 (FACTOR -> VAR_CT .)
    FOR             reduce using rule 111 (FACTOR -> VAR_CT .)
    ID              reduce using rule 111 (FACTOR -> VAR_CT .)
    PRINT           reduce using rule 111 (FACTOR -> VAR_CT .)
    IF              reduce using rule 111 (FACTOR -> VAR_CT .)
    WHILE           reduce using rule 111 (FACTOR -> VAR_CT .)
    TRUE            reduce using rule 111 (FACTOR -> VAR_CT .)
    FALSE           reduce using rule 111 (FACTOR -> VAR_CT .)
    (               reduce using rule 111 (FACTOR -> VAR_CT .)
    I_CONST         reduce using rule 111 (FACTOR -> VAR_CT .)
    F_CONST         reduce using rule 111 (FACTOR -> VAR_CT .)
    C_CONST         reduce using rule 111 (FACTOR -> VAR_CT .)
    }               reduce using rule 111 (FACTOR -> VAR_CT .)
    RETURN          reduce using rule 111 (FACTOR -> VAR_CT .)


state 61

    (110) FACTOR -> / . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    VAR_CT                         shift and go to state 95

state 62

    (113) VAR_CT -> I_CONST . add_operand
    (51) add_operand -> .

    *               reduce using rule 51 (add_operand -> .)
    /               reduce using rule 51 (add_operand -> .)
    +               reduce using rule 51 (add_operand -> .)
    -               reduce using rule 51 (add_operand -> .)
    >               reduce using rule 51 (add_operand -> .)
    <               reduce using rule 51 (add_operand -> .)
    DIFFERENT       reduce using rule 51 (add_operand -> .)
    EQUAL           reduce using rule 51 (add_operand -> .)
    AND             reduce using rule 51 (add_operand -> .)
    OR              reduce using rule 51 (add_operand -> .)
    ]               reduce using rule 51 (add_operand -> .)
    )               reduce using rule 51 (add_operand -> .)
    ;               reduce using rule 51 (add_operand -> .)
    ,               reduce using rule 51 (add_operand -> .)
    TO              reduce using rule 51 (add_operand -> .)
    FOR             reduce using rule 51 (add_operand -> .)
    ID              reduce using rule 51 (add_operand -> .)
    PRINT           reduce using rule 51 (add_operand -> .)
    IF              reduce using rule 51 (add_operand -> .)
    WHILE           reduce using rule 51 (add_operand -> .)
    TRUE            reduce using rule 51 (add_operand -> .)
    FALSE           reduce using rule 51 (add_operand -> .)
    (               reduce using rule 51 (add_operand -> .)
    I_CONST         reduce using rule 51 (add_operand -> .)
    F_CONST         reduce using rule 51 (add_operand -> .)
    C_CONST         reduce using rule 51 (add_operand -> .)
    }               reduce using rule 51 (add_operand -> .)
    RETURN          reduce using rule 51 (add_operand -> .)

    add_operand                    shift and go to state 96

state 63

    (114) VAR_CT -> F_CONST . add_operand
    (51) add_operand -> .

    *               reduce using rule 51 (add_operand -> .)
    /               reduce using rule 51 (add_operand -> .)
    +               reduce using rule 51 (add_operand -> .)
    -               reduce using rule 51 (add_operand -> .)
    >               reduce using rule 51 (add_operand -> .)
    <               reduce using rule 51 (add_operand -> .)
    DIFFERENT       reduce using rule 51 (add_operand -> .)
    EQUAL           reduce using rule 51 (add_operand -> .)
    AND             reduce using rule 51 (add_operand -> .)
    OR              reduce using rule 51 (add_operand -> .)
    ]               reduce using rule 51 (add_operand -> .)
    )               reduce using rule 51 (add_operand -> .)
    ;               reduce using rule 51 (add_operand -> .)
    ,               reduce using rule 51 (add_operand -> .)
    TO              reduce using rule 51 (add_operand -> .)
    FOR             reduce using rule 51 (add_operand -> .)
    ID              reduce using rule 51 (add_operand -> .)
    PRINT           reduce using rule 51 (add_operand -> .)
    IF              reduce using rule 51 (add_operand -> .)
    WHILE           reduce using rule 51 (add_operand -> .)
    TRUE            reduce using rule 51 (add_operand -> .)
    FALSE           reduce using rule 51 (add_operand -> .)
    (               reduce using rule 51 (add_operand -> .)
    I_CONST         reduce using rule 51 (add_operand -> .)
    F_CONST         reduce using rule 51 (add_operand -> .)
    C_CONST         reduce using rule 51 (add_operand -> .)
    }               reduce using rule 51 (add_operand -> .)
    RETURN          reduce using rule 51 (add_operand -> .)

    add_operand                    shift and go to state 97

state 64

    (115) VAR_CT -> C_CONST . add_operand
    (51) add_operand -> .

    *               reduce using rule 51 (add_operand -> .)
    /               reduce using rule 51 (add_operand -> .)
    +               reduce using rule 51 (add_operand -> .)
    -               reduce using rule 51 (add_operand -> .)
    >               reduce using rule 51 (add_operand -> .)
    <               reduce using rule 51 (add_operand -> .)
    DIFFERENT       reduce using rule 51 (add_operand -> .)
    EQUAL           reduce using rule 51 (add_operand -> .)
    AND             reduce using rule 51 (add_operand -> .)
    OR              reduce using rule 51 (add_operand -> .)
    ]               reduce using rule 51 (add_operand -> .)
    )               reduce using rule 51 (add_operand -> .)
    ;               reduce using rule 51 (add_operand -> .)
    ,               reduce using rule 51 (add_operand -> .)
    TO              reduce using rule 51 (add_operand -> .)
    FOR             reduce using rule 51 (add_operand -> .)
    ID              reduce using rule 51 (add_operand -> .)
    PRINT           reduce using rule 51 (add_operand -> .)
    IF              reduce using rule 51 (add_operand -> .)
    WHILE           reduce using rule 51 (add_operand -> .)
    TRUE            reduce using rule 51 (add_operand -> .)
    FALSE           reduce using rule 51 (add_operand -> .)
    (               reduce using rule 51 (add_operand -> .)
    I_CONST         reduce using rule 51 (add_operand -> .)
    F_CONST         reduce using rule 51 (add_operand -> .)
    C_CONST         reduce using rule 51 (add_operand -> .)
    }               reduce using rule 51 (add_operand -> .)
    RETURN          reduce using rule 51 (add_operand -> .)

    add_operand                    shift and go to state 98

state 65

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad . VARS_PRIME BLOCK } empty_global_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (18) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (19) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (20) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (21) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (116) empty -> .

    VAR             shift and go to state 12
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)

    VARS_PRIME                     shift and go to state 99
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 66

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id . save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (9) save_function -> .

    (               reduce using rule 9 (save_function -> .)

    save_function                  shift and go to state 100

state 67

    (34) FUNCTION -> FUNC VOID add_type ID add_id . save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (9) save_function -> .

    (               reduce using rule 9 (save_function -> .)

    save_function                  shift and go to state 101

state 68

    (18) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; . save_ids
    (7) save_ids -> .

    VAR             reduce using rule 7 (save_ids -> .)
    FUNC            reduce using rule 7 (save_ids -> .)
    VOID            reduce using rule 7 (save_ids -> .)
    FOR             reduce using rule 7 (save_ids -> .)
    ID              reduce using rule 7 (save_ids -> .)
    PRINT           reduce using rule 7 (save_ids -> .)
    IF              reduce using rule 7 (save_ids -> .)
    WHILE           reduce using rule 7 (save_ids -> .)
    TRUE            reduce using rule 7 (save_ids -> .)
    FALSE           reduce using rule 7 (save_ids -> .)
    (               reduce using rule 7 (save_ids -> .)
    *               reduce using rule 7 (save_ids -> .)
    /               reduce using rule 7 (save_ids -> .)
    I_CONST         reduce using rule 7 (save_ids -> .)
    F_CONST         reduce using rule 7 (save_ids -> .)
    C_CONST         reduce using rule 7 (save_ids -> .)
    }               reduce using rule 7 (save_ids -> .)
    RETURN          reduce using rule 7 (save_ids -> .)

    save_ids                       shift and go to state 102

state 69

    (22) TIPO_PRIME -> , ID . add_id add_current_type TIPO_PRIME
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    ;               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 103

state 70

    (19) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; . save_ids
    (7) save_ids -> .

    VAR             reduce using rule 7 (save_ids -> .)
    FUNC            reduce using rule 7 (save_ids -> .)
    VOID            reduce using rule 7 (save_ids -> .)
    FOR             reduce using rule 7 (save_ids -> .)
    ID              reduce using rule 7 (save_ids -> .)
    PRINT           reduce using rule 7 (save_ids -> .)
    IF              reduce using rule 7 (save_ids -> .)
    WHILE           reduce using rule 7 (save_ids -> .)
    TRUE            reduce using rule 7 (save_ids -> .)
    FALSE           reduce using rule 7 (save_ids -> .)
    (               reduce using rule 7 (save_ids -> .)
    *               reduce using rule 7 (save_ids -> .)
    /               reduce using rule 7 (save_ids -> .)
    I_CONST         reduce using rule 7 (save_ids -> .)
    F_CONST         reduce using rule 7 (save_ids -> .)
    C_CONST         reduce using rule 7 (save_ids -> .)
    }               reduce using rule 7 (save_ids -> .)
    RETURN          reduce using rule 7 (save_ids -> .)

    save_ids                       shift and go to state 104

state 71

    (112) VAR_CT -> ID add_operand .

    *               reduce using rule 112 (VAR_CT -> ID add_operand .)
    /               reduce using rule 112 (VAR_CT -> ID add_operand .)
    +               reduce using rule 112 (VAR_CT -> ID add_operand .)
    -               reduce using rule 112 (VAR_CT -> ID add_operand .)
    >               reduce using rule 112 (VAR_CT -> ID add_operand .)
    <               reduce using rule 112 (VAR_CT -> ID add_operand .)
    DIFFERENT       reduce using rule 112 (VAR_CT -> ID add_operand .)
    EQUAL           reduce using rule 112 (VAR_CT -> ID add_operand .)
    AND             reduce using rule 112 (VAR_CT -> ID add_operand .)
    OR              reduce using rule 112 (VAR_CT -> ID add_operand .)
    ]               reduce using rule 112 (VAR_CT -> ID add_operand .)
    )               reduce using rule 112 (VAR_CT -> ID add_operand .)
    ;               reduce using rule 112 (VAR_CT -> ID add_operand .)
    ,               reduce using rule 112 (VAR_CT -> ID add_operand .)
    TO              reduce using rule 112 (VAR_CT -> ID add_operand .)
    FOR             reduce using rule 112 (VAR_CT -> ID add_operand .)
    ID              reduce using rule 112 (VAR_CT -> ID add_operand .)
    PRINT           reduce using rule 112 (VAR_CT -> ID add_operand .)
    IF              reduce using rule 112 (VAR_CT -> ID add_operand .)
    WHILE           reduce using rule 112 (VAR_CT -> ID add_operand .)
    TRUE            reduce using rule 112 (VAR_CT -> ID add_operand .)
    FALSE           reduce using rule 112 (VAR_CT -> ID add_operand .)
    (               reduce using rule 112 (VAR_CT -> ID add_operand .)
    I_CONST         reduce using rule 112 (VAR_CT -> ID add_operand .)
    F_CONST         reduce using rule 112 (VAR_CT -> ID add_operand .)
    C_CONST         reduce using rule 112 (VAR_CT -> ID add_operand .)
    }               reduce using rule 112 (VAR_CT -> ID add_operand .)
    RETURN          reduce using rule 112 (VAR_CT -> ID add_operand .)


state 72

    (20) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] . ;
    (21) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] . [ EXPRESSION ] ;

    ;               shift and go to state 106
    [               shift and go to state 105


state 73

    (86) EXPRESSION -> AND_EXP EXPRESSION_PRIME .

    ]               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ;               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    RETURN          reduce using rule 86 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)


state 74

    (87) EXPRESSION_PRIME -> OR . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    AND_EXP                        shift and go to state 107
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 75

    (88) EXPRESSION_PRIME -> empty .

    ]               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    )               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    ;               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    ,               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    TO              reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    FOR             reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    ID              reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    PRINT           reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    IF              reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    WHILE           reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    TRUE            reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    FALSE           reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    (               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    *               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    /               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    I_CONST         reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    F_CONST         reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    C_CONST         reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    }               reduce using rule 88 (EXPRESSION_PRIME -> empty .)
    RETURN          reduce using rule 88 (EXPRESSION_PRIME -> empty .)


state 76

    (89) AND_EXP -> B_EXP AND_EXP_PRIME .

    OR              reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ]               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    )               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ;               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ,               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    TO              reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    FOR             reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    ID              reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    PRINT           reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    IF              reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    WHILE           reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    TRUE            reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    FALSE           reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    (               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    *               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    /               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    I_CONST         reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    F_CONST         reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    C_CONST         reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    }               reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    RETURN          reduce using rule 89 (AND_EXP -> B_EXP AND_EXP_PRIME .)


state 77

    (90) AND_EXP_PRIME -> AND . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    B_EXP                          shift and go to state 108
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 78

    (91) AND_EXP_PRIME -> empty .

    OR              reduce using rule 91 (AND_EXP_PRIME -> empty .)
    ]               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    )               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    ;               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    ,               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    TO              reduce using rule 91 (AND_EXP_PRIME -> empty .)
    FOR             reduce using rule 91 (AND_EXP_PRIME -> empty .)
    ID              reduce using rule 91 (AND_EXP_PRIME -> empty .)
    PRINT           reduce using rule 91 (AND_EXP_PRIME -> empty .)
    IF              reduce using rule 91 (AND_EXP_PRIME -> empty .)
    WHILE           reduce using rule 91 (AND_EXP_PRIME -> empty .)
    TRUE            reduce using rule 91 (AND_EXP_PRIME -> empty .)
    FALSE           reduce using rule 91 (AND_EXP_PRIME -> empty .)
    (               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    *               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    /               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    I_CONST         reduce using rule 91 (AND_EXP_PRIME -> empty .)
    F_CONST         reduce using rule 91 (AND_EXP_PRIME -> empty .)
    C_CONST         reduce using rule 91 (AND_EXP_PRIME -> empty .)
    }               reduce using rule 91 (AND_EXP_PRIME -> empty .)
    RETURN          reduce using rule 91 (AND_EXP_PRIME -> empty .)


state 79

    (94) B_EXP -> EXP B_EXP_PRIME .

    AND             reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    OR              reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    ]               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    )               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    ;               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    ,               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    TO              reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    FOR             reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    ID              reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    PRINT           reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    IF              reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    WHILE           reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    TRUE            reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    FALSE           reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    (               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    *               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    /               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    I_CONST         reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    F_CONST         reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    C_CONST         reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    }               reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)
    RETURN          reduce using rule 94 (B_EXP -> EXP B_EXP_PRIME .)


state 80

    (95) B_EXP_PRIME -> > . add_operator B_EXP aritmetics_operation
    (50) add_operator -> .

    TRUE            reduce using rule 50 (add_operator -> .)
    FALSE           reduce using rule 50 (add_operator -> .)
    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 109

state 81

    (96) B_EXP_PRIME -> < . add_operator B_EXP aritmetics_operation
    (50) add_operator -> .

    TRUE            reduce using rule 50 (add_operator -> .)
    FALSE           reduce using rule 50 (add_operator -> .)
    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 110

state 82

    (97) B_EXP_PRIME -> DIFFERENT . add_operator B_EXP aritmetics_operation
    (50) add_operator -> .

    TRUE            reduce using rule 50 (add_operator -> .)
    FALSE           reduce using rule 50 (add_operator -> .)
    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 111

state 83

    (98) B_EXP_PRIME -> EQUAL . add_operator B_EXP aritmetics_operation
    (50) add_operator -> .

    TRUE            reduce using rule 50 (add_operator -> .)
    FALSE           reduce using rule 50 (add_operator -> .)
    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 112

state 84

    (99) B_EXP_PRIME -> empty .

    AND             reduce using rule 99 (B_EXP_PRIME -> empty .)
    OR              reduce using rule 99 (B_EXP_PRIME -> empty .)
    ]               reduce using rule 99 (B_EXP_PRIME -> empty .)
    )               reduce using rule 99 (B_EXP_PRIME -> empty .)
    ;               reduce using rule 99 (B_EXP_PRIME -> empty .)
    ,               reduce using rule 99 (B_EXP_PRIME -> empty .)
    TO              reduce using rule 99 (B_EXP_PRIME -> empty .)
    FOR             reduce using rule 99 (B_EXP_PRIME -> empty .)
    ID              reduce using rule 99 (B_EXP_PRIME -> empty .)
    PRINT           reduce using rule 99 (B_EXP_PRIME -> empty .)
    IF              reduce using rule 99 (B_EXP_PRIME -> empty .)
    WHILE           reduce using rule 99 (B_EXP_PRIME -> empty .)
    TRUE            reduce using rule 99 (B_EXP_PRIME -> empty .)
    FALSE           reduce using rule 99 (B_EXP_PRIME -> empty .)
    (               reduce using rule 99 (B_EXP_PRIME -> empty .)
    *               reduce using rule 99 (B_EXP_PRIME -> empty .)
    /               reduce using rule 99 (B_EXP_PRIME -> empty .)
    I_CONST         reduce using rule 99 (B_EXP_PRIME -> empty .)
    F_CONST         reduce using rule 99 (B_EXP_PRIME -> empty .)
    C_CONST         reduce using rule 99 (B_EXP_PRIME -> empty .)
    }               reduce using rule 99 (B_EXP_PRIME -> empty .)
    RETURN          reduce using rule 99 (B_EXP_PRIME -> empty .)


state 85

    (100) EXP -> TERM EXP_PRIME .

    >               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    <               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    DIFFERENT       reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    EQUAL           reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    AND             reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    OR              reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    ]               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    )               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    ;               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    ,               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    TO              reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    FOR             reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    ID              reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    PRINT           reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    IF              reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    WHILE           reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    TRUE            reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    FALSE           reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    (               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    *               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    /               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    I_CONST         reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    F_CONST         reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    C_CONST         reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    }               reduce using rule 100 (EXP -> TERM EXP_PRIME .)
    RETURN          reduce using rule 100 (EXP -> TERM EXP_PRIME .)


state 86

    (101) EXP_PRIME -> + . add_operator TERM EXP_PRIME aritmetics_operation
    (50) add_operator -> .

    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 113

state 87

    (102) EXP_PRIME -> - . add_operator TERM EXP_PRIME aritmetics_operation
    (50) add_operator -> .

    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 114

state 88

    (103) EXP_PRIME -> empty .

    >               reduce using rule 103 (EXP_PRIME -> empty .)
    <               reduce using rule 103 (EXP_PRIME -> empty .)
    DIFFERENT       reduce using rule 103 (EXP_PRIME -> empty .)
    EQUAL           reduce using rule 103 (EXP_PRIME -> empty .)
    AND             reduce using rule 103 (EXP_PRIME -> empty .)
    OR              reduce using rule 103 (EXP_PRIME -> empty .)
    ]               reduce using rule 103 (EXP_PRIME -> empty .)
    )               reduce using rule 103 (EXP_PRIME -> empty .)
    ;               reduce using rule 103 (EXP_PRIME -> empty .)
    ,               reduce using rule 103 (EXP_PRIME -> empty .)
    TO              reduce using rule 103 (EXP_PRIME -> empty .)
    FOR             reduce using rule 103 (EXP_PRIME -> empty .)
    ID              reduce using rule 103 (EXP_PRIME -> empty .)
    PRINT           reduce using rule 103 (EXP_PRIME -> empty .)
    IF              reduce using rule 103 (EXP_PRIME -> empty .)
    WHILE           reduce using rule 103 (EXP_PRIME -> empty .)
    TRUE            reduce using rule 103 (EXP_PRIME -> empty .)
    FALSE           reduce using rule 103 (EXP_PRIME -> empty .)
    (               reduce using rule 103 (EXP_PRIME -> empty .)
    *               reduce using rule 103 (EXP_PRIME -> empty .)
    /               reduce using rule 103 (EXP_PRIME -> empty .)
    I_CONST         reduce using rule 103 (EXP_PRIME -> empty .)
    F_CONST         reduce using rule 103 (EXP_PRIME -> empty .)
    C_CONST         reduce using rule 103 (EXP_PRIME -> empty .)
    }               reduce using rule 103 (EXP_PRIME -> empty .)
    RETURN          reduce using rule 103 (EXP_PRIME -> empty .)


state 89

    (104) TERM -> FACTOR TERM_PRIME .

    +               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    -               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    >               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    <               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    DIFFERENT       reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    EQUAL           reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    AND             reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    OR              reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    ]               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    )               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    ;               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    ,               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    TO              reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    FOR             reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    ID              reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    PRINT           reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    IF              reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    WHILE           reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    TRUE            reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    FALSE           reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    (               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    *               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    /               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    I_CONST         reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    F_CONST         reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    C_CONST         reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    }               reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)
    RETURN          reduce using rule 104 (TERM -> FACTOR TERM_PRIME .)


state 90

    (105) TERM_PRIME -> * . add_operator FACTOR aritmetics_operation TERM_PRIME
    (50) add_operator -> .

    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 115

state 91

    (106) TERM_PRIME -> / . add_operator FACTOR aritmetics_operation TERM_PRIME
    (50) add_operator -> .

    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 116

state 92

    (107) TERM_PRIME -> empty .

    +               reduce using rule 107 (TERM_PRIME -> empty .)
    -               reduce using rule 107 (TERM_PRIME -> empty .)
    >               reduce using rule 107 (TERM_PRIME -> empty .)
    <               reduce using rule 107 (TERM_PRIME -> empty .)
    DIFFERENT       reduce using rule 107 (TERM_PRIME -> empty .)
    EQUAL           reduce using rule 107 (TERM_PRIME -> empty .)
    AND             reduce using rule 107 (TERM_PRIME -> empty .)
    OR              reduce using rule 107 (TERM_PRIME -> empty .)
    ]               reduce using rule 107 (TERM_PRIME -> empty .)
    )               reduce using rule 107 (TERM_PRIME -> empty .)
    ;               reduce using rule 107 (TERM_PRIME -> empty .)
    ,               reduce using rule 107 (TERM_PRIME -> empty .)
    TO              reduce using rule 107 (TERM_PRIME -> empty .)
    FOR             reduce using rule 107 (TERM_PRIME -> empty .)
    ID              reduce using rule 107 (TERM_PRIME -> empty .)
    PRINT           reduce using rule 107 (TERM_PRIME -> empty .)
    IF              reduce using rule 107 (TERM_PRIME -> empty .)
    WHILE           reduce using rule 107 (TERM_PRIME -> empty .)
    TRUE            reduce using rule 107 (TERM_PRIME -> empty .)
    FALSE           reduce using rule 107 (TERM_PRIME -> empty .)
    (               reduce using rule 107 (TERM_PRIME -> empty .)
    *               reduce using rule 107 (TERM_PRIME -> empty .)
    /               reduce using rule 107 (TERM_PRIME -> empty .)
    I_CONST         reduce using rule 107 (TERM_PRIME -> empty .)
    F_CONST         reduce using rule 107 (TERM_PRIME -> empty .)
    C_CONST         reduce using rule 107 (TERM_PRIME -> empty .)
    }               reduce using rule 107 (TERM_PRIME -> empty .)
    RETURN          reduce using rule 107 (TERM_PRIME -> empty .)


state 93

    (108) FACTOR -> ( EXPRESSION . )

    )               shift and go to state 117


state 94

    (109) FACTOR -> * VAR_CT .

    *               reduce using rule 109 (FACTOR -> * VAR_CT .)
    /               reduce using rule 109 (FACTOR -> * VAR_CT .)
    +               reduce using rule 109 (FACTOR -> * VAR_CT .)
    -               reduce using rule 109 (FACTOR -> * VAR_CT .)
    >               reduce using rule 109 (FACTOR -> * VAR_CT .)
    <               reduce using rule 109 (FACTOR -> * VAR_CT .)
    DIFFERENT       reduce using rule 109 (FACTOR -> * VAR_CT .)
    EQUAL           reduce using rule 109 (FACTOR -> * VAR_CT .)
    AND             reduce using rule 109 (FACTOR -> * VAR_CT .)
    OR              reduce using rule 109 (FACTOR -> * VAR_CT .)
    ]               reduce using rule 109 (FACTOR -> * VAR_CT .)
    )               reduce using rule 109 (FACTOR -> * VAR_CT .)
    ;               reduce using rule 109 (FACTOR -> * VAR_CT .)
    ,               reduce using rule 109 (FACTOR -> * VAR_CT .)
    TO              reduce using rule 109 (FACTOR -> * VAR_CT .)
    FOR             reduce using rule 109 (FACTOR -> * VAR_CT .)
    ID              reduce using rule 109 (FACTOR -> * VAR_CT .)
    PRINT           reduce using rule 109 (FACTOR -> * VAR_CT .)
    IF              reduce using rule 109 (FACTOR -> * VAR_CT .)
    WHILE           reduce using rule 109 (FACTOR -> * VAR_CT .)
    TRUE            reduce using rule 109 (FACTOR -> * VAR_CT .)
    FALSE           reduce using rule 109 (FACTOR -> * VAR_CT .)
    (               reduce using rule 109 (FACTOR -> * VAR_CT .)
    I_CONST         reduce using rule 109 (FACTOR -> * VAR_CT .)
    F_CONST         reduce using rule 109 (FACTOR -> * VAR_CT .)
    C_CONST         reduce using rule 109 (FACTOR -> * VAR_CT .)
    }               reduce using rule 109 (FACTOR -> * VAR_CT .)
    RETURN          reduce using rule 109 (FACTOR -> * VAR_CT .)


state 95

    (110) FACTOR -> / VAR_CT .

    *               reduce using rule 110 (FACTOR -> / VAR_CT .)
    /               reduce using rule 110 (FACTOR -> / VAR_CT .)
    +               reduce using rule 110 (FACTOR -> / VAR_CT .)
    -               reduce using rule 110 (FACTOR -> / VAR_CT .)
    >               reduce using rule 110 (FACTOR -> / VAR_CT .)
    <               reduce using rule 110 (FACTOR -> / VAR_CT .)
    DIFFERENT       reduce using rule 110 (FACTOR -> / VAR_CT .)
    EQUAL           reduce using rule 110 (FACTOR -> / VAR_CT .)
    AND             reduce using rule 110 (FACTOR -> / VAR_CT .)
    OR              reduce using rule 110 (FACTOR -> / VAR_CT .)
    ]               reduce using rule 110 (FACTOR -> / VAR_CT .)
    )               reduce using rule 110 (FACTOR -> / VAR_CT .)
    ;               reduce using rule 110 (FACTOR -> / VAR_CT .)
    ,               reduce using rule 110 (FACTOR -> / VAR_CT .)
    TO              reduce using rule 110 (FACTOR -> / VAR_CT .)
    FOR             reduce using rule 110 (FACTOR -> / VAR_CT .)
    ID              reduce using rule 110 (FACTOR -> / VAR_CT .)
    PRINT           reduce using rule 110 (FACTOR -> / VAR_CT .)
    IF              reduce using rule 110 (FACTOR -> / VAR_CT .)
    WHILE           reduce using rule 110 (FACTOR -> / VAR_CT .)
    TRUE            reduce using rule 110 (FACTOR -> / VAR_CT .)
    FALSE           reduce using rule 110 (FACTOR -> / VAR_CT .)
    (               reduce using rule 110 (FACTOR -> / VAR_CT .)
    I_CONST         reduce using rule 110 (FACTOR -> / VAR_CT .)
    F_CONST         reduce using rule 110 (FACTOR -> / VAR_CT .)
    C_CONST         reduce using rule 110 (FACTOR -> / VAR_CT .)
    }               reduce using rule 110 (FACTOR -> / VAR_CT .)
    RETURN          reduce using rule 110 (FACTOR -> / VAR_CT .)


state 96

    (113) VAR_CT -> I_CONST add_operand .

    *               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    /               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    +               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    -               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    >               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    <               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    DIFFERENT       reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    EQUAL           reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    AND             reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    OR              reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    ]               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    )               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    ;               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    ,               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    TO              reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    FOR             reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    ID              reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    PRINT           reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    IF              reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    WHILE           reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    TRUE            reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    FALSE           reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    (               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    I_CONST         reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    F_CONST         reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    C_CONST         reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    }               reduce using rule 113 (VAR_CT -> I_CONST add_operand .)
    RETURN          reduce using rule 113 (VAR_CT -> I_CONST add_operand .)


state 97

    (114) VAR_CT -> F_CONST add_operand .

    *               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    /               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    +               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    -               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    >               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    <               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    DIFFERENT       reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    EQUAL           reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    AND             reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    OR              reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    ]               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    )               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    ;               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    ,               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    TO              reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    FOR             reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    ID              reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    PRINT           reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    IF              reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    WHILE           reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    TRUE            reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    FALSE           reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    (               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    I_CONST         reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    F_CONST         reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    C_CONST         reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    }               reduce using rule 114 (VAR_CT -> F_CONST add_operand .)
    RETURN          reduce using rule 114 (VAR_CT -> F_CONST add_operand .)


state 98

    (115) VAR_CT -> C_CONST add_operand .

    *               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    /               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    +               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    -               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    >               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    <               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    DIFFERENT       reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    EQUAL           reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    AND             reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    OR              reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    ]               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    )               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    ;               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    ,               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    TO              reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    FOR             reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    ID              reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    PRINT           reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    IF              reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    WHILE           reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    TRUE            reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    FALSE           reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    (               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    I_CONST         reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    F_CONST         reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    C_CONST         reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    }               reduce using rule 115 (VAR_CT -> C_CONST add_operand .)
    RETURN          reduce using rule 115 (VAR_CT -> C_CONST add_operand .)


state 99

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME . BLOCK } empty_global_variables_table
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    BLOCK                          shift and go to state 119
    STATEMENT                      shift and go to state 120
    empty                          shift and go to state 121
    ASSIGNATION                    shift and go to state 122
    FUNC_CALL                      shift and go to state 123
    EXPRESSION                     shift and go to state 124
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 100

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function . ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table

    (               shift and go to state 135


state 101

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function . ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table

    (               shift and go to state 136


state 102

    (18) VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .

    VAR             reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FUNC            reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    VOID            reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FOR             reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    ID              reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    PRINT           reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    IF              reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    WHILE           reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    TRUE            reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    FALSE           reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    (               reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    *               reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    /               reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    I_CONST         reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    F_CONST         reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    C_CONST         reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    }               reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)
    RETURN          reduce using rule 18 (VARS -> VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids .)


state 103

    (22) TIPO_PRIME -> , ID add_id . add_current_type TIPO_PRIME
    (17) add_current_type -> .

    ,               reduce using rule 17 (add_current_type -> .)
    ;               reduce using rule 17 (add_current_type -> .)

    add_current_type               shift and go to state 137

state 104

    (19) VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .

    VAR             reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FUNC            reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    VOID            reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FOR             reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    ID              reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    PRINT           reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    IF              reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    WHILE           reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    TRUE            reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    FALSE           reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    (               reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    *               reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    /               reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    I_CONST         reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    F_CONST         reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    C_CONST         reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    }               reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)
    RETURN          reduce using rule 19 (VARS -> VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids .)


state 105

    (21) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ . EXPRESSION ] ;
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 138
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 106

    (20) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .

    VAR             reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    FUNC            reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    VOID            reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    FOR             reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    ID              reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    PRINT           reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    IF              reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    WHILE           reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    TRUE            reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    FALSE           reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    (               reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    *               reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    /               reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    I_CONST         reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    F_CONST         reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    C_CONST         reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    }               reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)
    RETURN          reduce using rule 20 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] ; .)


state 107

    (87) EXPRESSION_PRIME -> OR AND_EXP . EXPRESSION_PRIME
    (87) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (88) EXPRESSION_PRIME -> . empty
    (116) empty -> .

    OR              shift and go to state 74
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    EXPRESSION_PRIME               shift and go to state 139
    empty                          shift and go to state 75

state 108

    (90) AND_EXP_PRIME -> AND B_EXP . AND_EXP_PRIME
    (90) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (91) AND_EXP_PRIME -> . empty
    (116) empty -> .

    AND             shift and go to state 77
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    AND_EXP_PRIME                  shift and go to state 140
    empty                          shift and go to state 78

state 109

    (95) B_EXP_PRIME -> > add_operator . B_EXP aritmetics_operation
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    B_EXP                          shift and go to state 141
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 110

    (96) B_EXP_PRIME -> < add_operator . B_EXP aritmetics_operation
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    B_EXP                          shift and go to state 142
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 111

    (97) B_EXP_PRIME -> DIFFERENT add_operator . B_EXP aritmetics_operation
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    B_EXP                          shift and go to state 143
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 112

    (98) B_EXP_PRIME -> EQUAL add_operator . B_EXP aritmetics_operation
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    B_EXP                          shift and go to state 144
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 113

    (101) EXP_PRIME -> + add_operator . TERM EXP_PRIME aritmetics_operation
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    TERM                           shift and go to state 145
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 114

    (102) EXP_PRIME -> - add_operator . TERM EXP_PRIME aritmetics_operation
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 115

    (105) TERM_PRIME -> * add_operator . FACTOR aritmetics_operation TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    FACTOR                         shift and go to state 147
    VAR_CT                         shift and go to state 60

state 116

    (106) TERM_PRIME -> / add_operator . FACTOR aritmetics_operation TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    FACTOR                         shift and go to state 148
    VAR_CT                         shift and go to state 60

state 117

    (108) FACTOR -> ( EXPRESSION ) .

    *               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    /               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    +               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    -               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    >               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    <               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    DIFFERENT       reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    EQUAL           reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    AND             reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    OR              reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    ]               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    )               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    ;               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    ,               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    TO              reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    FOR             reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    ID              reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    PRINT           reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    IF              reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    WHILE           reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    TRUE            reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    FALSE           reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    (               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    I_CONST         reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    F_CONST         reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    C_CONST         reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    }               reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)
    RETURN          reduce using rule 108 (FACTOR -> ( EXPRESSION ) .)


state 118

    (56) FUNC_CALL -> ID . ( EXPRESSION FUNC_CALL_PRIME )
    (84) DESCRIBE_STMT -> ID . . DESCRIBE ( )
    (25) VARIABLE -> ID . get_variable
    (26) VARIABLE -> ID . [ EXPRESSION ]
    (112) VAR_CT -> ID . add_operand
    (24) get_variable -> .
    (51) add_operand -> .

    (               shift and go to state 149
    .               shift and go to state 150
    [               shift and go to state 152
    =               reduce using rule 24 (get_variable -> .)
    *               reduce using rule 51 (add_operand -> .)
    /               reduce using rule 51 (add_operand -> .)
    +               reduce using rule 51 (add_operand -> .)
    -               reduce using rule 51 (add_operand -> .)
    >               reduce using rule 51 (add_operand -> .)
    <               reduce using rule 51 (add_operand -> .)
    DIFFERENT       reduce using rule 51 (add_operand -> .)
    EQUAL           reduce using rule 51 (add_operand -> .)
    AND             reduce using rule 51 (add_operand -> .)
    OR              reduce using rule 51 (add_operand -> .)
    ;               reduce using rule 51 (add_operand -> .)

    get_variable                   shift and go to state 151
    add_operand                    shift and go to state 71

state 119

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK . } empty_global_variables_table

    }               shift and go to state 153


state 120

    (40) BLOCK -> STATEMENT . BLOCK
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    STATEMENT                      shift and go to state 120
    BLOCK                          shift and go to state 154
    empty                          shift and go to state 121
    ASSIGNATION                    shift and go to state 122
    FUNC_CALL                      shift and go to state 123
    EXPRESSION                     shift and go to state 124
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 121

    (41) BLOCK -> empty .

    }               reduce using rule 41 (BLOCK -> empty .)
    RETURN          reduce using rule 41 (BLOCK -> empty .)


state 122

    (42) STATEMENT -> ASSIGNATION .
    (83) FOR_STMT -> ASSIGNATION . check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (78) check_exact_type_for -> .

    FOR             reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    ID              reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    PRINT           reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    IF              reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    WHILE           reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    TRUE            reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    FALSE           reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    (               reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    *               reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    /               reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    I_CONST         reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    F_CONST         reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    C_CONST         reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    }               reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    RETURN          reduce using rule 42 (STATEMENT -> ASSIGNATION .)
    TO              reduce using rule 78 (check_exact_type_for -> .)

    check_exact_type_for           shift and go to state 155

state 123

    (43) STATEMENT -> FUNC_CALL .

    FOR             reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    ID              reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    PRINT           reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    IF              reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    WHILE           reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    TRUE            reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    FALSE           reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    (               reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    *               reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    /               reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    I_CONST         reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    F_CONST         reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    C_CONST         reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    }               reduce using rule 43 (STATEMENT -> FUNC_CALL .)
    RETURN          reduce using rule 43 (STATEMENT -> FUNC_CALL .)


state 124

    (44) STATEMENT -> EXPRESSION . ;

    ;               shift and go to state 156


state 125

    (45) STATEMENT -> WRITE . ;

    ;               shift and go to state 157


state 126

    (46) STATEMENT -> CONDITION .

    FOR             reduce using rule 46 (STATEMENT -> CONDITION .)
    ID              reduce using rule 46 (STATEMENT -> CONDITION .)
    PRINT           reduce using rule 46 (STATEMENT -> CONDITION .)
    IF              reduce using rule 46 (STATEMENT -> CONDITION .)
    WHILE           reduce using rule 46 (STATEMENT -> CONDITION .)
    TRUE            reduce using rule 46 (STATEMENT -> CONDITION .)
    FALSE           reduce using rule 46 (STATEMENT -> CONDITION .)
    (               reduce using rule 46 (STATEMENT -> CONDITION .)
    *               reduce using rule 46 (STATEMENT -> CONDITION .)
    /               reduce using rule 46 (STATEMENT -> CONDITION .)
    I_CONST         reduce using rule 46 (STATEMENT -> CONDITION .)
    F_CONST         reduce using rule 46 (STATEMENT -> CONDITION .)
    C_CONST         reduce using rule 46 (STATEMENT -> CONDITION .)
    }               reduce using rule 46 (STATEMENT -> CONDITION .)
    RETURN          reduce using rule 46 (STATEMENT -> CONDITION .)


state 127

    (47) STATEMENT -> WHILE_STMT .

    FOR             reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    ID              reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    PRINT           reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    IF              reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    WHILE           reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    TRUE            reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    FALSE           reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    (               reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    *               reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    /               reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    I_CONST         reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    F_CONST         reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    C_CONST         reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    }               reduce using rule 47 (STATEMENT -> WHILE_STMT .)
    RETURN          reduce using rule 47 (STATEMENT -> WHILE_STMT .)


state 128

    (48) STATEMENT -> FOR_STMT .

    FOR             reduce using rule 48 (STATEMENT -> FOR_STMT .)
    ID              reduce using rule 48 (STATEMENT -> FOR_STMT .)
    PRINT           reduce using rule 48 (STATEMENT -> FOR_STMT .)
    IF              reduce using rule 48 (STATEMENT -> FOR_STMT .)
    WHILE           reduce using rule 48 (STATEMENT -> FOR_STMT .)
    TRUE            reduce using rule 48 (STATEMENT -> FOR_STMT .)
    FALSE           reduce using rule 48 (STATEMENT -> FOR_STMT .)
    (               reduce using rule 48 (STATEMENT -> FOR_STMT .)
    *               reduce using rule 48 (STATEMENT -> FOR_STMT .)
    /               reduce using rule 48 (STATEMENT -> FOR_STMT .)
    I_CONST         reduce using rule 48 (STATEMENT -> FOR_STMT .)
    F_CONST         reduce using rule 48 (STATEMENT -> FOR_STMT .)
    C_CONST         reduce using rule 48 (STATEMENT -> FOR_STMT .)
    }               reduce using rule 48 (STATEMENT -> FOR_STMT .)
    RETURN          reduce using rule 48 (STATEMENT -> FOR_STMT .)


state 129

    (49) STATEMENT -> DESCRIBE_STMT .

    FOR             reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    ID              reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    PRINT           reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    IF              reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    WHILE           reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    TRUE            reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    FALSE           reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    (               reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    *               reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    /               reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    I_CONST         reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    F_CONST         reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    C_CONST         reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    }               reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)
    RETURN          reduce using rule 49 (STATEMENT -> DESCRIBE_STMT .)


state 130

    (54) ASSIGNATION -> VARIABLE . = add_operator EXPRESSION ; add_assignation_quad

    =               shift and go to state 158


state 131

    (55) ASSIGNATION -> FOR . VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]

    ID              shift and go to state 160

    VARIABLE                       shift and go to state 159

state 132

    (61) WRITE -> PRINT . add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> PRINT . add_operator ( TITLE WRITE_PRIME )
    (50) add_operator -> .

    (               reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 161

state 133

    (74) CONDITION -> IF . ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT

    (               shift and go to state 162


state 134

    (77) WHILE_STMT -> WHILE . ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad

    (               shift and go to state 163


state 135

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( . PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (36) PARAM -> . TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (37) PARAM -> . empty
    (27) TIPO_SIMPLE -> . INT add_type
    (28) TIPO_SIMPLE -> . FLOAT add_type
    (29) TIPO_SIMPLE -> . CHAR add_type
    (116) empty -> .

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    )               reduce using rule 116 (empty -> .)

    TIPO_SIMPLE                    shift and go to state 164
    PARAM                          shift and go to state 165
    empty                          shift and go to state 166

state 136

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( . PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (36) PARAM -> . TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (37) PARAM -> . empty
    (27) TIPO_SIMPLE -> . INT add_type
    (28) TIPO_SIMPLE -> . FLOAT add_type
    (29) TIPO_SIMPLE -> . CHAR add_type
    (116) empty -> .

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    )               reduce using rule 116 (empty -> .)

    PARAM                          shift and go to state 167
    TIPO_SIMPLE                    shift and go to state 164
    empty                          shift and go to state 166

state 137

    (22) TIPO_PRIME -> , ID add_id add_current_type . TIPO_PRIME
    (22) TIPO_PRIME -> . , ID add_id add_current_type TIPO_PRIME
    (23) TIPO_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 46
    ;               reduce using rule 116 (empty -> .)

    TIPO_PRIME                     shift and go to state 168
    empty                          shift and go to state 47

state 138

    (21) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION . ] ;

    ]               shift and go to state 169


state 139

    (87) EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .

    ]               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ;               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    RETURN          reduce using rule 87 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)


state 140

    (90) AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .

    OR              reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ]               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    )               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ;               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ,               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    TO              reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    FOR             reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    ID              reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    PRINT           reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    IF              reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    WHILE           reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    TRUE            reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    FALSE           reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    (               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    *               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    /               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    I_CONST         reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    F_CONST         reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    C_CONST         reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    }               reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    RETURN          reduce using rule 90 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)


state 141

    (95) B_EXP_PRIME -> > add_operator B_EXP . aritmetics_operation
    (85) aritmetics_operation -> .

    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 170

state 142

    (96) B_EXP_PRIME -> < add_operator B_EXP . aritmetics_operation
    (85) aritmetics_operation -> .

    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 171

state 143

    (97) B_EXP_PRIME -> DIFFERENT add_operator B_EXP . aritmetics_operation
    (85) aritmetics_operation -> .

    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 172

state 144

    (98) B_EXP_PRIME -> EQUAL add_operator B_EXP . aritmetics_operation
    (85) aritmetics_operation -> .

    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 173

state 145

    (101) EXP_PRIME -> + add_operator TERM . EXP_PRIME aritmetics_operation
    (101) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (102) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (103) EXP_PRIME -> . empty
    (116) empty -> .

    +               shift and go to state 86
    -               shift and go to state 87
    >               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    DIFFERENT       reduce using rule 116 (empty -> .)
    EQUAL           reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    EXP_PRIME                      shift and go to state 174
    empty                          shift and go to state 88

state 146

    (102) EXP_PRIME -> - add_operator TERM . EXP_PRIME aritmetics_operation
    (101) EXP_PRIME -> . + add_operator TERM EXP_PRIME aritmetics_operation
    (102) EXP_PRIME -> . - add_operator TERM EXP_PRIME aritmetics_operation
    (103) EXP_PRIME -> . empty
    (116) empty -> .

    +               shift and go to state 86
    -               shift and go to state 87
    >               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    DIFFERENT       reduce using rule 116 (empty -> .)
    EQUAL           reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    EXP_PRIME                      shift and go to state 175
    empty                          shift and go to state 88

state 147

    (105) TERM_PRIME -> * add_operator FACTOR . aritmetics_operation TERM_PRIME
    (85) aritmetics_operation -> .

    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    +               reduce using rule 85 (aritmetics_operation -> .)
    -               reduce using rule 85 (aritmetics_operation -> .)
    >               reduce using rule 85 (aritmetics_operation -> .)
    <               reduce using rule 85 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 85 (aritmetics_operation -> .)
    EQUAL           reduce using rule 85 (aritmetics_operation -> .)
    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 176

state 148

    (106) TERM_PRIME -> / add_operator FACTOR . aritmetics_operation TERM_PRIME
    (85) aritmetics_operation -> .

    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    +               reduce using rule 85 (aritmetics_operation -> .)
    -               reduce using rule 85 (aritmetics_operation -> .)
    >               reduce using rule 85 (aritmetics_operation -> .)
    <               reduce using rule 85 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 85 (aritmetics_operation -> .)
    EQUAL           reduce using rule 85 (aritmetics_operation -> .)
    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 177

state 149

    (56) FUNC_CALL -> ID ( . EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 178
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 150

    (84) DESCRIBE_STMT -> ID . . DESCRIBE ( )

    DESCRIBE        shift and go to state 179


state 151

    (25) VARIABLE -> ID get_variable .

    =               reduce using rule 25 (VARIABLE -> ID get_variable .)


state 152

    (26) VARIABLE -> ID [ . EXPRESSION ]
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 180
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 153

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } . empty_global_variables_table
    (3) empty_global_variables_table -> .

    $end            reduce using rule 3 (empty_global_variables_table -> .)

    empty_global_variables_table   shift and go to state 181

state 154

    (40) BLOCK -> STATEMENT BLOCK .

    }               reduce using rule 40 (BLOCK -> STATEMENT BLOCK .)
    RETURN          reduce using rule 40 (BLOCK -> STATEMENT BLOCK .)


state 155

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for . TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for

    TO              shift and go to state 182


state 156

    (44) STATEMENT -> EXPRESSION ; .

    FOR             reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    ID              reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    PRINT           reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    IF              reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    WHILE           reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    TRUE            reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    FALSE           reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    (               reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    *               reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    /               reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    I_CONST         reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    F_CONST         reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    C_CONST         reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    }               reduce using rule 44 (STATEMENT -> EXPRESSION ; .)
    RETURN          reduce using rule 44 (STATEMENT -> EXPRESSION ; .)


state 157

    (45) STATEMENT -> WRITE ; .

    FOR             reduce using rule 45 (STATEMENT -> WRITE ; .)
    ID              reduce using rule 45 (STATEMENT -> WRITE ; .)
    PRINT           reduce using rule 45 (STATEMENT -> WRITE ; .)
    IF              reduce using rule 45 (STATEMENT -> WRITE ; .)
    WHILE           reduce using rule 45 (STATEMENT -> WRITE ; .)
    TRUE            reduce using rule 45 (STATEMENT -> WRITE ; .)
    FALSE           reduce using rule 45 (STATEMENT -> WRITE ; .)
    (               reduce using rule 45 (STATEMENT -> WRITE ; .)
    *               reduce using rule 45 (STATEMENT -> WRITE ; .)
    /               reduce using rule 45 (STATEMENT -> WRITE ; .)
    I_CONST         reduce using rule 45 (STATEMENT -> WRITE ; .)
    F_CONST         reduce using rule 45 (STATEMENT -> WRITE ; .)
    C_CONST         reduce using rule 45 (STATEMENT -> WRITE ; .)
    }               reduce using rule 45 (STATEMENT -> WRITE ; .)
    RETURN          reduce using rule 45 (STATEMENT -> WRITE ; .)


state 158

    (54) ASSIGNATION -> VARIABLE = . add_operator EXPRESSION ; add_assignation_quad
    (50) add_operator -> .

    TRUE            reduce using rule 50 (add_operator -> .)
    FALSE           reduce using rule 50 (add_operator -> .)
    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 183

state 159

    (55) ASSIGNATION -> FOR VARIABLE . = add_operator EXPRESSION add_assignation_for_quad

    =               shift and go to state 184


state 160

    (25) VARIABLE -> ID . get_variable
    (26) VARIABLE -> ID . [ EXPRESSION ]
    (24) get_variable -> .

    [               shift and go to state 152
    =               reduce using rule 24 (get_variable -> .)

    get_variable                   shift and go to state 151

state 161

    (61) WRITE -> PRINT add_operator . ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> PRINT add_operator . ( TITLE WRITE_PRIME )

    (               shift and go to state 185


state 162

    (74) CONDITION -> IF ( . EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 186
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 163

    (77) WHILE_STMT -> WHILE ( . append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (73) append_jump -> .

    TRUE            reduce using rule 73 (append_jump -> .)
    FALSE           reduce using rule 73 (append_jump -> .)
    (               reduce using rule 73 (append_jump -> .)
    *               reduce using rule 73 (append_jump -> .)
    /               reduce using rule 73 (append_jump -> .)
    ID              reduce using rule 73 (append_jump -> .)
    I_CONST         reduce using rule 73 (append_jump -> .)
    F_CONST         reduce using rule 73 (append_jump -> .)
    C_CONST         reduce using rule 73 (append_jump -> .)

    append_jump                    shift and go to state 187

state 164

    (36) PARAM -> TIPO_SIMPLE . ID add_id save_parameter PARAM_PRIME

    ID              shift and go to state 188


state 165

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM . add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (35) add_parameters -> .

    )               reduce using rule 35 (add_parameters -> .)

    add_parameters                 shift and go to state 189

state 166

    (37) PARAM -> empty .

    )               reduce using rule 37 (PARAM -> empty .)


state 167

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM . add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table
    (35) add_parameters -> .

    )               reduce using rule 35 (add_parameters -> .)

    add_parameters                 shift and go to state 190

state 168

    (22) TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME .

    ;               reduce using rule 22 (TIPO_PRIME -> , ID add_id add_current_type TIPO_PRIME .)


state 169

    (21) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] . ;

    ;               shift and go to state 191


state 170

    (95) B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 95 (B_EXP_PRIME -> > add_operator B_EXP aritmetics_operation .)


state 171

    (96) B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 96 (B_EXP_PRIME -> < add_operator B_EXP aritmetics_operation .)


state 172

    (97) B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 97 (B_EXP_PRIME -> DIFFERENT add_operator B_EXP aritmetics_operation .)


state 173

    (98) B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .

    AND             reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    OR              reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ]               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    )               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ;               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ,               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    TO              reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    FOR             reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    ID              reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    PRINT           reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    IF              reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    WHILE           reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    TRUE            reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    FALSE           reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    (               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    *               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    /               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    I_CONST         reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    F_CONST         reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    C_CONST         reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    }               reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)
    RETURN          reduce using rule 98 (B_EXP_PRIME -> EQUAL add_operator B_EXP aritmetics_operation .)


state 174

    (101) EXP_PRIME -> + add_operator TERM EXP_PRIME . aritmetics_operation
    (85) aritmetics_operation -> .

    >               reduce using rule 85 (aritmetics_operation -> .)
    <               reduce using rule 85 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 85 (aritmetics_operation -> .)
    EQUAL           reduce using rule 85 (aritmetics_operation -> .)
    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 192

state 175

    (102) EXP_PRIME -> - add_operator TERM EXP_PRIME . aritmetics_operation
    (85) aritmetics_operation -> .

    >               reduce using rule 85 (aritmetics_operation -> .)
    <               reduce using rule 85 (aritmetics_operation -> .)
    DIFFERENT       reduce using rule 85 (aritmetics_operation -> .)
    EQUAL           reduce using rule 85 (aritmetics_operation -> .)
    AND             reduce using rule 85 (aritmetics_operation -> .)
    OR              reduce using rule 85 (aritmetics_operation -> .)
    ]               reduce using rule 85 (aritmetics_operation -> .)
    )               reduce using rule 85 (aritmetics_operation -> .)
    ;               reduce using rule 85 (aritmetics_operation -> .)
    ,               reduce using rule 85 (aritmetics_operation -> .)
    TO              reduce using rule 85 (aritmetics_operation -> .)
    FOR             reduce using rule 85 (aritmetics_operation -> .)
    ID              reduce using rule 85 (aritmetics_operation -> .)
    PRINT           reduce using rule 85 (aritmetics_operation -> .)
    IF              reduce using rule 85 (aritmetics_operation -> .)
    WHILE           reduce using rule 85 (aritmetics_operation -> .)
    TRUE            reduce using rule 85 (aritmetics_operation -> .)
    FALSE           reduce using rule 85 (aritmetics_operation -> .)
    (               reduce using rule 85 (aritmetics_operation -> .)
    *               reduce using rule 85 (aritmetics_operation -> .)
    /               reduce using rule 85 (aritmetics_operation -> .)
    I_CONST         reduce using rule 85 (aritmetics_operation -> .)
    F_CONST         reduce using rule 85 (aritmetics_operation -> .)
    C_CONST         reduce using rule 85 (aritmetics_operation -> .)
    }               reduce using rule 85 (aritmetics_operation -> .)
    RETURN          reduce using rule 85 (aritmetics_operation -> .)

    aritmetics_operation           shift and go to state 193

state 176

    (105) TERM_PRIME -> * add_operator FACTOR aritmetics_operation . TERM_PRIME
    (105) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (106) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (107) TERM_PRIME -> . empty
    (116) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 90
    /               shift and go to state 91
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    DIFFERENT       reduce using rule 116 (empty -> .)
    EQUAL           reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

  ! *               [ reduce using rule 116 (empty -> .) ]
  ! /               [ reduce using rule 116 (empty -> .) ]

    TERM_PRIME                     shift and go to state 194
    empty                          shift and go to state 92

state 177

    (106) TERM_PRIME -> / add_operator FACTOR aritmetics_operation . TERM_PRIME
    (105) TERM_PRIME -> . * add_operator FACTOR aritmetics_operation TERM_PRIME
    (106) TERM_PRIME -> . / add_operator FACTOR aritmetics_operation TERM_PRIME
    (107) TERM_PRIME -> . empty
    (116) empty -> .

  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    *               shift and go to state 90
    /               shift and go to state 91
    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    DIFFERENT       reduce using rule 116 (empty -> .)
    EQUAL           reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    TO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

  ! *               [ reduce using rule 116 (empty -> .) ]
  ! /               [ reduce using rule 116 (empty -> .) ]

    TERM_PRIME                     shift and go to state 195
    empty                          shift and go to state 92

state 178

    (56) FUNC_CALL -> ID ( EXPRESSION . FUNC_CALL_PRIME )
    (57) FUNC_CALL_PRIME -> . , EXPRESSION FUNC_CALL_PRIME
    (58) FUNC_CALL_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 197
    )               reduce using rule 116 (empty -> .)

    FUNC_CALL_PRIME                shift and go to state 196
    empty                          shift and go to state 198

state 179

    (84) DESCRIBE_STMT -> ID . DESCRIBE . ( )

    (               shift and go to state 199


state 180

    (26) VARIABLE -> ID [ EXPRESSION . ]

    ]               shift and go to state 200


state 181

    (1) PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table .

    $end            reduce using rule 1 (PROGRAM -> PROG add_type ID add_id ; go_to_main save_function VARS_PRIME FUNCTION_PRIME VOID MAIN { fill_go_to_main_quad VARS_PRIME BLOCK } empty_global_variables_table .)


state 182

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO . ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for

    (               shift and go to state 201


state 183

    (54) ASSIGNATION -> VARIABLE = add_operator . EXPRESSION ; add_assignation_quad
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 202
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 184

    (55) ASSIGNATION -> FOR VARIABLE = . add_operator EXPRESSION add_assignation_for_quad
    (50) add_operator -> .

    TRUE            reduce using rule 50 (add_operator -> .)
    FALSE           reduce using rule 50 (add_operator -> .)
    (               reduce using rule 50 (add_operator -> .)
    *               reduce using rule 50 (add_operator -> .)
    /               reduce using rule 50 (add_operator -> .)
    ID              reduce using rule 50 (add_operator -> .)
    I_CONST         reduce using rule 50 (add_operator -> .)
    F_CONST         reduce using rule 50 (add_operator -> .)
    C_CONST         reduce using rule 50 (add_operator -> .)

    add_operator                   shift and go to state 203

state 185

    (61) WRITE -> PRINT add_operator ( . EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> PRINT add_operator ( . TITLE WRITE_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TITLE           shift and go to state 205
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 204
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 186

    (74) CONDITION -> IF ( EXPRESSION . pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (71) pop_operand -> .

    )               reduce using rule 71 (pop_operand -> .)

    pop_operand                    shift and go to state 206

state 187

    (77) WHILE_STMT -> WHILE ( append_jump . EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 207
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 188

    (36) PARAM -> TIPO_SIMPLE ID . add_id save_parameter PARAM_PRIME
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    )               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 208

state 189

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters . ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table

    )               shift and go to state 209


state 190

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters . ) { VARS_PRIME BLOCK } empty_local_variables_table

    )               shift and go to state 210


state 191

    (21) VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .

    VAR             reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    FUNC            reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    VOID            reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    FOR             reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    ID              reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    PRINT           reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    IF              reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    WHILE           reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    TRUE            reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    FALSE           reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    (               reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    *               reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    /               reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    I_CONST         reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    F_CONST         reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    C_CONST         reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    }               reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)
    RETURN          reduce using rule 21 (VARS -> VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ; .)


state 192

    (101) EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .

    >               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    <               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    DIFFERENT       reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    EQUAL           reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    AND             reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    OR              reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ]               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    )               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ;               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ,               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    TO              reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    FOR             reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    ID              reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    PRINT           reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    IF              reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    WHILE           reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    TRUE            reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    FALSE           reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    (               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    *               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    /               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    I_CONST         reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    F_CONST         reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    C_CONST         reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    }               reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)
    RETURN          reduce using rule 101 (EXP_PRIME -> + add_operator TERM EXP_PRIME aritmetics_operation .)


state 193

    (102) EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .

    >               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    <               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    DIFFERENT       reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    EQUAL           reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    AND             reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    OR              reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ]               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    )               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ;               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ,               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    TO              reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    FOR             reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    ID              reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    PRINT           reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    IF              reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    WHILE           reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    TRUE            reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    FALSE           reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    (               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    *               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    /               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    I_CONST         reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    F_CONST         reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    C_CONST         reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    }               reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)
    RETURN          reduce using rule 102 (EXP_PRIME -> - add_operator TERM EXP_PRIME aritmetics_operation .)


state 194

    (105) TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .

    +               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    -               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    >               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    <               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    DIFFERENT       reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    EQUAL           reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    AND             reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    OR              reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ]               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    )               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ;               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ,               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TO              reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FOR             reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ID              reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    PRINT           reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    IF              reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    WHILE           reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TRUE            reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FALSE           reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    (               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    *               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    /               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    I_CONST         reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    F_CONST         reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    C_CONST         reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    }               reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)
    RETURN          reduce using rule 105 (TERM_PRIME -> * add_operator FACTOR aritmetics_operation TERM_PRIME .)


state 195

    (106) TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .

    +               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    -               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    >               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    <               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    DIFFERENT       reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    EQUAL           reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    AND             reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    OR              reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ]               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    )               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ;               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ,               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TO              reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FOR             reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    ID              reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    PRINT           reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    IF              reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    WHILE           reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    TRUE            reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    FALSE           reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    (               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    *               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    /               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    I_CONST         reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    F_CONST         reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    C_CONST         reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    }               reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)
    RETURN          reduce using rule 106 (TERM_PRIME -> / add_operator FACTOR aritmetics_operation TERM_PRIME .)


state 196

    (56) FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME . )

    )               shift and go to state 211


state 197

    (57) FUNC_CALL_PRIME -> , . EXPRESSION FUNC_CALL_PRIME
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 212
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 198

    (58) FUNC_CALL_PRIME -> empty .

    )               reduce using rule 58 (FUNC_CALL_PRIME -> empty .)


state 199

    (84) DESCRIBE_STMT -> ID . DESCRIBE ( . )

    )               shift and go to state 213


state 200

    (26) VARIABLE -> ID [ EXPRESSION ] .

    =               reduce using rule 26 (VARIABLE -> ID [ EXPRESSION ] .)


state 201

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( . EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 214
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 202

    (54) ASSIGNATION -> VARIABLE = add_operator EXPRESSION . ; add_assignation_quad

    ;               shift and go to state 215


state 203

    (55) ASSIGNATION -> FOR VARIABLE = add_operator . EXPRESSION add_assignation_for_quad
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 216
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 204

    (61) WRITE -> PRINT add_operator ( EXPRESSION . print_quad WRITE_PRIME )
    (59) print_quad -> .

    ,               reduce using rule 59 (print_quad -> .)
    )               reduce using rule 59 (print_quad -> .)

    print_quad                     shift and go to state 217

state 205

    (62) WRITE -> PRINT add_operator ( TITLE . WRITE_PRIME )
    (63) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (64) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (65) WRITE_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 116 (empty -> .)

    WRITE_PRIME                    shift and go to state 218
    empty                          shift and go to state 220

state 206

    (74) CONDITION -> IF ( EXPRESSION pop_operand . pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (72) pop_type -> .

    )               reduce using rule 72 (pop_type -> .)

    pop_type                       shift and go to state 221

state 207

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION . pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (71) pop_operand -> .

    )               reduce using rule 71 (pop_operand -> .)

    pop_operand                    shift and go to state 222

state 208

    (36) PARAM -> TIPO_SIMPLE ID add_id . save_parameter PARAM_PRIME
    (8) save_parameter -> .

    ,               reduce using rule 8 (save_parameter -> .)
    )               reduce using rule 8 (save_parameter -> .)

    save_parameter                 shift and go to state 223

state 209

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) . { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table

    {               shift and go to state 224


state 210

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) . { VARS_PRIME BLOCK } empty_local_variables_table

    {               shift and go to state 225


state 211

    (56) FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .

    FOR             reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    ID              reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    PRINT           reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    IF              reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    WHILE           reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    TRUE            reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    FALSE           reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    (               reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    *               reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    /               reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    I_CONST         reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    F_CONST         reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    C_CONST         reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    }               reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    RETURN          reduce using rule 56 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)


state 212

    (57) FUNC_CALL_PRIME -> , EXPRESSION . FUNC_CALL_PRIME
    (57) FUNC_CALL_PRIME -> . , EXPRESSION FUNC_CALL_PRIME
    (58) FUNC_CALL_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 197
    )               reduce using rule 116 (empty -> .)

    FUNC_CALL_PRIME                shift and go to state 226
    empty                          shift and go to state 198

state 213

    (84) DESCRIBE_STMT -> ID . DESCRIBE ( ) .

    FOR             reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    ID              reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    PRINT           reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    IF              reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    WHILE           reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    TRUE            reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    FALSE           reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    (               reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    *               reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    /               reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    I_CONST         reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    F_CONST         reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    C_CONST         reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    }               reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    RETURN          reduce using rule 84 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)


state 214

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION . check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (78) check_exact_type_for -> .

    )               reduce using rule 78 (check_exact_type_for -> .)

    check_exact_type_for           shift and go to state 227

state 215

    (54) ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; . add_assignation_quad
    (52) add_assignation_quad -> .

    TO              reduce using rule 52 (add_assignation_quad -> .)
    FOR             reduce using rule 52 (add_assignation_quad -> .)
    ID              reduce using rule 52 (add_assignation_quad -> .)
    PRINT           reduce using rule 52 (add_assignation_quad -> .)
    IF              reduce using rule 52 (add_assignation_quad -> .)
    WHILE           reduce using rule 52 (add_assignation_quad -> .)
    TRUE            reduce using rule 52 (add_assignation_quad -> .)
    FALSE           reduce using rule 52 (add_assignation_quad -> .)
    (               reduce using rule 52 (add_assignation_quad -> .)
    *               reduce using rule 52 (add_assignation_quad -> .)
    /               reduce using rule 52 (add_assignation_quad -> .)
    I_CONST         reduce using rule 52 (add_assignation_quad -> .)
    F_CONST         reduce using rule 52 (add_assignation_quad -> .)
    C_CONST         reduce using rule 52 (add_assignation_quad -> .)
    }               reduce using rule 52 (add_assignation_quad -> .)
    RETURN          reduce using rule 52 (add_assignation_quad -> .)

    add_assignation_quad           shift and go to state 228

state 216

    (55) ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION . add_assignation_for_quad
    (53) add_assignation_for_quad -> .

    TO              reduce using rule 53 (add_assignation_for_quad -> .)
    FOR             reduce using rule 53 (add_assignation_for_quad -> .)
    ID              reduce using rule 53 (add_assignation_for_quad -> .)
    PRINT           reduce using rule 53 (add_assignation_for_quad -> .)
    IF              reduce using rule 53 (add_assignation_for_quad -> .)
    WHILE           reduce using rule 53 (add_assignation_for_quad -> .)
    TRUE            reduce using rule 53 (add_assignation_for_quad -> .)
    FALSE           reduce using rule 53 (add_assignation_for_quad -> .)
    (               reduce using rule 53 (add_assignation_for_quad -> .)
    *               reduce using rule 53 (add_assignation_for_quad -> .)
    /               reduce using rule 53 (add_assignation_for_quad -> .)
    I_CONST         reduce using rule 53 (add_assignation_for_quad -> .)
    F_CONST         reduce using rule 53 (add_assignation_for_quad -> .)
    C_CONST         reduce using rule 53 (add_assignation_for_quad -> .)
    }               reduce using rule 53 (add_assignation_for_quad -> .)
    RETURN          reduce using rule 53 (add_assignation_for_quad -> .)

    add_assignation_for_quad       shift and go to state 229

state 217

    (61) WRITE -> PRINT add_operator ( EXPRESSION print_quad . WRITE_PRIME )
    (63) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (64) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (65) WRITE_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 116 (empty -> .)

    WRITE_PRIME                    shift and go to state 230
    empty                          shift and go to state 220

state 218

    (62) WRITE -> PRINT add_operator ( TITLE WRITE_PRIME . )

    )               shift and go to state 231


state 219

    (63) WRITE_PRIME -> , . add_print_operator EXPRESSION print_quad WRITE_PRIME
    (64) WRITE_PRIME -> , . add_print_operator TITLE print_quad WRITE_PRIME
    (60) add_print_operator -> .

    TITLE           reduce using rule 60 (add_print_operator -> .)
    TRUE            reduce using rule 60 (add_print_operator -> .)
    FALSE           reduce using rule 60 (add_print_operator -> .)
    (               reduce using rule 60 (add_print_operator -> .)
    *               reduce using rule 60 (add_print_operator -> .)
    /               reduce using rule 60 (add_print_operator -> .)
    ID              reduce using rule 60 (add_print_operator -> .)
    I_CONST         reduce using rule 60 (add_print_operator -> .)
    F_CONST         reduce using rule 60 (add_print_operator -> .)
    C_CONST         reduce using rule 60 (add_print_operator -> .)

    add_print_operator             shift and go to state 232

state 220

    (65) WRITE_PRIME -> empty .

    )               reduce using rule 65 (WRITE_PRIME -> empty .)


state 221

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type . ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT

    )               shift and go to state 233


state 222

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand . pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (72) pop_type -> .

    )               reduce using rule 72 (pop_type -> .)

    pop_type                       shift and go to state 234

state 223

    (36) PARAM -> TIPO_SIMPLE ID add_id save_parameter . PARAM_PRIME
    (38) PARAM_PRIME -> . , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (39) PARAM_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 236
    )               reduce using rule 116 (empty -> .)

    PARAM_PRIME                    shift and go to state 235
    empty                          shift and go to state 237

state 224

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { . VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (18) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (19) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (20) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (21) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (116) empty -> .

    VAR             shift and go to state 12
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    VARS_PRIME                     shift and go to state 238
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 225

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { . VARS_PRIME BLOCK } empty_local_variables_table
    (10) VARS_PRIME -> . VARS VARS_PRIME
    (11) VARS_PRIME -> . empty
    (18) VARS -> . VAR TIPO_COMP ID add_id TIPO_PRIME ; save_ids
    (19) VARS -> . VAR TIPO_SIMPLE ID add_id TIPO_PRIME ; save_ids
    (20) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] ;
    (21) VARS -> . VAR TIPO_SIMPLE ID [ EXPRESSION ] [ EXPRESSION ] ;
    (116) empty -> .

    VAR             shift and go to state 12
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)

    VARS_PRIME                     shift and go to state 239
    VARS                           shift and go to state 10
    empty                          shift and go to state 11

state 226

    (57) FUNC_CALL_PRIME -> , EXPRESSION FUNC_CALL_PRIME .

    )               reduce using rule 57 (FUNC_CALL_PRIME -> , EXPRESSION FUNC_CALL_PRIME .)


state 227

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for . add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (79) add_final_counter_for -> .

    )               reduce using rule 79 (add_final_counter_for -> .)

    add_final_counter_for          shift and go to state 240

state 228

    (54) ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .

    TO              reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    FOR             reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    ID              reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    PRINT           reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    IF              reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    WHILE           reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    TRUE            reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    FALSE           reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    (               reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    *               reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    /               reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    I_CONST         reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    F_CONST         reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    C_CONST         reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    }               reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)
    RETURN          reduce using rule 54 (ASSIGNATION -> VARIABLE = add_operator EXPRESSION ; add_assignation_quad .)


state 229

    (55) ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .

    TO              reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    FOR             reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    ID              reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    PRINT           reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    IF              reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    WHILE           reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    TRUE            reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    FALSE           reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    (               reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    *               reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    /               reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    I_CONST         reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    F_CONST         reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    C_CONST         reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    }               reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)
    RETURN          reduce using rule 55 (ASSIGNATION -> FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad .)


state 230

    (61) WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME . )

    )               shift and go to state 241


state 231

    (62) WRITE -> PRINT add_operator ( TITLE WRITE_PRIME ) .

    ;               reduce using rule 62 (WRITE -> PRINT add_operator ( TITLE WRITE_PRIME ) .)


state 232

    (63) WRITE_PRIME -> , add_print_operator . EXPRESSION print_quad WRITE_PRIME
    (64) WRITE_PRIME -> , add_print_operator . TITLE print_quad WRITE_PRIME
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TITLE           shift and go to state 243
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 242
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 233

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) . { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT

    {               shift and go to state 244


state 234

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type . ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad

    )               shift and go to state 245


state 235

    (36) PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .

    )               reduce using rule 36 (PARAM -> TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .)


state 236

    (38) PARAM_PRIME -> , . TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (27) TIPO_SIMPLE -> . INT add_type
    (28) TIPO_SIMPLE -> . FLOAT add_type
    (29) TIPO_SIMPLE -> . CHAR add_type

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23

    TIPO_SIMPLE                    shift and go to state 246

state 237

    (39) PARAM_PRIME -> empty .

    )               reduce using rule 39 (PARAM_PRIME -> empty .)


state 238

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME . BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    RETURN          reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    BLOCK                          shift and go to state 247
    EXPRESSION                     shift and go to state 124
    STATEMENT                      shift and go to state 120
    empty                          shift and go to state 121
    ASSIGNATION                    shift and go to state 122
    FUNC_CALL                      shift and go to state 123
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 239

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME . BLOCK } empty_local_variables_table
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    BLOCK                          shift and go to state 248
    STATEMENT                      shift and go to state 120
    empty                          shift and go to state 121
    ASSIGNATION                    shift and go to state 122
    FUNC_CALL                      shift and go to state 123
    EXPRESSION                     shift and go to state 124
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 240

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for . check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (81) check_boolean_expression_for -> .

    )               reduce using rule 81 (check_boolean_expression_for -> .)

    check_boolean_expression_for   shift and go to state 249

state 241

    (61) WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME ) .

    ;               reduce using rule 61 (WRITE -> PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME ) .)


state 242

    (63) WRITE_PRIME -> , add_print_operator EXPRESSION . print_quad WRITE_PRIME
    (59) print_quad -> .

    ,               reduce using rule 59 (print_quad -> .)
    )               reduce using rule 59 (print_quad -> .)

    print_quad                     shift and go to state 250

state 243

    (64) WRITE_PRIME -> , add_print_operator TITLE . print_quad WRITE_PRIME
    (59) print_quad -> .

    ,               reduce using rule 59 (print_quad -> .)
    )               reduce using rule 59 (print_quad -> .)

    print_quad                     shift and go to state 251

state 244

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { . go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (66) go_to_false_quad -> .

    FOR             reduce using rule 66 (go_to_false_quad -> .)
    ID              reduce using rule 66 (go_to_false_quad -> .)
    PRINT           reduce using rule 66 (go_to_false_quad -> .)
    IF              reduce using rule 66 (go_to_false_quad -> .)
    WHILE           reduce using rule 66 (go_to_false_quad -> .)
    TRUE            reduce using rule 66 (go_to_false_quad -> .)
    FALSE           reduce using rule 66 (go_to_false_quad -> .)
    (               reduce using rule 66 (go_to_false_quad -> .)
    *               reduce using rule 66 (go_to_false_quad -> .)
    /               reduce using rule 66 (go_to_false_quad -> .)
    I_CONST         reduce using rule 66 (go_to_false_quad -> .)
    F_CONST         reduce using rule 66 (go_to_false_quad -> .)
    C_CONST         reduce using rule 66 (go_to_false_quad -> .)
    }               reduce using rule 66 (go_to_false_quad -> .)

    go_to_false_quad               shift and go to state 252

state 245

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) . { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad

    {               shift and go to state 253


state 246

    (38) PARAM_PRIME -> , TIPO_SIMPLE . ID add_id save_parameter PARAM_PRIME

    ID              shift and go to state 254


state 247

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK . RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table

    RETURN          shift and go to state 255


state 248

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK . } empty_local_variables_table

    }               shift and go to state 256


state 249

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for . ) generate_for_quad DO { BLOCK } end_for

    )               shift and go to state 257


state 250

    (63) WRITE_PRIME -> , add_print_operator EXPRESSION print_quad . WRITE_PRIME
    (63) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (64) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (65) WRITE_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 116 (empty -> .)

    WRITE_PRIME                    shift and go to state 258
    empty                          shift and go to state 220

state 251

    (64) WRITE_PRIME -> , add_print_operator TITLE print_quad . WRITE_PRIME
    (63) WRITE_PRIME -> . , add_print_operator EXPRESSION print_quad WRITE_PRIME
    (64) WRITE_PRIME -> . , add_print_operator TITLE print_quad WRITE_PRIME
    (65) WRITE_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 116 (empty -> .)

    WRITE_PRIME                    shift and go to state 259
    empty                          shift and go to state 220

state 252

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad . BLOCK } fill_go_to_false_quad ELSE_STMT
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 124
    BLOCK                          shift and go to state 260
    STATEMENT                      shift and go to state 120
    empty                          shift and go to state 121
    ASSIGNATION                    shift and go to state 122
    FUNC_CALL                      shift and go to state 123
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 253

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { . go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (66) go_to_false_quad -> .

    FOR             reduce using rule 66 (go_to_false_quad -> .)
    ID              reduce using rule 66 (go_to_false_quad -> .)
    PRINT           reduce using rule 66 (go_to_false_quad -> .)
    IF              reduce using rule 66 (go_to_false_quad -> .)
    WHILE           reduce using rule 66 (go_to_false_quad -> .)
    TRUE            reduce using rule 66 (go_to_false_quad -> .)
    FALSE           reduce using rule 66 (go_to_false_quad -> .)
    (               reduce using rule 66 (go_to_false_quad -> .)
    *               reduce using rule 66 (go_to_false_quad -> .)
    /               reduce using rule 66 (go_to_false_quad -> .)
    I_CONST         reduce using rule 66 (go_to_false_quad -> .)
    F_CONST         reduce using rule 66 (go_to_false_quad -> .)
    C_CONST         reduce using rule 66 (go_to_false_quad -> .)
    }               reduce using rule 66 (go_to_false_quad -> .)

    go_to_false_quad               shift and go to state 261

state 254

    (38) PARAM_PRIME -> , TIPO_SIMPLE ID . add_id save_parameter PARAM_PRIME
    (6) add_id -> .

    ,               reduce using rule 6 (add_id -> .)
    )               reduce using rule 6 (add_id -> .)

    add_id                         shift and go to state 262

state 255

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN . EXPRESSION ; save_function_as_global_variable } empty_local_variables_table
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    ID              shift and go to state 49
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 263
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 256

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } . empty_local_variables_table
    (4) empty_local_variables_table -> .

    FUNC            reduce using rule 4 (empty_local_variables_table -> .)
    VOID            reduce using rule 4 (empty_local_variables_table -> .)

    empty_local_variables_table    shift and go to state 264

state 257

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) . generate_for_quad DO { BLOCK } end_for
    (80) generate_for_quad -> .

    DO              reduce using rule 80 (generate_for_quad -> .)

    generate_for_quad              shift and go to state 265

state 258

    (63) WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME .

    )               reduce using rule 63 (WRITE_PRIME -> , add_print_operator EXPRESSION print_quad WRITE_PRIME .)


state 259

    (64) WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME .

    )               reduce using rule 64 (WRITE_PRIME -> , add_print_operator TITLE print_quad WRITE_PRIME .)


state 260

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK . } fill_go_to_false_quad ELSE_STMT

    }               shift and go to state 266


state 261

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad . BLOCK } fill_go_to_false_quad go_to_quad
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    EXPRESSION                     shift and go to state 124
    BLOCK                          shift and go to state 267
    STATEMENT                      shift and go to state 120
    empty                          shift and go to state 121
    ASSIGNATION                    shift and go to state 122
    FUNC_CALL                      shift and go to state 123
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 262

    (38) PARAM_PRIME -> , TIPO_SIMPLE ID add_id . save_parameter PARAM_PRIME
    (8) save_parameter -> .

    ,               reduce using rule 8 (save_parameter -> .)
    )               reduce using rule 8 (save_parameter -> .)

    save_parameter                 shift and go to state 268

state 263

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION . ; save_function_as_global_variable } empty_local_variables_table

    ;               shift and go to state 269


state 264

    (34) FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table .

    FUNC            reduce using rule 34 (FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table .)
    VOID            reduce using rule 34 (FUNCTION -> FUNC VOID add_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK } empty_local_variables_table .)


state 265

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad . DO { BLOCK } end_for

    DO              shift and go to state 270


state 266

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } . fill_go_to_false_quad ELSE_STMT
    (67) fill_go_to_false_quad -> .

    ELSE            reduce using rule 67 (fill_go_to_false_quad -> .)
    FOR             reduce using rule 67 (fill_go_to_false_quad -> .)
    ID              reduce using rule 67 (fill_go_to_false_quad -> .)
    PRINT           reduce using rule 67 (fill_go_to_false_quad -> .)
    IF              reduce using rule 67 (fill_go_to_false_quad -> .)
    WHILE           reduce using rule 67 (fill_go_to_false_quad -> .)
    TRUE            reduce using rule 67 (fill_go_to_false_quad -> .)
    FALSE           reduce using rule 67 (fill_go_to_false_quad -> .)
    (               reduce using rule 67 (fill_go_to_false_quad -> .)
    *               reduce using rule 67 (fill_go_to_false_quad -> .)
    /               reduce using rule 67 (fill_go_to_false_quad -> .)
    I_CONST         reduce using rule 67 (fill_go_to_false_quad -> .)
    F_CONST         reduce using rule 67 (fill_go_to_false_quad -> .)
    C_CONST         reduce using rule 67 (fill_go_to_false_quad -> .)
    }               reduce using rule 67 (fill_go_to_false_quad -> .)
    RETURN          reduce using rule 67 (fill_go_to_false_quad -> .)

    fill_go_to_false_quad          shift and go to state 271

state 267

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK . } fill_go_to_false_quad go_to_quad

    }               shift and go to state 272


state 268

    (38) PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter . PARAM_PRIME
    (38) PARAM_PRIME -> . , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME
    (39) PARAM_PRIME -> . empty
    (116) empty -> .

    ,               shift and go to state 236
    )               reduce using rule 116 (empty -> .)

    PARAM_PRIME                    shift and go to state 273
    empty                          shift and go to state 237

state 269

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; . save_function_as_global_variable } empty_local_variables_table
    (32) save_function_as_global_variable -> .

    }               reduce using rule 32 (save_function_as_global_variable -> .)

    save_function_as_global_variable shift and go to state 274

state 270

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO . { BLOCK } end_for

    {               shift and go to state 275


state 271

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad . ELSE_STMT
    (75) ELSE_STMT -> . ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad
    (76) ELSE_STMT -> . empty
    (116) empty -> .

    ELSE            shift and go to state 277
    FOR             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    I_CONST         reduce using rule 116 (empty -> .)
    F_CONST         reduce using rule 116 (empty -> .)
    C_CONST         reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)

    ELSE_STMT                      shift and go to state 276
    empty                          shift and go to state 278

state 272

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } . fill_go_to_false_quad go_to_quad
    (67) fill_go_to_false_quad -> .

    FOR             reduce using rule 67 (fill_go_to_false_quad -> .)
    ID              reduce using rule 67 (fill_go_to_false_quad -> .)
    PRINT           reduce using rule 67 (fill_go_to_false_quad -> .)
    IF              reduce using rule 67 (fill_go_to_false_quad -> .)
    WHILE           reduce using rule 67 (fill_go_to_false_quad -> .)
    TRUE            reduce using rule 67 (fill_go_to_false_quad -> .)
    FALSE           reduce using rule 67 (fill_go_to_false_quad -> .)
    (               reduce using rule 67 (fill_go_to_false_quad -> .)
    *               reduce using rule 67 (fill_go_to_false_quad -> .)
    /               reduce using rule 67 (fill_go_to_false_quad -> .)
    I_CONST         reduce using rule 67 (fill_go_to_false_quad -> .)
    F_CONST         reduce using rule 67 (fill_go_to_false_quad -> .)
    C_CONST         reduce using rule 67 (fill_go_to_false_quad -> .)
    }               reduce using rule 67 (fill_go_to_false_quad -> .)
    RETURN          reduce using rule 67 (fill_go_to_false_quad -> .)

    fill_go_to_false_quad          shift and go to state 279

state 273

    (38) PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .

    )               reduce using rule 38 (PARAM_PRIME -> , TIPO_SIMPLE ID add_id save_parameter PARAM_PRIME .)


state 274

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable . } empty_local_variables_table

    }               shift and go to state 280


state 275

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { . BLOCK } end_for
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    ASSIGNATION                    shift and go to state 122
    EXPRESSION                     shift and go to state 124
    BLOCK                          shift and go to state 281
    STATEMENT                      shift and go to state 120
    empty                          shift and go to state 121
    FUNC_CALL                      shift and go to state 123
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 276

    (74) CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .

    FOR             reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    ID              reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    PRINT           reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    IF              reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    WHILE           reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    TRUE            reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    FALSE           reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    (               reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    *               reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    /               reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    I_CONST         reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    F_CONST         reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    C_CONST         reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    }               reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)
    RETURN          reduce using rule 74 (CONDITION -> IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT .)


state 277

    (75) ELSE_STMT -> ELSE . { go_to_true_quad BLOCK } fill_go_to_true_quad

    {               shift and go to state 282


state 278

    (76) ELSE_STMT -> empty .

    FOR             reduce using rule 76 (ELSE_STMT -> empty .)
    ID              reduce using rule 76 (ELSE_STMT -> empty .)
    PRINT           reduce using rule 76 (ELSE_STMT -> empty .)
    IF              reduce using rule 76 (ELSE_STMT -> empty .)
    WHILE           reduce using rule 76 (ELSE_STMT -> empty .)
    TRUE            reduce using rule 76 (ELSE_STMT -> empty .)
    FALSE           reduce using rule 76 (ELSE_STMT -> empty .)
    (               reduce using rule 76 (ELSE_STMT -> empty .)
    *               reduce using rule 76 (ELSE_STMT -> empty .)
    /               reduce using rule 76 (ELSE_STMT -> empty .)
    I_CONST         reduce using rule 76 (ELSE_STMT -> empty .)
    F_CONST         reduce using rule 76 (ELSE_STMT -> empty .)
    C_CONST         reduce using rule 76 (ELSE_STMT -> empty .)
    }               reduce using rule 76 (ELSE_STMT -> empty .)
    RETURN          reduce using rule 76 (ELSE_STMT -> empty .)


state 279

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad . go_to_quad
    (70) go_to_quad -> .

    FOR             reduce using rule 70 (go_to_quad -> .)
    ID              reduce using rule 70 (go_to_quad -> .)
    PRINT           reduce using rule 70 (go_to_quad -> .)
    IF              reduce using rule 70 (go_to_quad -> .)
    WHILE           reduce using rule 70 (go_to_quad -> .)
    TRUE            reduce using rule 70 (go_to_quad -> .)
    FALSE           reduce using rule 70 (go_to_quad -> .)
    (               reduce using rule 70 (go_to_quad -> .)
    *               reduce using rule 70 (go_to_quad -> .)
    /               reduce using rule 70 (go_to_quad -> .)
    I_CONST         reduce using rule 70 (go_to_quad -> .)
    F_CONST         reduce using rule 70 (go_to_quad -> .)
    C_CONST         reduce using rule 70 (go_to_quad -> .)
    }               reduce using rule 70 (go_to_quad -> .)
    RETURN          reduce using rule 70 (go_to_quad -> .)

    go_to_quad                     shift and go to state 283

state 280

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } . empty_local_variables_table
    (4) empty_local_variables_table -> .

    FUNC            reduce using rule 4 (empty_local_variables_table -> .)
    VOID            reduce using rule 4 (empty_local_variables_table -> .)

    empty_local_variables_table    shift and go to state 284

state 281

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK . } end_for

    }               shift and go to state 285


state 282

    (75) ELSE_STMT -> ELSE { . go_to_true_quad BLOCK } fill_go_to_true_quad
    (68) go_to_true_quad -> .

    FOR             reduce using rule 68 (go_to_true_quad -> .)
    ID              reduce using rule 68 (go_to_true_quad -> .)
    PRINT           reduce using rule 68 (go_to_true_quad -> .)
    IF              reduce using rule 68 (go_to_true_quad -> .)
    WHILE           reduce using rule 68 (go_to_true_quad -> .)
    TRUE            reduce using rule 68 (go_to_true_quad -> .)
    FALSE           reduce using rule 68 (go_to_true_quad -> .)
    (               reduce using rule 68 (go_to_true_quad -> .)
    *               reduce using rule 68 (go_to_true_quad -> .)
    /               reduce using rule 68 (go_to_true_quad -> .)
    I_CONST         reduce using rule 68 (go_to_true_quad -> .)
    F_CONST         reduce using rule 68 (go_to_true_quad -> .)
    C_CONST         reduce using rule 68 (go_to_true_quad -> .)
    }               reduce using rule 68 (go_to_true_quad -> .)

    go_to_true_quad                shift and go to state 286

state 283

    (77) WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .

    FOR             reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    ID              reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    PRINT           reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    IF              reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    WHILE           reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    TRUE            reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    FALSE           reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    (               reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    *               reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    /               reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    I_CONST         reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    F_CONST         reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    C_CONST         reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    }               reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)
    RETURN          reduce using rule 77 (WHILE_STMT -> WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad .)


state 284

    (33) FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table .

    FUNC            reduce using rule 33 (FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table .)
    VOID            reduce using rule 33 (FUNCTION -> FUNC TIPO_SIMPLE add_function_type ID add_id save_function ( PARAM add_parameters ) { VARS_PRIME BLOCK RETURN EXPRESSION ; save_function_as_global_variable } empty_local_variables_table .)


state 285

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } . end_for
    (82) end_for -> .

    FOR             reduce using rule 82 (end_for -> .)
    ID              reduce using rule 82 (end_for -> .)
    PRINT           reduce using rule 82 (end_for -> .)
    IF              reduce using rule 82 (end_for -> .)
    WHILE           reduce using rule 82 (end_for -> .)
    TRUE            reduce using rule 82 (end_for -> .)
    FALSE           reduce using rule 82 (end_for -> .)
    (               reduce using rule 82 (end_for -> .)
    *               reduce using rule 82 (end_for -> .)
    /               reduce using rule 82 (end_for -> .)
    I_CONST         reduce using rule 82 (end_for -> .)
    F_CONST         reduce using rule 82 (end_for -> .)
    C_CONST         reduce using rule 82 (end_for -> .)
    }               reduce using rule 82 (end_for -> .)
    RETURN          reduce using rule 82 (end_for -> .)

    end_for                        shift and go to state 287

state 286

    (75) ELSE_STMT -> ELSE { go_to_true_quad . BLOCK } fill_go_to_true_quad
    (40) BLOCK -> . STATEMENT BLOCK
    (41) BLOCK -> . empty
    (42) STATEMENT -> . ASSIGNATION
    (43) STATEMENT -> . FUNC_CALL
    (44) STATEMENT -> . EXPRESSION ;
    (45) STATEMENT -> . WRITE ;
    (46) STATEMENT -> . CONDITION
    (47) STATEMENT -> . WHILE_STMT
    (48) STATEMENT -> . FOR_STMT
    (49) STATEMENT -> . DESCRIBE_STMT
    (116) empty -> .
    (54) ASSIGNATION -> . VARIABLE = add_operator EXPRESSION ; add_assignation_quad
    (55) ASSIGNATION -> . FOR VARIABLE = add_operator EXPRESSION add_assignation_for_quad
    (56) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (86) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (61) WRITE -> . PRINT add_operator ( EXPRESSION print_quad WRITE_PRIME )
    (62) WRITE -> . PRINT add_operator ( TITLE WRITE_PRIME )
    (74) CONDITION -> . IF ( EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad ELSE_STMT
    (77) WHILE_STMT -> . WHILE ( append_jump EXPRESSION pop_operand pop_type ) { go_to_false_quad BLOCK } fill_go_to_false_quad go_to_quad
    (83) FOR_STMT -> . ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for
    (84) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (25) VARIABLE -> . ID get_variable
    (26) VARIABLE -> . ID [ EXPRESSION ]
    (89) AND_EXP -> . B_EXP AND_EXP_PRIME
    (92) B_EXP -> . TRUE
    (93) B_EXP -> . FALSE
    (94) B_EXP -> . EXP B_EXP_PRIME
    (100) EXP -> . TERM EXP_PRIME
    (104) TERM -> . FACTOR TERM_PRIME
    (108) FACTOR -> . ( EXPRESSION )
    (109) FACTOR -> . * VAR_CT
    (110) FACTOR -> . / VAR_CT
    (111) FACTOR -> . VAR_CT
    (112) VAR_CT -> . ID add_operand
    (113) VAR_CT -> . I_CONST add_operand
    (114) VAR_CT -> . F_CONST add_operand
    (115) VAR_CT -> . C_CONST add_operand

    }               reduce using rule 116 (empty -> .)
    FOR             shift and go to state 131
    ID              shift and go to state 118
    PRINT           shift and go to state 132
    IF              shift and go to state 133
    WHILE           shift and go to state 134
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54
    (               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 61
    I_CONST         shift and go to state 62
    F_CONST         shift and go to state 63
    C_CONST         shift and go to state 64

    BLOCK                          shift and go to state 288
    STATEMENT                      shift and go to state 120
    empty                          shift and go to state 121
    ASSIGNATION                    shift and go to state 122
    FUNC_CALL                      shift and go to state 123
    EXPRESSION                     shift and go to state 124
    WRITE                          shift and go to state 125
    CONDITION                      shift and go to state 126
    WHILE_STMT                     shift and go to state 127
    FOR_STMT                       shift and go to state 128
    DESCRIBE_STMT                  shift and go to state 129
    VARIABLE                       shift and go to state 130
    AND_EXP                        shift and go to state 51
    B_EXP                          shift and go to state 52
    EXP                            shift and go to state 55
    TERM                           shift and go to state 56
    FACTOR                         shift and go to state 57
    VAR_CT                         shift and go to state 60

state 287

    (83) FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .

    FOR             reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    ID              reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    PRINT           reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    IF              reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    WHILE           reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    TRUE            reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    FALSE           reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    (               reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    *               reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    /               reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    I_CONST         reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    F_CONST         reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    C_CONST         reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    }               reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)
    RETURN          reduce using rule 83 (FOR_STMT -> ASSIGNATION check_exact_type_for TO ( EXPRESSION check_exact_type_for add_final_counter_for check_boolean_expression_for ) generate_for_quad DO { BLOCK } end_for .)


state 288

    (75) ELSE_STMT -> ELSE { go_to_true_quad BLOCK . } fill_go_to_true_quad

    }               shift and go to state 289


state 289

    (75) ELSE_STMT -> ELSE { go_to_true_quad BLOCK } . fill_go_to_true_quad
    (69) fill_go_to_true_quad -> .

    FOR             reduce using rule 69 (fill_go_to_true_quad -> .)
    ID              reduce using rule 69 (fill_go_to_true_quad -> .)
    PRINT           reduce using rule 69 (fill_go_to_true_quad -> .)
    IF              reduce using rule 69 (fill_go_to_true_quad -> .)
    WHILE           reduce using rule 69 (fill_go_to_true_quad -> .)
    TRUE            reduce using rule 69 (fill_go_to_true_quad -> .)
    FALSE           reduce using rule 69 (fill_go_to_true_quad -> .)
    (               reduce using rule 69 (fill_go_to_true_quad -> .)
    *               reduce using rule 69 (fill_go_to_true_quad -> .)
    /               reduce using rule 69 (fill_go_to_true_quad -> .)
    I_CONST         reduce using rule 69 (fill_go_to_true_quad -> .)
    F_CONST         reduce using rule 69 (fill_go_to_true_quad -> .)
    C_CONST         reduce using rule 69 (fill_go_to_true_quad -> .)
    }               reduce using rule 69 (fill_go_to_true_quad -> .)
    RETURN          reduce using rule 69 (fill_go_to_true_quad -> .)

    fill_go_to_true_quad           shift and go to state 290

state 290

    (75) ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .

    FOR             reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    ID              reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    PRINT           reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    IF              reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    WHILE           reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    TRUE            reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    FALSE           reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    (               reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    *               reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    /               reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    I_CONST         reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    F_CONST         reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    C_CONST         reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    }               reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)
    RETURN          reduce using rule 75 (ELSE_STMT -> ELSE { go_to_true_quad BLOCK } fill_go_to_true_quad .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for * in state 57 resolved as shift
WARNING: shift/reduce conflict for / in state 57 resolved as shift
WARNING: shift/reduce conflict for * in state 176 resolved as shift
WARNING: shift/reduce conflict for / in state 176 resolved as shift
WARNING: shift/reduce conflict for * in state 177 resolved as shift
WARNING: shift/reduce conflict for / in state 177 resolved as shift
