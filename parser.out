Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK }
Rule 2     VARS_PRIME -> VARS
Rule 3     VARS_PRIME -> EMPTY
Rule 4     FUNCTION_PRIME -> FUNCTION FUNC_PRIME
Rule 5     FUNCTION_PRIME -> EMPTY
Rule 6     FUNC_PRIME -> FUNCTION FUNC_PRIME
Rule 7     FUNC_PRIME -> EMPTY
Rule 8     VARS -> VAR TIPO_COMP ID TIPO_PRIME ;
Rule 9     VARS -> TIPO_SIMPLE ID ;
Rule 10    VARS -> TIPO_SIMPLE ID [ I_CONST ] ;
Rule 11    TIPO_PRIME -> , ID TIPO_PRIME
Rule 12    TIPO_PRIME -> EMPTY
Rule 13    VARIABLE -> ID
Rule 14    VARIABLE -> ID [ EXPRESSION ]
Rule 15    TIPO_SIMPLE -> INT
Rule 16    TIPO_SIMPLE -> FLOAT
Rule 17    TIPO_SIMPLE -> CHAR
Rule 18    TIPO_COMP -> DATAFRAME
Rule 19    FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
Rule 20    FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
Rule 21    FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }
Rule 22    PARAM -> TIPO_SIMPLE ID PARAM_PRIME
Rule 23    PARAM -> EMPTY
Rule 24    PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME
Rule 25    PARAM_PRIME -> EMPTY
Rule 26    BLOCK -> STATEMENT BLOCK
Rule 27    BLOCK -> EMPTY
Rule 28    STATEMENT -> ASSIGNATION
Rule 29    STATEMENT -> FUNC_CALL
Rule 30    STATEMENT -> PRINT_STMT
Rule 31    STATEMENT -> CONDITION
Rule 32    STATEMENT -> WHILE_STMT
Rule 33    STATEMENT -> FOR_STMT
Rule 34    STATEMENT -> DESCRIBE_STMT
Rule 35    ASSIGNATION -> VARIABLE = EXPRESSION
Rule 36    FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME )
Rule 37    FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME
Rule 38    FUNC_CALL_PRIME -> EMPTY
Rule 39    PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME )
Rule 40    PRINT_STMT -> PRINT ( TITLE PRINT_PRIME )
Rule 41    PRINT_PRIME -> , EXPRESSION PRINT_PRIME
Rule 42    PRINT_PRIME -> , TITLE PRINT_PRIME
Rule 43    PRINT_PRIME -> EMPTY
Rule 44    CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT
Rule 45    ELSE_STMT -> ELSE { BLOCK }
Rule 46    ELSE_STMT -> EMPTY
Rule 47    WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK }
Rule 48    FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
Rule 49    DESCRIBE_STMT -> ID . DESCRIBE ( )
Rule 50    EXPRESSION -> AND_EXP EXPRESSION_PRIME
Rule 51    EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME
Rule 52    EXPRESSION_PRIME -> EMPTY
Rule 53    AND_EXP -> B_EXP AND_EXP_PRIME
Rule 54    AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME
Rule 55    AND_EXP_PRIME -> EMPTY
Rule 56    B_EXP -> TRUE
Rule 57    B_EXP -> FALSE
Rule 58    B_EXP -> EXP B_EXP_PRIME
Rule 59    B_EXP_PRIME -> >
Rule 60    B_EXP_PRIME -> <
Rule 61    B_EXP_PRIME -> DIFFERENT
Rule 62    B_EXP_PRIME -> EQUAL
Rule 63    B_EXP_PRIME -> EMPTY
Rule 64    EXP -> TERM EXP_PRIME
Rule 65    EXP_PRIME -> + TERM EXP_PRIME
Rule 66    EXP_PRIME -> - TERM EXP_PRIME
Rule 67    EXP_PRIME -> EMPTY
Rule 68    TERM -> FACTOR TERM_PRIME
Rule 69    TERM_PRIME -> * FACTOR TERM_PRIME
Rule 70    TERM_PRIME -> / FACTOR TERM_PRIME
Rule 71    TERM_PRIME -> EMPTY
Rule 72    FACTOR -> ( EXPRESSION )
Rule 73    FACTOR -> * VAR_CT
Rule 74    FACTOR -> / VAR_CT
Rule 75    FACTOR -> VAR_CT
Rule 76    VAR_CT -> ID
Rule 77    VAR_CT -> I_CONST
Rule 78    VAR_CT -> F_CONST
Rule 79    VAR_CT -> C_CONST

Terminals, with rules where they appear

(                    : 19 20 21 36 39 40 44 47 49 72
)                    : 19 20 21 36 39 40 44 47 49 72
*                    : 69 73
+                    : 65
,                    : 11 24 41 42
-                    : 66
.                    : 49
/                    : 70 74
;                    : 1 8 9 10
<                    : 60
=                    : 35 48
>                    : 59
AND                  : 54
CHAR                 : 17
C_CONST              : 79
DATAFRAME            : 18
DESCRIBE             : 49
DIFFERENT            : 61
DO                   : 48
ELSE                 : 45
EMPTY                : 3 5 7 12 23 25 27 38 43 46 52 55 63 67 71
EQUAL                : 62
FALSE                : 57
FLOAT                : 16
FOR                  : 48
FUNC                 : 19 20 21
F_CONST              : 78
ID                   : 8 9 10 11 13 14 19 20 21 22 24 36 48 49 76
IF                   : 44
INT                  : 15
I_CONST              : 10 77
MAIN                 : 1
OR                   : 51
PRINT                : 39 40
PROG                 : 1
RETURN               : 19 20
TITLE                : 40 42
TO                   : 48
TRUE                 : 56
VAR                  : 8
VOID                 : 1 21
WHILE                : 47
[                    : 10 14
]                    : 10 14
error                : 
{                    : 1 19 20 21 44 45 47 48
}                    : 1 19 20 21 44 45 47 48

Nonterminals, with rules where they appear

AND_EXP              : 50 51
AND_EXP_PRIME        : 53 54
ASSIGNATION          : 28
BLOCK                : 1 19 20 21 26 44 45 47 48
B_EXP                : 53 54
B_EXP_PRIME          : 58
CONDITION            : 31
DESCRIBE_STMT        : 34
ELSE_STMT            : 44
EXP                  : 58
EXPRESSION           : 14 19 35 36 37 39 41 44 47 48 48 72
EXPRESSION_PRIME     : 50 51
EXP_PRIME            : 64 65 66
FACTOR               : 68 69 70
FOR_STMT             : 33
FUNCTION             : 4 6
FUNCTION_PRIME       : 1
FUNC_CALL            : 29
FUNC_CALL_PRIME      : 36 37
FUNC_PRIME           : 4 6
PARAM                : 19 20 21
PARAM_PRIME          : 22 24
PRINT_PRIME          : 39 40 41 42
PRINT_STMT           : 30
PROGRAM              : 0
STATEMENT            : 26
TERM                 : 64 65 66
TERM_PRIME           : 68 69 70
TIPO_COMP            : 8
TIPO_PRIME           : 8 11
TIPO_SIMPLE          : 9 10 19 20 22 24
VARIABLE             : 35
VARS                 : 2
VARS_PRIME           : 1 1 19 20 21
VAR_CT               : 20 73 74 75
WHILE_STMT           : 32

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK }

    PROG            shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROG . ; VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK }

    ;               shift and go to state 3


state 3

    (1) PROGRAM -> PROG ; . VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK }
    (2) VARS_PRIME -> . VARS
    (3) VARS_PRIME -> . EMPTY
    (8) VARS -> . VAR TIPO_COMP ID TIPO_PRIME ;
    (9) VARS -> . TIPO_SIMPLE ID ;
    (10) VARS -> . TIPO_SIMPLE ID [ I_CONST ] ;
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    EMPTY           shift and go to state 6
    VAR             shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    VARS_PRIME                     shift and go to state 4
    VARS                           shift and go to state 5
    TIPO_SIMPLE                    shift and go to state 8

state 4

    (1) PROGRAM -> PROG ; VARS_PRIME . FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK }
    (4) FUNCTION_PRIME -> . FUNCTION FUNC_PRIME
    (5) FUNCTION_PRIME -> . EMPTY
    (19) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (21) FUNCTION -> . FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }

    EMPTY           shift and go to state 14
    FUNC            shift and go to state 15

    FUNCTION_PRIME                 shift and go to state 12
    FUNCTION                       shift and go to state 13

state 5

    (2) VARS_PRIME -> VARS .

    EMPTY           reduce using rule 2 (VARS_PRIME -> VARS .)
    FUNC            reduce using rule 2 (VARS_PRIME -> VARS .)
    ID              reduce using rule 2 (VARS_PRIME -> VARS .)
    PRINT           reduce using rule 2 (VARS_PRIME -> VARS .)
    IF              reduce using rule 2 (VARS_PRIME -> VARS .)
    WHILE           reduce using rule 2 (VARS_PRIME -> VARS .)
    FOR             reduce using rule 2 (VARS_PRIME -> VARS .)


state 6

    (3) VARS_PRIME -> EMPTY .

    EMPTY           reduce using rule 3 (VARS_PRIME -> EMPTY .)
    FUNC            reduce using rule 3 (VARS_PRIME -> EMPTY .)
    ID              reduce using rule 3 (VARS_PRIME -> EMPTY .)
    PRINT           reduce using rule 3 (VARS_PRIME -> EMPTY .)
    IF              reduce using rule 3 (VARS_PRIME -> EMPTY .)
    WHILE           reduce using rule 3 (VARS_PRIME -> EMPTY .)
    FOR             reduce using rule 3 (VARS_PRIME -> EMPTY .)


state 7

    (8) VARS -> VAR . TIPO_COMP ID TIPO_PRIME ;
    (18) TIPO_COMP -> . DATAFRAME

    DATAFRAME       shift and go to state 17

    TIPO_COMP                      shift and go to state 16

state 8

    (9) VARS -> TIPO_SIMPLE . ID ;
    (10) VARS -> TIPO_SIMPLE . ID [ I_CONST ] ;

    ID              shift and go to state 18


state 9

    (15) TIPO_SIMPLE -> INT .

    ID              reduce using rule 15 (TIPO_SIMPLE -> INT .)


state 10

    (16) TIPO_SIMPLE -> FLOAT .

    ID              reduce using rule 16 (TIPO_SIMPLE -> FLOAT .)


state 11

    (17) TIPO_SIMPLE -> CHAR .

    ID              reduce using rule 17 (TIPO_SIMPLE -> CHAR .)


state 12

    (1) PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME . VOID MAIN { VARS_PRIME BLOCK }

    VOID            shift and go to state 19


state 13

    (4) FUNCTION_PRIME -> FUNCTION . FUNC_PRIME
    (6) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (7) FUNC_PRIME -> . EMPTY
    (19) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (21) FUNCTION -> . FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }

    EMPTY           shift and go to state 22
    FUNC            shift and go to state 15

    FUNCTION                       shift and go to state 20
    FUNC_PRIME                     shift and go to state 21

state 14

    (5) FUNCTION_PRIME -> EMPTY .

    VOID            reduce using rule 5 (FUNCTION_PRIME -> EMPTY .)


state 15

    (19) FUNCTION -> FUNC . TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC . TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (21) FUNCTION -> FUNC . VOID ID ( PARAM ) { VARS_PRIME BLOCK }
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    VOID            shift and go to state 24
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    TIPO_SIMPLE                    shift and go to state 23

state 16

    (8) VARS -> VAR TIPO_COMP . ID TIPO_PRIME ;

    ID              shift and go to state 25


state 17

    (18) TIPO_COMP -> DATAFRAME .

    ID              reduce using rule 18 (TIPO_COMP -> DATAFRAME .)


state 18

    (9) VARS -> TIPO_SIMPLE ID . ;
    (10) VARS -> TIPO_SIMPLE ID . [ I_CONST ] ;

    ;               shift and go to state 26
    [               shift and go to state 27


state 19

    (1) PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID . MAIN { VARS_PRIME BLOCK }

    MAIN            shift and go to state 28


state 20

    (6) FUNC_PRIME -> FUNCTION . FUNC_PRIME
    (6) FUNC_PRIME -> . FUNCTION FUNC_PRIME
    (7) FUNC_PRIME -> . EMPTY
    (19) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> . FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (21) FUNCTION -> . FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK }

    EMPTY           shift and go to state 22
    FUNC            shift and go to state 15

    FUNCTION                       shift and go to state 20
    FUNC_PRIME                     shift and go to state 29

state 21

    (4) FUNCTION_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 4 (FUNCTION_PRIME -> FUNCTION FUNC_PRIME .)


state 22

    (7) FUNC_PRIME -> EMPTY .

    VOID            reduce using rule 7 (FUNC_PRIME -> EMPTY .)


state 23

    (19) FUNCTION -> FUNC TIPO_SIMPLE . ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE . ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }

    ID              shift and go to state 30


state 24

    (21) FUNCTION -> FUNC VOID . ID ( PARAM ) { VARS_PRIME BLOCK }

    ID              shift and go to state 31


state 25

    (8) VARS -> VAR TIPO_COMP ID . TIPO_PRIME ;
    (11) TIPO_PRIME -> . , ID TIPO_PRIME
    (12) TIPO_PRIME -> . EMPTY

    ,               shift and go to state 33
    EMPTY           shift and go to state 34

    TIPO_PRIME                     shift and go to state 32

state 26

    (9) VARS -> TIPO_SIMPLE ID ; .

    EMPTY           reduce using rule 9 (VARS -> TIPO_SIMPLE ID ; .)
    FUNC            reduce using rule 9 (VARS -> TIPO_SIMPLE ID ; .)
    ID              reduce using rule 9 (VARS -> TIPO_SIMPLE ID ; .)
    PRINT           reduce using rule 9 (VARS -> TIPO_SIMPLE ID ; .)
    IF              reduce using rule 9 (VARS -> TIPO_SIMPLE ID ; .)
    WHILE           reduce using rule 9 (VARS -> TIPO_SIMPLE ID ; .)
    FOR             reduce using rule 9 (VARS -> TIPO_SIMPLE ID ; .)


state 27

    (10) VARS -> TIPO_SIMPLE ID [ . I_CONST ] ;

    I_CONST         shift and go to state 35


state 28

    (1) PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN . { VARS_PRIME BLOCK }

    {               shift and go to state 36


state 29

    (6) FUNC_PRIME -> FUNCTION FUNC_PRIME .

    VOID            reduce using rule 6 (FUNC_PRIME -> FUNCTION FUNC_PRIME .)


state 30

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID . ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID . ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }

    (               shift and go to state 37


state 31

    (21) FUNCTION -> FUNC VOID ID . ( PARAM ) { VARS_PRIME BLOCK }

    (               shift and go to state 38


state 32

    (8) VARS -> VAR TIPO_COMP ID TIPO_PRIME . ;

    ;               shift and go to state 39


state 33

    (11) TIPO_PRIME -> , . ID TIPO_PRIME

    ID              shift and go to state 40


state 34

    (12) TIPO_PRIME -> EMPTY .

    ;               reduce using rule 12 (TIPO_PRIME -> EMPTY .)


state 35

    (10) VARS -> TIPO_SIMPLE ID [ I_CONST . ] ;

    ]               shift and go to state 41


state 36

    (1) PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN { . VARS_PRIME BLOCK }
    (2) VARS_PRIME -> . VARS
    (3) VARS_PRIME -> . EMPTY
    (8) VARS -> . VAR TIPO_COMP ID TIPO_PRIME ;
    (9) VARS -> . TIPO_SIMPLE ID ;
    (10) VARS -> . TIPO_SIMPLE ID [ I_CONST ] ;
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    EMPTY           shift and go to state 6
    VAR             shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    VARS_PRIME                     shift and go to state 42
    VARS                           shift and go to state 5
    TIPO_SIMPLE                    shift and go to state 8

state 37

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( . PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( . PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT }
    (22) PARAM -> . TIPO_SIMPLE ID PARAM_PRIME
    (23) PARAM -> . EMPTY
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    EMPTY           shift and go to state 45
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    TIPO_SIMPLE                    shift and go to state 43
    PARAM                          shift and go to state 44

state 38

    (21) FUNCTION -> FUNC VOID ID ( . PARAM ) { VARS_PRIME BLOCK }
    (22) PARAM -> . TIPO_SIMPLE ID PARAM_PRIME
    (23) PARAM -> . EMPTY
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    EMPTY           shift and go to state 45
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    PARAM                          shift and go to state 46
    TIPO_SIMPLE                    shift and go to state 43

state 39

    (8) VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .

    EMPTY           reduce using rule 8 (VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .)
    FUNC            reduce using rule 8 (VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .)
    ID              reduce using rule 8 (VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .)
    PRINT           reduce using rule 8 (VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .)
    IF              reduce using rule 8 (VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .)
    WHILE           reduce using rule 8 (VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .)
    FOR             reduce using rule 8 (VARS -> VAR TIPO_COMP ID TIPO_PRIME ; .)


state 40

    (11) TIPO_PRIME -> , ID . TIPO_PRIME
    (11) TIPO_PRIME -> . , ID TIPO_PRIME
    (12) TIPO_PRIME -> . EMPTY

    ,               shift and go to state 33
    EMPTY           shift and go to state 34

    TIPO_PRIME                     shift and go to state 47

state 41

    (10) VARS -> TIPO_SIMPLE ID [ I_CONST ] . ;

    ;               shift and go to state 48


state 42

    (1) PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME . BLOCK }
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    BLOCK                          shift and go to state 49
    STATEMENT                      shift and go to state 50
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 43

    (22) PARAM -> TIPO_SIMPLE . ID PARAM_PRIME

    ID              shift and go to state 65


state 44

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM . ) { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM . ) { VARS_PRIME BLOCK RETURN VAR_CT }

    )               shift and go to state 66


state 45

    (23) PARAM -> EMPTY .

    )               reduce using rule 23 (PARAM -> EMPTY .)


state 46

    (21) FUNCTION -> FUNC VOID ID ( PARAM . ) { VARS_PRIME BLOCK }

    )               shift and go to state 67


state 47

    (11) TIPO_PRIME -> , ID TIPO_PRIME .

    ;               reduce using rule 11 (TIPO_PRIME -> , ID TIPO_PRIME .)


state 48

    (10) VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .

    EMPTY           reduce using rule 10 (VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .)
    FUNC            reduce using rule 10 (VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .)
    ID              reduce using rule 10 (VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .)
    PRINT           reduce using rule 10 (VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .)
    IF              reduce using rule 10 (VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .)
    WHILE           reduce using rule 10 (VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .)
    FOR             reduce using rule 10 (VARS -> TIPO_SIMPLE ID [ I_CONST ] ; .)


state 49

    (1) PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK . }

    }               shift and go to state 68


state 50

    (26) BLOCK -> STATEMENT . BLOCK
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    STATEMENT                      shift and go to state 50
    BLOCK                          shift and go to state 69
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 51

    (27) BLOCK -> EMPTY .

    }               reduce using rule 27 (BLOCK -> EMPTY .)
    RETURN          reduce using rule 27 (BLOCK -> EMPTY .)


state 52

    (28) STATEMENT -> ASSIGNATION .

    EMPTY           reduce using rule 28 (STATEMENT -> ASSIGNATION .)
    ID              reduce using rule 28 (STATEMENT -> ASSIGNATION .)
    PRINT           reduce using rule 28 (STATEMENT -> ASSIGNATION .)
    IF              reduce using rule 28 (STATEMENT -> ASSIGNATION .)
    WHILE           reduce using rule 28 (STATEMENT -> ASSIGNATION .)
    FOR             reduce using rule 28 (STATEMENT -> ASSIGNATION .)


state 53

    (29) STATEMENT -> FUNC_CALL .

    EMPTY           reduce using rule 29 (STATEMENT -> FUNC_CALL .)
    ID              reduce using rule 29 (STATEMENT -> FUNC_CALL .)
    PRINT           reduce using rule 29 (STATEMENT -> FUNC_CALL .)
    IF              reduce using rule 29 (STATEMENT -> FUNC_CALL .)
    WHILE           reduce using rule 29 (STATEMENT -> FUNC_CALL .)
    FOR             reduce using rule 29 (STATEMENT -> FUNC_CALL .)


state 54

    (30) STATEMENT -> PRINT_STMT .

    EMPTY           reduce using rule 30 (STATEMENT -> PRINT_STMT .)
    ID              reduce using rule 30 (STATEMENT -> PRINT_STMT .)
    PRINT           reduce using rule 30 (STATEMENT -> PRINT_STMT .)
    IF              reduce using rule 30 (STATEMENT -> PRINT_STMT .)
    WHILE           reduce using rule 30 (STATEMENT -> PRINT_STMT .)
    FOR             reduce using rule 30 (STATEMENT -> PRINT_STMT .)


state 55

    (31) STATEMENT -> CONDITION .

    EMPTY           reduce using rule 31 (STATEMENT -> CONDITION .)
    ID              reduce using rule 31 (STATEMENT -> CONDITION .)
    PRINT           reduce using rule 31 (STATEMENT -> CONDITION .)
    IF              reduce using rule 31 (STATEMENT -> CONDITION .)
    WHILE           reduce using rule 31 (STATEMENT -> CONDITION .)
    FOR             reduce using rule 31 (STATEMENT -> CONDITION .)


state 56

    (32) STATEMENT -> WHILE_STMT .

    EMPTY           reduce using rule 32 (STATEMENT -> WHILE_STMT .)
    ID              reduce using rule 32 (STATEMENT -> WHILE_STMT .)
    PRINT           reduce using rule 32 (STATEMENT -> WHILE_STMT .)
    IF              reduce using rule 32 (STATEMENT -> WHILE_STMT .)
    WHILE           reduce using rule 32 (STATEMENT -> WHILE_STMT .)
    FOR             reduce using rule 32 (STATEMENT -> WHILE_STMT .)


state 57

    (33) STATEMENT -> FOR_STMT .

    EMPTY           reduce using rule 33 (STATEMENT -> FOR_STMT .)
    ID              reduce using rule 33 (STATEMENT -> FOR_STMT .)
    PRINT           reduce using rule 33 (STATEMENT -> FOR_STMT .)
    IF              reduce using rule 33 (STATEMENT -> FOR_STMT .)
    WHILE           reduce using rule 33 (STATEMENT -> FOR_STMT .)
    FOR             reduce using rule 33 (STATEMENT -> FOR_STMT .)


state 58

    (34) STATEMENT -> DESCRIBE_STMT .

    EMPTY           reduce using rule 34 (STATEMENT -> DESCRIBE_STMT .)
    ID              reduce using rule 34 (STATEMENT -> DESCRIBE_STMT .)
    PRINT           reduce using rule 34 (STATEMENT -> DESCRIBE_STMT .)
    IF              reduce using rule 34 (STATEMENT -> DESCRIBE_STMT .)
    WHILE           reduce using rule 34 (STATEMENT -> DESCRIBE_STMT .)
    FOR             reduce using rule 34 (STATEMENT -> DESCRIBE_STMT .)


state 59

    (35) ASSIGNATION -> VARIABLE . = EXPRESSION

    =               shift and go to state 70


state 60

    (36) FUNC_CALL -> ID . ( EXPRESSION FUNC_CALL_PRIME )
    (49) DESCRIBE_STMT -> ID . . DESCRIBE ( )
    (13) VARIABLE -> ID .
    (14) VARIABLE -> ID . [ EXPRESSION ]

    (               shift and go to state 71
    .               shift and go to state 72
    =               reduce using rule 13 (VARIABLE -> ID .)
    [               shift and go to state 73


state 61

    (39) PRINT_STMT -> PRINT . ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> PRINT . ( TITLE PRINT_PRIME )

    (               shift and go to state 74


state 62

    (44) CONDITION -> IF . ( EXPRESSION ) { BLOCK } ELSE_STMT

    (               shift and go to state 75


state 63

    (47) WHILE_STMT -> WHILE . ( EXPRESSION ) { BLOCK }

    (               shift and go to state 76


state 64

    (48) FOR_STMT -> FOR . ID = EXPRESSION TO EXPRESSION DO { BLOCK }

    ID              shift and go to state 77


state 65

    (22) PARAM -> TIPO_SIMPLE ID . PARAM_PRIME
    (24) PARAM_PRIME -> . , TIPO_SIMPLE ID PARAM_PRIME
    (25) PARAM_PRIME -> . EMPTY

    ,               shift and go to state 79
    EMPTY           shift and go to state 80

    PARAM_PRIME                    shift and go to state 78

state 66

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) . { VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) . { VARS_PRIME BLOCK RETURN VAR_CT }

    {               shift and go to state 81


state 67

    (21) FUNCTION -> FUNC VOID ID ( PARAM ) . { VARS_PRIME BLOCK }

    {               shift and go to state 82


state 68

    (1) PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } .

    $end            reduce using rule 1 (PROGRAM -> PROG ; VARS_PRIME FUNCTION_PRIME VOID MAIN { VARS_PRIME BLOCK } .)


state 69

    (26) BLOCK -> STATEMENT BLOCK .

    }               reduce using rule 26 (BLOCK -> STATEMENT BLOCK .)
    RETURN          reduce using rule 26 (BLOCK -> STATEMENT BLOCK .)


state 70

    (35) ASSIGNATION -> VARIABLE = . EXPRESSION
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 83
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 71

    (36) FUNC_CALL -> ID ( . EXPRESSION FUNC_CALL_PRIME )
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 99
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 72

    (49) DESCRIBE_STMT -> ID . . DESCRIBE ( )

    DESCRIBE        shift and go to state 100


state 73

    (14) VARIABLE -> ID [ . EXPRESSION ]
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 101
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 74

    (39) PRINT_STMT -> PRINT ( . EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> PRINT ( . TITLE PRINT_PRIME )
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TITLE           shift and go to state 103
    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 102
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 75

    (44) CONDITION -> IF ( . EXPRESSION ) { BLOCK } ELSE_STMT
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 104
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 76

    (47) WHILE_STMT -> WHILE ( . EXPRESSION ) { BLOCK }
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 105
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 77

    (48) FOR_STMT -> FOR ID . = EXPRESSION TO EXPRESSION DO { BLOCK }

    =               shift and go to state 106


state 78

    (22) PARAM -> TIPO_SIMPLE ID PARAM_PRIME .

    )               reduce using rule 22 (PARAM -> TIPO_SIMPLE ID PARAM_PRIME .)


state 79

    (24) PARAM_PRIME -> , . TIPO_SIMPLE ID PARAM_PRIME
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    TIPO_SIMPLE                    shift and go to state 107

state 80

    (25) PARAM_PRIME -> EMPTY .

    )               reduce using rule 25 (PARAM_PRIME -> EMPTY .)


state 81

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { . VARS_PRIME BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { . VARS_PRIME BLOCK RETURN VAR_CT }
    (2) VARS_PRIME -> . VARS
    (3) VARS_PRIME -> . EMPTY
    (8) VARS -> . VAR TIPO_COMP ID TIPO_PRIME ;
    (9) VARS -> . TIPO_SIMPLE ID ;
    (10) VARS -> . TIPO_SIMPLE ID [ I_CONST ] ;
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    EMPTY           shift and go to state 6
    VAR             shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    TIPO_SIMPLE                    shift and go to state 8
    VARS_PRIME                     shift and go to state 108
    VARS                           shift and go to state 5

state 82

    (21) FUNCTION -> FUNC VOID ID ( PARAM ) { . VARS_PRIME BLOCK }
    (2) VARS_PRIME -> . VARS
    (3) VARS_PRIME -> . EMPTY
    (8) VARS -> . VAR TIPO_COMP ID TIPO_PRIME ;
    (9) VARS -> . TIPO_SIMPLE ID ;
    (10) VARS -> . TIPO_SIMPLE ID [ I_CONST ] ;
    (15) TIPO_SIMPLE -> . INT
    (16) TIPO_SIMPLE -> . FLOAT
    (17) TIPO_SIMPLE -> . CHAR

    EMPTY           shift and go to state 6
    VAR             shift and go to state 7
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11

    VARS_PRIME                     shift and go to state 109
    VARS                           shift and go to state 5
    TIPO_SIMPLE                    shift and go to state 8

state 83

    (35) ASSIGNATION -> VARIABLE = EXPRESSION .

    EMPTY           reduce using rule 35 (ASSIGNATION -> VARIABLE = EXPRESSION .)
    ID              reduce using rule 35 (ASSIGNATION -> VARIABLE = EXPRESSION .)
    PRINT           reduce using rule 35 (ASSIGNATION -> VARIABLE = EXPRESSION .)
    IF              reduce using rule 35 (ASSIGNATION -> VARIABLE = EXPRESSION .)
    WHILE           reduce using rule 35 (ASSIGNATION -> VARIABLE = EXPRESSION .)
    FOR             reduce using rule 35 (ASSIGNATION -> VARIABLE = EXPRESSION .)


state 84

    (50) EXPRESSION -> AND_EXP . EXPRESSION_PRIME
    (51) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (52) EXPRESSION_PRIME -> . EMPTY

    OR              shift and go to state 111
    EMPTY           shift and go to state 112

    EXPRESSION_PRIME               shift and go to state 110

state 85

    (53) AND_EXP -> B_EXP . AND_EXP_PRIME
    (54) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (55) AND_EXP_PRIME -> . EMPTY

    AND             shift and go to state 114
    EMPTY           shift and go to state 115

    AND_EXP_PRIME                  shift and go to state 113

state 86

    (56) B_EXP -> TRUE .

    AND             reduce using rule 56 (B_EXP -> TRUE .)
    EMPTY           reduce using rule 56 (B_EXP -> TRUE .)


state 87

    (57) B_EXP -> FALSE .

    AND             reduce using rule 57 (B_EXP -> FALSE .)
    EMPTY           reduce using rule 57 (B_EXP -> FALSE .)


state 88

    (58) B_EXP -> EXP . B_EXP_PRIME
    (59) B_EXP_PRIME -> . >
    (60) B_EXP_PRIME -> . <
    (61) B_EXP_PRIME -> . DIFFERENT
    (62) B_EXP_PRIME -> . EQUAL
    (63) B_EXP_PRIME -> . EMPTY

    >               shift and go to state 117
    <               shift and go to state 118
    DIFFERENT       shift and go to state 119
    EQUAL           shift and go to state 120
    EMPTY           shift and go to state 121

    B_EXP_PRIME                    shift and go to state 116

state 89

    (64) EXP -> TERM . EXP_PRIME
    (65) EXP_PRIME -> . + TERM EXP_PRIME
    (66) EXP_PRIME -> . - TERM EXP_PRIME
    (67) EXP_PRIME -> . EMPTY

    +               shift and go to state 123
    -               shift and go to state 124
    EMPTY           shift and go to state 125

    EXP_PRIME                      shift and go to state 122

state 90

    (68) TERM -> FACTOR . TERM_PRIME
    (69) TERM_PRIME -> . * FACTOR TERM_PRIME
    (70) TERM_PRIME -> . / FACTOR TERM_PRIME
    (71) TERM_PRIME -> . EMPTY

    *               shift and go to state 127
    /               shift and go to state 128
    EMPTY           shift and go to state 129

    TERM_PRIME                     shift and go to state 126

state 91

    (72) FACTOR -> ( . EXPRESSION )
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 130
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 92

    (73) FACTOR -> * . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    VAR_CT                         shift and go to state 131

state 93

    (75) FACTOR -> VAR_CT .

    *               reduce using rule 75 (FACTOR -> VAR_CT .)
    /               reduce using rule 75 (FACTOR -> VAR_CT .)
    EMPTY           reduce using rule 75 (FACTOR -> VAR_CT .)


state 94

    (74) FACTOR -> / . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    VAR_CT                         shift and go to state 132

state 95

    (76) VAR_CT -> ID .

    *               reduce using rule 76 (VAR_CT -> ID .)
    /               reduce using rule 76 (VAR_CT -> ID .)
    EMPTY           reduce using rule 76 (VAR_CT -> ID .)
    }               reduce using rule 76 (VAR_CT -> ID .)


state 96

    (77) VAR_CT -> I_CONST .

    *               reduce using rule 77 (VAR_CT -> I_CONST .)
    /               reduce using rule 77 (VAR_CT -> I_CONST .)
    EMPTY           reduce using rule 77 (VAR_CT -> I_CONST .)
    }               reduce using rule 77 (VAR_CT -> I_CONST .)


state 97

    (78) VAR_CT -> F_CONST .

    *               reduce using rule 78 (VAR_CT -> F_CONST .)
    /               reduce using rule 78 (VAR_CT -> F_CONST .)
    EMPTY           reduce using rule 78 (VAR_CT -> F_CONST .)
    }               reduce using rule 78 (VAR_CT -> F_CONST .)


state 98

    (79) VAR_CT -> C_CONST .

    *               reduce using rule 79 (VAR_CT -> C_CONST .)
    /               reduce using rule 79 (VAR_CT -> C_CONST .)
    EMPTY           reduce using rule 79 (VAR_CT -> C_CONST .)
    }               reduce using rule 79 (VAR_CT -> C_CONST .)


state 99

    (36) FUNC_CALL -> ID ( EXPRESSION . FUNC_CALL_PRIME )
    (37) FUNC_CALL_PRIME -> . EXPRESSION FUNC_CALL_PRIME
    (38) FUNC_CALL_PRIME -> . EMPTY
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    EMPTY           shift and go to state 135
    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 133
    FUNC_CALL_PRIME                shift and go to state 134
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 100

    (49) DESCRIBE_STMT -> ID . DESCRIBE . ( )

    (               shift and go to state 136


state 101

    (14) VARIABLE -> ID [ EXPRESSION . ]

    ]               shift and go to state 137


state 102

    (39) PRINT_STMT -> PRINT ( EXPRESSION . PRINT_PRIME )
    (41) PRINT_PRIME -> . , EXPRESSION PRINT_PRIME
    (42) PRINT_PRIME -> . , TITLE PRINT_PRIME
    (43) PRINT_PRIME -> . EMPTY

    ,               shift and go to state 139
    EMPTY           shift and go to state 140

    PRINT_PRIME                    shift and go to state 138

state 103

    (40) PRINT_STMT -> PRINT ( TITLE . PRINT_PRIME )
    (41) PRINT_PRIME -> . , EXPRESSION PRINT_PRIME
    (42) PRINT_PRIME -> . , TITLE PRINT_PRIME
    (43) PRINT_PRIME -> . EMPTY

    ,               shift and go to state 139
    EMPTY           shift and go to state 140

    PRINT_PRIME                    shift and go to state 141

state 104

    (44) CONDITION -> IF ( EXPRESSION . ) { BLOCK } ELSE_STMT

    )               shift and go to state 142


state 105

    (47) WHILE_STMT -> WHILE ( EXPRESSION . ) { BLOCK }

    )               shift and go to state 143


state 106

    (48) FOR_STMT -> FOR ID = . EXPRESSION TO EXPRESSION DO { BLOCK }
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 144
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 107

    (24) PARAM_PRIME -> , TIPO_SIMPLE . ID PARAM_PRIME

    ID              shift and go to state 145


state 108

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME . BLOCK RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME . BLOCK RETURN VAR_CT }
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    BLOCK                          shift and go to state 146
    STATEMENT                      shift and go to state 50
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 109

    (21) FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME . BLOCK }
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    BLOCK                          shift and go to state 147
    STATEMENT                      shift and go to state 50
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 110

    (50) EXPRESSION -> AND_EXP EXPRESSION_PRIME .

    EMPTY           reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ]               reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    DO              reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 50 (EXPRESSION -> AND_EXP EXPRESSION_PRIME .)


state 111

    (51) EXPRESSION_PRIME -> OR . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    AND_EXP                        shift and go to state 148
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 112

    (52) EXPRESSION_PRIME -> EMPTY .

    EMPTY           reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    ID              reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    PRINT           reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    IF              reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    WHILE           reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    FOR             reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    TRUE            reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    FALSE           reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    (               reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    *               reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    /               reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    I_CONST         reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    F_CONST         reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    C_CONST         reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    ]               reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    ,               reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    )               reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    TO              reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    DO              reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)
    }               reduce using rule 52 (EXPRESSION_PRIME -> EMPTY .)


state 113

    (53) AND_EXP -> B_EXP AND_EXP_PRIME .

    OR              reduce using rule 53 (AND_EXP -> B_EXP AND_EXP_PRIME .)
    EMPTY           reduce using rule 53 (AND_EXP -> B_EXP AND_EXP_PRIME .)


state 114

    (54) AND_EXP_PRIME -> AND . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    B_EXP                          shift and go to state 149
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 115

    (55) AND_EXP_PRIME -> EMPTY .

    OR              reduce using rule 55 (AND_EXP_PRIME -> EMPTY .)
    EMPTY           reduce using rule 55 (AND_EXP_PRIME -> EMPTY .)


state 116

    (58) B_EXP -> EXP B_EXP_PRIME .

    AND             reduce using rule 58 (B_EXP -> EXP B_EXP_PRIME .)
    EMPTY           reduce using rule 58 (B_EXP -> EXP B_EXP_PRIME .)


state 117

    (59) B_EXP_PRIME -> > .

    AND             reduce using rule 59 (B_EXP_PRIME -> > .)
    EMPTY           reduce using rule 59 (B_EXP_PRIME -> > .)


state 118

    (60) B_EXP_PRIME -> < .

    AND             reduce using rule 60 (B_EXP_PRIME -> < .)
    EMPTY           reduce using rule 60 (B_EXP_PRIME -> < .)


state 119

    (61) B_EXP_PRIME -> DIFFERENT .

    AND             reduce using rule 61 (B_EXP_PRIME -> DIFFERENT .)
    EMPTY           reduce using rule 61 (B_EXP_PRIME -> DIFFERENT .)


state 120

    (62) B_EXP_PRIME -> EQUAL .

    AND             reduce using rule 62 (B_EXP_PRIME -> EQUAL .)
    EMPTY           reduce using rule 62 (B_EXP_PRIME -> EQUAL .)


state 121

    (63) B_EXP_PRIME -> EMPTY .

    AND             reduce using rule 63 (B_EXP_PRIME -> EMPTY .)
    EMPTY           reduce using rule 63 (B_EXP_PRIME -> EMPTY .)


state 122

    (64) EXP -> TERM EXP_PRIME .

    >               reduce using rule 64 (EXP -> TERM EXP_PRIME .)
    <               reduce using rule 64 (EXP -> TERM EXP_PRIME .)
    DIFFERENT       reduce using rule 64 (EXP -> TERM EXP_PRIME .)
    EQUAL           reduce using rule 64 (EXP -> TERM EXP_PRIME .)
    EMPTY           reduce using rule 64 (EXP -> TERM EXP_PRIME .)


state 123

    (65) EXP_PRIME -> + . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    TERM                           shift and go to state 150
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 124

    (66) EXP_PRIME -> - . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    TERM                           shift and go to state 151
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 125

    (67) EXP_PRIME -> EMPTY .

    >               reduce using rule 67 (EXP_PRIME -> EMPTY .)
    <               reduce using rule 67 (EXP_PRIME -> EMPTY .)
    DIFFERENT       reduce using rule 67 (EXP_PRIME -> EMPTY .)
    EQUAL           reduce using rule 67 (EXP_PRIME -> EMPTY .)
    EMPTY           reduce using rule 67 (EXP_PRIME -> EMPTY .)


state 126

    (68) TERM -> FACTOR TERM_PRIME .

    +               reduce using rule 68 (TERM -> FACTOR TERM_PRIME .)
    -               reduce using rule 68 (TERM -> FACTOR TERM_PRIME .)
    EMPTY           reduce using rule 68 (TERM -> FACTOR TERM_PRIME .)


state 127

    (69) TERM_PRIME -> * . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    FACTOR                         shift and go to state 152
    VAR_CT                         shift and go to state 93

state 128

    (70) TERM_PRIME -> / . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    FACTOR                         shift and go to state 153
    VAR_CT                         shift and go to state 93

state 129

    (71) TERM_PRIME -> EMPTY .

    +               reduce using rule 71 (TERM_PRIME -> EMPTY .)
    -               reduce using rule 71 (TERM_PRIME -> EMPTY .)
    EMPTY           reduce using rule 71 (TERM_PRIME -> EMPTY .)


state 130

    (72) FACTOR -> ( EXPRESSION . )

    )               shift and go to state 154


state 131

    (73) FACTOR -> * VAR_CT .

    *               reduce using rule 73 (FACTOR -> * VAR_CT .)
    /               reduce using rule 73 (FACTOR -> * VAR_CT .)
    EMPTY           reduce using rule 73 (FACTOR -> * VAR_CT .)


state 132

    (74) FACTOR -> / VAR_CT .

    *               reduce using rule 74 (FACTOR -> / VAR_CT .)
    /               reduce using rule 74 (FACTOR -> / VAR_CT .)
    EMPTY           reduce using rule 74 (FACTOR -> / VAR_CT .)


state 133

    (37) FUNC_CALL_PRIME -> EXPRESSION . FUNC_CALL_PRIME
    (37) FUNC_CALL_PRIME -> . EXPRESSION FUNC_CALL_PRIME
    (38) FUNC_CALL_PRIME -> . EMPTY
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    EMPTY           shift and go to state 135
    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 133
    FUNC_CALL_PRIME                shift and go to state 155
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 134

    (36) FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME . )

    )               shift and go to state 156


state 135

    (38) FUNC_CALL_PRIME -> EMPTY .

    )               reduce using rule 38 (FUNC_CALL_PRIME -> EMPTY .)


state 136

    (49) DESCRIBE_STMT -> ID . DESCRIBE ( . )

    )               shift and go to state 157


state 137

    (14) VARIABLE -> ID [ EXPRESSION ] .

    =               reduce using rule 14 (VARIABLE -> ID [ EXPRESSION ] .)


state 138

    (39) PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME . )

    )               shift and go to state 158


state 139

    (41) PRINT_PRIME -> , . EXPRESSION PRINT_PRIME
    (42) PRINT_PRIME -> , . TITLE PRINT_PRIME
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TITLE           shift and go to state 160
    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 159
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 140

    (43) PRINT_PRIME -> EMPTY .

    )               reduce using rule 43 (PRINT_PRIME -> EMPTY .)


state 141

    (40) PRINT_STMT -> PRINT ( TITLE PRINT_PRIME . )

    )               shift and go to state 161


state 142

    (44) CONDITION -> IF ( EXPRESSION ) . { BLOCK } ELSE_STMT

    {               shift and go to state 162


state 143

    (47) WHILE_STMT -> WHILE ( EXPRESSION ) . { BLOCK }

    {               shift and go to state 163


state 144

    (48) FOR_STMT -> FOR ID = EXPRESSION . TO EXPRESSION DO { BLOCK }

    TO              shift and go to state 164


state 145

    (24) PARAM_PRIME -> , TIPO_SIMPLE ID . PARAM_PRIME
    (24) PARAM_PRIME -> . , TIPO_SIMPLE ID PARAM_PRIME
    (25) PARAM_PRIME -> . EMPTY

    ,               shift and go to state 79
    EMPTY           shift and go to state 80

    PARAM_PRIME                    shift and go to state 165

state 146

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK . RETURN EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK . RETURN VAR_CT }

    RETURN          shift and go to state 166


state 147

    (21) FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK . }

    }               shift and go to state 167


state 148

    (51) EXPRESSION_PRIME -> OR AND_EXP . EXPRESSION_PRIME
    (51) EXPRESSION_PRIME -> . OR AND_EXP EXPRESSION_PRIME
    (52) EXPRESSION_PRIME -> . EMPTY

    OR              shift and go to state 111
    EMPTY           shift and go to state 112

    EXPRESSION_PRIME               shift and go to state 168

state 149

    (54) AND_EXP_PRIME -> AND B_EXP . AND_EXP_PRIME
    (54) AND_EXP_PRIME -> . AND B_EXP AND_EXP_PRIME
    (55) AND_EXP_PRIME -> . EMPTY

    AND             shift and go to state 114
    EMPTY           shift and go to state 115

    AND_EXP_PRIME                  shift and go to state 169

state 150

    (65) EXP_PRIME -> + TERM . EXP_PRIME
    (65) EXP_PRIME -> . + TERM EXP_PRIME
    (66) EXP_PRIME -> . - TERM EXP_PRIME
    (67) EXP_PRIME -> . EMPTY

    +               shift and go to state 123
    -               shift and go to state 124
    EMPTY           shift and go to state 125

    EXP_PRIME                      shift and go to state 170

state 151

    (66) EXP_PRIME -> - TERM . EXP_PRIME
    (65) EXP_PRIME -> . + TERM EXP_PRIME
    (66) EXP_PRIME -> . - TERM EXP_PRIME
    (67) EXP_PRIME -> . EMPTY

    +               shift and go to state 123
    -               shift and go to state 124
    EMPTY           shift and go to state 125

    EXP_PRIME                      shift and go to state 171

state 152

    (69) TERM_PRIME -> * FACTOR . TERM_PRIME
    (69) TERM_PRIME -> . * FACTOR TERM_PRIME
    (70) TERM_PRIME -> . / FACTOR TERM_PRIME
    (71) TERM_PRIME -> . EMPTY

    *               shift and go to state 127
    /               shift and go to state 128
    EMPTY           shift and go to state 129

    TERM_PRIME                     shift and go to state 172

state 153

    (70) TERM_PRIME -> / FACTOR . TERM_PRIME
    (69) TERM_PRIME -> . * FACTOR TERM_PRIME
    (70) TERM_PRIME -> . / FACTOR TERM_PRIME
    (71) TERM_PRIME -> . EMPTY

    *               shift and go to state 127
    /               shift and go to state 128
    EMPTY           shift and go to state 129

    TERM_PRIME                     shift and go to state 173

state 154

    (72) FACTOR -> ( EXPRESSION ) .

    *               reduce using rule 72 (FACTOR -> ( EXPRESSION ) .)
    /               reduce using rule 72 (FACTOR -> ( EXPRESSION ) .)
    EMPTY           reduce using rule 72 (FACTOR -> ( EXPRESSION ) .)


state 155

    (37) FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME .

    )               reduce using rule 37 (FUNC_CALL_PRIME -> EXPRESSION FUNC_CALL_PRIME .)


state 156

    (36) FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .

    EMPTY           reduce using rule 36 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    ID              reduce using rule 36 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    PRINT           reduce using rule 36 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    IF              reduce using rule 36 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    WHILE           reduce using rule 36 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)
    FOR             reduce using rule 36 (FUNC_CALL -> ID ( EXPRESSION FUNC_CALL_PRIME ) .)


state 157

    (49) DESCRIBE_STMT -> ID . DESCRIBE ( ) .

    EMPTY           reduce using rule 49 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    ID              reduce using rule 49 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    PRINT           reduce using rule 49 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    IF              reduce using rule 49 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    WHILE           reduce using rule 49 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)
    FOR             reduce using rule 49 (DESCRIBE_STMT -> ID . DESCRIBE ( ) .)


state 158

    (39) PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME ) .

    EMPTY           reduce using rule 39 (PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME ) .)
    ID              reduce using rule 39 (PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME ) .)
    PRINT           reduce using rule 39 (PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME ) .)
    IF              reduce using rule 39 (PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME ) .)
    WHILE           reduce using rule 39 (PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME ) .)
    FOR             reduce using rule 39 (PRINT_STMT -> PRINT ( EXPRESSION PRINT_PRIME ) .)


state 159

    (41) PRINT_PRIME -> , EXPRESSION . PRINT_PRIME
    (41) PRINT_PRIME -> . , EXPRESSION PRINT_PRIME
    (42) PRINT_PRIME -> . , TITLE PRINT_PRIME
    (43) PRINT_PRIME -> . EMPTY

    ,               shift and go to state 139
    EMPTY           shift and go to state 140

    PRINT_PRIME                    shift and go to state 174

state 160

    (42) PRINT_PRIME -> , TITLE . PRINT_PRIME
    (41) PRINT_PRIME -> . , EXPRESSION PRINT_PRIME
    (42) PRINT_PRIME -> . , TITLE PRINT_PRIME
    (43) PRINT_PRIME -> . EMPTY

    ,               shift and go to state 139
    EMPTY           shift and go to state 140

    PRINT_PRIME                    shift and go to state 175

state 161

    (40) PRINT_STMT -> PRINT ( TITLE PRINT_PRIME ) .

    EMPTY           reduce using rule 40 (PRINT_STMT -> PRINT ( TITLE PRINT_PRIME ) .)
    ID              reduce using rule 40 (PRINT_STMT -> PRINT ( TITLE PRINT_PRIME ) .)
    PRINT           reduce using rule 40 (PRINT_STMT -> PRINT ( TITLE PRINT_PRIME ) .)
    IF              reduce using rule 40 (PRINT_STMT -> PRINT ( TITLE PRINT_PRIME ) .)
    WHILE           reduce using rule 40 (PRINT_STMT -> PRINT ( TITLE PRINT_PRIME ) .)
    FOR             reduce using rule 40 (PRINT_STMT -> PRINT ( TITLE PRINT_PRIME ) .)


state 162

    (44) CONDITION -> IF ( EXPRESSION ) { . BLOCK } ELSE_STMT
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    BLOCK                          shift and go to state 176
    STATEMENT                      shift and go to state 50
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 163

    (47) WHILE_STMT -> WHILE ( EXPRESSION ) { . BLOCK }
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    BLOCK                          shift and go to state 177
    STATEMENT                      shift and go to state 50
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 164

    (48) FOR_STMT -> FOR ID = EXPRESSION TO . EXPRESSION DO { BLOCK }
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST

    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94
    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98

    EXPRESSION                     shift and go to state 178
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    VAR_CT                         shift and go to state 93

state 165

    (24) PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME .

    )               reduce using rule 24 (PARAM_PRIME -> , TIPO_SIMPLE ID PARAM_PRIME .)


state 166

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN . EXPRESSION }
    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN . VAR_CT }
    (50) EXPRESSION -> . AND_EXP EXPRESSION_PRIME
    (76) VAR_CT -> . ID
    (77) VAR_CT -> . I_CONST
    (78) VAR_CT -> . F_CONST
    (79) VAR_CT -> . C_CONST
    (53) AND_EXP -> . B_EXP AND_EXP_PRIME
    (56) B_EXP -> . TRUE
    (57) B_EXP -> . FALSE
    (58) B_EXP -> . EXP B_EXP_PRIME
    (64) EXP -> . TERM EXP_PRIME
    (68) TERM -> . FACTOR TERM_PRIME
    (72) FACTOR -> . ( EXPRESSION )
    (73) FACTOR -> . * VAR_CT
    (74) FACTOR -> . / VAR_CT
    (75) FACTOR -> . VAR_CT

    ID              shift and go to state 95
    I_CONST         shift and go to state 96
    F_CONST         shift and go to state 97
    C_CONST         shift and go to state 98
    TRUE            shift and go to state 86
    FALSE           shift and go to state 87
    (               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 94

    EXPRESSION                     shift and go to state 179
    VAR_CT                         shift and go to state 180
    AND_EXP                        shift and go to state 84
    B_EXP                          shift and go to state 85
    EXP                            shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90

state 167

    (21) FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK } .

    EMPTY           reduce using rule 21 (FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK } .)
    FUNC            reduce using rule 21 (FUNCTION -> FUNC VOID ID ( PARAM ) { VARS_PRIME BLOCK } .)


state 168

    (51) EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .

    EMPTY           reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ID              reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    PRINT           reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    IF              reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    WHILE           reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FOR             reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TRUE            reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    FALSE           reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    (               reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    *               reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    /               reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    I_CONST         reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    F_CONST         reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    C_CONST         reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ]               reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    ,               reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    )               reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    TO              reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    DO              reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)
    }               reduce using rule 51 (EXPRESSION_PRIME -> OR AND_EXP EXPRESSION_PRIME .)


state 169

    (54) AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .

    OR              reduce using rule 54 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)
    EMPTY           reduce using rule 54 (AND_EXP_PRIME -> AND B_EXP AND_EXP_PRIME .)


state 170

    (65) EXP_PRIME -> + TERM EXP_PRIME .

    >               reduce using rule 65 (EXP_PRIME -> + TERM EXP_PRIME .)
    <               reduce using rule 65 (EXP_PRIME -> + TERM EXP_PRIME .)
    DIFFERENT       reduce using rule 65 (EXP_PRIME -> + TERM EXP_PRIME .)
    EQUAL           reduce using rule 65 (EXP_PRIME -> + TERM EXP_PRIME .)
    EMPTY           reduce using rule 65 (EXP_PRIME -> + TERM EXP_PRIME .)


state 171

    (66) EXP_PRIME -> - TERM EXP_PRIME .

    >               reduce using rule 66 (EXP_PRIME -> - TERM EXP_PRIME .)
    <               reduce using rule 66 (EXP_PRIME -> - TERM EXP_PRIME .)
    DIFFERENT       reduce using rule 66 (EXP_PRIME -> - TERM EXP_PRIME .)
    EQUAL           reduce using rule 66 (EXP_PRIME -> - TERM EXP_PRIME .)
    EMPTY           reduce using rule 66 (EXP_PRIME -> - TERM EXP_PRIME .)


state 172

    (69) TERM_PRIME -> * FACTOR TERM_PRIME .

    +               reduce using rule 69 (TERM_PRIME -> * FACTOR TERM_PRIME .)
    -               reduce using rule 69 (TERM_PRIME -> * FACTOR TERM_PRIME .)
    EMPTY           reduce using rule 69 (TERM_PRIME -> * FACTOR TERM_PRIME .)


state 173

    (70) TERM_PRIME -> / FACTOR TERM_PRIME .

    +               reduce using rule 70 (TERM_PRIME -> / FACTOR TERM_PRIME .)
    -               reduce using rule 70 (TERM_PRIME -> / FACTOR TERM_PRIME .)
    EMPTY           reduce using rule 70 (TERM_PRIME -> / FACTOR TERM_PRIME .)


state 174

    (41) PRINT_PRIME -> , EXPRESSION PRINT_PRIME .

    )               reduce using rule 41 (PRINT_PRIME -> , EXPRESSION PRINT_PRIME .)


state 175

    (42) PRINT_PRIME -> , TITLE PRINT_PRIME .

    )               reduce using rule 42 (PRINT_PRIME -> , TITLE PRINT_PRIME .)


state 176

    (44) CONDITION -> IF ( EXPRESSION ) { BLOCK . } ELSE_STMT

    }               shift and go to state 181


state 177

    (47) WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK . }

    }               shift and go to state 182


state 178

    (48) FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION . DO { BLOCK }

    DO              shift and go to state 183


state 179

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION . }

    }               shift and go to state 184


state 180

    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT . }
    (75) FACTOR -> VAR_CT .

    }               shift and go to state 185
    *               reduce using rule 75 (FACTOR -> VAR_CT .)
    /               reduce using rule 75 (FACTOR -> VAR_CT .)
    EMPTY           reduce using rule 75 (FACTOR -> VAR_CT .)


state 181

    (44) CONDITION -> IF ( EXPRESSION ) { BLOCK } . ELSE_STMT
    (45) ELSE_STMT -> . ELSE { BLOCK }
    (46) ELSE_STMT -> . EMPTY

    ELSE            shift and go to state 187
    EMPTY           shift and go to state 188

    ELSE_STMT                      shift and go to state 186

state 182

    (47) WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK } .

    EMPTY           reduce using rule 47 (WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK } .)
    ID              reduce using rule 47 (WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK } .)
    PRINT           reduce using rule 47 (WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK } .)
    IF              reduce using rule 47 (WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK } .)
    WHILE           reduce using rule 47 (WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK } .)
    FOR             reduce using rule 47 (WHILE_STMT -> WHILE ( EXPRESSION ) { BLOCK } .)


state 183

    (48) FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO . { BLOCK }

    {               shift and go to state 189


state 184

    (19) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION } .

    EMPTY           reduce using rule 19 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION } .)
    FUNC            reduce using rule 19 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN EXPRESSION } .)


state 185

    (20) FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT } .

    EMPTY           reduce using rule 20 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT } .)
    FUNC            reduce using rule 20 (FUNCTION -> FUNC TIPO_SIMPLE ID ( PARAM ) { VARS_PRIME BLOCK RETURN VAR_CT } .)


state 186

    (44) CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT .

    EMPTY           reduce using rule 44 (CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT .)
    ID              reduce using rule 44 (CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT .)
    PRINT           reduce using rule 44 (CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT .)
    IF              reduce using rule 44 (CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT .)
    WHILE           reduce using rule 44 (CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT .)
    FOR             reduce using rule 44 (CONDITION -> IF ( EXPRESSION ) { BLOCK } ELSE_STMT .)


state 187

    (45) ELSE_STMT -> ELSE . { BLOCK }

    {               shift and go to state 190


state 188

    (46) ELSE_STMT -> EMPTY .

    EMPTY           reduce using rule 46 (ELSE_STMT -> EMPTY .)
    ID              reduce using rule 46 (ELSE_STMT -> EMPTY .)
    PRINT           reduce using rule 46 (ELSE_STMT -> EMPTY .)
    IF              reduce using rule 46 (ELSE_STMT -> EMPTY .)
    WHILE           reduce using rule 46 (ELSE_STMT -> EMPTY .)
    FOR             reduce using rule 46 (ELSE_STMT -> EMPTY .)


state 189

    (48) FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { . BLOCK }
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    BLOCK                          shift and go to state 191
    STATEMENT                      shift and go to state 50
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 190

    (45) ELSE_STMT -> ELSE { . BLOCK }
    (26) BLOCK -> . STATEMENT BLOCK
    (27) BLOCK -> . EMPTY
    (28) STATEMENT -> . ASSIGNATION
    (29) STATEMENT -> . FUNC_CALL
    (30) STATEMENT -> . PRINT_STMT
    (31) STATEMENT -> . CONDITION
    (32) STATEMENT -> . WHILE_STMT
    (33) STATEMENT -> . FOR_STMT
    (34) STATEMENT -> . DESCRIBE_STMT
    (35) ASSIGNATION -> . VARIABLE = EXPRESSION
    (36) FUNC_CALL -> . ID ( EXPRESSION FUNC_CALL_PRIME )
    (39) PRINT_STMT -> . PRINT ( EXPRESSION PRINT_PRIME )
    (40) PRINT_STMT -> . PRINT ( TITLE PRINT_PRIME )
    (44) CONDITION -> . IF ( EXPRESSION ) { BLOCK } ELSE_STMT
    (47) WHILE_STMT -> . WHILE ( EXPRESSION ) { BLOCK }
    (48) FOR_STMT -> . FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK }
    (49) DESCRIBE_STMT -> . ID . DESCRIBE ( )
    (13) VARIABLE -> . ID
    (14) VARIABLE -> . ID [ EXPRESSION ]

    EMPTY           shift and go to state 51
    ID              shift and go to state 60
    PRINT           shift and go to state 61
    IF              shift and go to state 62
    WHILE           shift and go to state 63
    FOR             shift and go to state 64

    BLOCK                          shift and go to state 192
    STATEMENT                      shift and go to state 50
    ASSIGNATION                    shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    PRINT_STMT                     shift and go to state 54
    CONDITION                      shift and go to state 55
    WHILE_STMT                     shift and go to state 56
    FOR_STMT                       shift and go to state 57
    DESCRIBE_STMT                  shift and go to state 58
    VARIABLE                       shift and go to state 59

state 191

    (48) FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK . }

    }               shift and go to state 193


state 192

    (45) ELSE_STMT -> ELSE { BLOCK . }

    }               shift and go to state 194


state 193

    (48) FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK } .

    EMPTY           reduce using rule 48 (FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK } .)
    ID              reduce using rule 48 (FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK } .)
    PRINT           reduce using rule 48 (FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK } .)
    IF              reduce using rule 48 (FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK } .)
    WHILE           reduce using rule 48 (FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK } .)
    FOR             reduce using rule 48 (FOR_STMT -> FOR ID = EXPRESSION TO EXPRESSION DO { BLOCK } .)


state 194

    (45) ELSE_STMT -> ELSE { BLOCK } .

    EMPTY           reduce using rule 45 (ELSE_STMT -> ELSE { BLOCK } .)
    ID              reduce using rule 45 (ELSE_STMT -> ELSE { BLOCK } .)
    PRINT           reduce using rule 45 (ELSE_STMT -> ELSE { BLOCK } .)
    IF              reduce using rule 45 (ELSE_STMT -> ELSE { BLOCK } .)
    WHILE           reduce using rule 45 (ELSE_STMT -> ELSE { BLOCK } .)
    FOR             reduce using rule 45 (ELSE_STMT -> ELSE { BLOCK } .)

